#include "../../../include/odfaeg/Network/aes.h"
namespace odfaeg {
using namespace std;


#include <string>

int AES_ENC::size = 0;
unsigned char* AES_ENC::key = new unsigned char[32];
unsigned char* AES_ENC::iv = new unsigned char[32];
unsigned char* AES_ENC::aesSalt = new unsigned char[32];
EVP_CIPHER_CTX* AES_ENC::e_ctx = new EVP_CIPHER_CTX;
EVP_CIPHER_CTX* AES_ENC::d_ctx = new EVP_CIPHER_CTX;
unsigned char* AES_ENC::aesPass = generateKey(256);

int AES_ENC::encrypt(const char* data, size_t dataSize, char **encData) {
    size_t blockLen  = 0;
    size_t encDataLen  = 0;
    *encData = new char[dataSize + AES_BLOCK_SIZE];
    if (!EVP_EncryptInit_ex(e_ctx, EVP_aes_256_cbc(), NULL, key, iv))
        return FAILURE;
    if (!EVP_EncryptUpdate(e_ctx, (unsigned char*) *encData, (int*)&blockLen, (unsigned char*) data, dataSize))
        return FAILURE;
    encDataLen += blockLen;
    if(!EVP_EncryptFinal_ex(e_ctx, (unsigned char*) *encData + encDataLen, (int*)&blockLen))
        return FAILURE;
    EVP_CIPHER_CTX_cleanup(e_ctx);
    return encDataLen + blockLen;
}
int AES_ENC::decrypt(const char* encData, size_t dataSize, char **data) {
    size_t dataLen   = 0;
    size_t blockLen = 0;
    char *msg = new char[dataSize];
    if (!EVP_DecryptInit_ex(d_ctx, EVP_aes_256_cbc(), NULL, key, iv))
        return FAILURE;
    if (!EVP_DecryptUpdate(d_ctx, (unsigned char*) msg, (int*)&blockLen, (unsigned char*) encData, (int)dataSize))
        return FAILURE;
    dataLen += blockLen;
    if (!EVP_DecryptFinal_ex(d_ctx, (unsigned char*) msg + dataLen, (int*)&blockLen))
        return FAILURE;
    dataLen += blockLen;
    *data = new char[dataLen+1];
    memcpy(*data, msg, dataLen);
    (*data)[dataLen] = '\0';
    delete[] msg;
    EVP_CIPHER_CTX_cleanup(d_ctx);
    return dataLen;
}
void AES_ENC::setKey(char* sKey) {
   strncpy((char*) key, sKey, size / 8);
}
void AES_ENC::setIv(char* sIv) {
   strncpy((char*) iv, sIv, size / 8);
}
char* AES_ENC::getKey() {
   return (char*) key;
}
char* AES_ENC::getIv() {
   return (char*) iv;
}
}

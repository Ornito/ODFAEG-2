#include "boundingRectangle.h"
#include "boundingCircle.h"
/*Crée un rectangle englobant pour la détection de collision et la sélection
*d'objets.
*/
//Crée un rectangle de largeur width, de hauteur height et à la position (x, y)
BoundingRectangle::BoundingRectangle (int x, int y, int width, int height) :  center (x + width * 0.5f, y + height * 0.5f) {
    this->x = x;
    this->y = y;
    this->width = width;
    this->height = height;
    center.x = x + (float) width * 0.5f;
    center.y = y + (float) height * 0.5f;

}
BoundingRectangle::BoundingRectangle () {
    x = 0;
    y = 0;
    width = 0;
    height = 0;
    center.x = 0;
    center.y = 0;
}
//Test si un rectangle en intersecte un autre.
bool BoundingRectangle::intersects (const BoundingRectangle &other) {
    int hx1 = width * 0.5;
    int hy1 = height * 0.5;
    int hx2 = other.width * 0.5;
    int hy2 = other.height * 0.5;
    float minX1 = center.x - hx1, minX2 = other.center.x - hx2;
    float minY1 = center.y - hy1, minY2 = other.center.y - hy2;
    float maxX1 = center.x + hx1, maxX2 = other.center.x + hx2;
    float maxY1 = center.y + hy1, maxY2 = other.center.y + hy2;
    for (int i = 0; i < 2; i++) {
        if (i == 0) {
            if (minX1 >= maxX2 || maxX1 <= minX2)
                return false;
        } else {
            if (minY1 >= maxY2 || maxY1 <= minY2)
                return false;
        }
    }
    return true;
}
bool BoundingRectangle::intersectsWithEdge (const BoundingRectangle &other) {
    int hx1 = width * 0.5;
    int hy1 = height * 0.5;
    int hx2 = other.width * 0.5;
    int hy2 = other.height * 0.5;
    float minX1 = center.x - hx1, minX2 = other.center.x - hx2;
    float minY1 = center.y - hy1, minY2 = other.center.y - hy2;
    float maxX1 = center.x + hx1, maxX2 = other.center.x + hx2;
    float maxY1 = center.y + hy1, maxY2 = other.center.y + hy2;
    for (int i = 0; i < 2; i++) {
        if (i == 0) {
            if (minX1 > maxX2 || maxX1 < minX2)
                return false;
        } else {
            if (minY1 > maxY2 || maxY1 < minY2)
                return false;
        }
    }
    return true;
}
//Test si le rectangle intersecte un cercle.
bool BoundingRectangle::intersects (BoundingCircle &bc) {
    return bc.intersects(*this);
}
//Test si un point est dans le rectangle.
bool BoundingRectangle::isPointInside (Vec2f point) {
    float minX = center.x - width * 0.5f;
    float maxX = center.x + width * 0.5f;
    float minY = center.y - height * 0.5f;
    float maxY = center.y + height * 0.5f;

    return (point.x >= minX && point.x <= maxX && point.y >= minY && point.y <= maxY);
}
bool BoundingRectangle::intersects (Segment &segment) {
    float tFar = INT_MAX;
    float tNear = -INT_MAX;
    for (int i = 0; i < 2; i++) {
        float hi, orig, d;
        if (i == 0) {
            hi = width / 2;
            d = segment.getDir().x;
            orig = segment.getOrig().x - center.x;
        } else {
            hi = height / 2;
            d = segment.getDir().y;
            orig = segment.getOrig().y - center.y;
        }

    if (d == 0)
        if (Math::abs(orig) > hi)
            return false;
        float t1 = (-hi - orig) / d;
        float t2 = (hi - orig) / d;
        //std::cout<<""<<ray.getDir().x<<ray.getDir().y<<ray.getDir().z;
        float tmp;
        if (t1 > t2) {
            tmp = t1;
            t1 = t2;
            t2 = tmp;
        } else
            tmp = t1;
        if (t1 > tNear)
            tNear = t1;
        if (t2 < tFar)
            tFar = t2;
        //Le rayon rencontre la face droite avant la face gauche, et donc ne coupe pas la boîte.
        if (tNear > tFar)
            return false;
        //Si la boîte est derrière l'origine du rayon
        if(tFar < 0)
            return false;

    }

    this->tNear = segment.getOrig() + segment.getDir() * tNear;
    this->tFar = segment.getOrig() + segment.getDir() * tFar;

    return true;

}
//Acceseurs.
Vec2f BoundingRectangle::getCenter () {
    return center;
}
float BoundingRectangle::getWidth () {
    return width;
}
float BoundingRectangle::getHeight () {
    return height;
}
Vec2f BoundingRectangle::getTNear () {
    return tNear;
}
Vec2f BoundingRectangle::getTFar () {
    return tFar;
}
Vec2f BoundingRectangle::getPosition () {
    return Vec2f (x, y);
}
void BoundingRectangle::setPosition(int x, int y) {
    this->x = x;
    this->y = y;
}
void BoundingRectangle::setSize(int width, int height) {
    this->width = width;
    this->height = height;
}

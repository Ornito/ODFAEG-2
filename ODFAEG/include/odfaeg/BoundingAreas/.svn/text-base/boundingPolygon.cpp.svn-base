#include "BoundingPolygon.h"
BoundingPolygon::BoundingPolygon () {
}
void BoundingPolygon::addPoint(Vec2f *point) {
    points.push_back(point);
    computeCenter();
}
bool BoundingPolygon::isPointInside(Vec2f &p) {

    /*On calcule le nombre d'intersections avec une demi-droite
    *partant du point p vers le haut, et les segments du polygône.
    *Si le nombre d'intersections est impair, alors le point est dans le polygône!
    *          |
    *          /\
    *         /| \
    *        / |  \
    *        \ .  /
    *         \  /
    *          \/
    */
    int nbIntersections = 0;
    Vec2f i;
    i.x = 10000 + rand() % 100;
    i.y = 10000 + rand() % 100;

    for (int n = 0; n < points.size() ; n++) {
        Vec2f a = *points[n];
        Vec2f b;
        if (n == points.size() - 1)
            b = *points[0];
        else
            b = *points[n + 1];
        Segment s1 (a, b);
        Segment s2 (i, p);
        int iseg = s1.intersects(s2);
        if (iseg == -1)
            return isPointInside(p);
        nbIntersections += iseg;
    }
   //Si le nombre d'intersections est impaire alors le point est dans le polygône.
   return nbIntersections % 2 != 0;
}
bool BoundingPolygon::intersects (BoundingRectangle &br) {
    Vec2f pts[4];
    pts[0] = Vec2f (br.getPosition().x, br.getPosition().y);
    pts[1] = Vec2f (br.getPosition().x + br.getWidth(), br.getPosition().y);
    pts[2] = Vec2f (br.getPosition().x + br.getWidth(), br.getPosition().y + br.getHeight());
    pts[3] = Vec2f (br.getPosition().x, br.getPosition().y + br.getHeight());

    for (int i = 0; i < 4; i++) {
       Vec2f v1 = pts[i];
       Vec2f v2;
       if (i == 3)
           v2 = pts[0];
       else
           v2 = pts[i + 1];
       Segment s1 (v1, v2);
       for (int j = 0; j < points.size(); j++) {
            Vec2f v3 = *points[j];
            Vec2f v4;
            if (j == points.size() - 1)
                v4 = *points[0];
            else
                v4 = *points[j+1];
            Segment s2 (v3, v4);

            if (s1.intersects(s2) > 0.f) {

                return true;
            }
       }
    }
    return false;
}
void BoundingPolygon::computeCenter () {
    Vec2f sum(0.f, 0.f);
    for (int i = 0; i < points.size(); i++) {
        sum += *points[i];
    }
    center = sum / points.size();

}

BoundingPolygon::~BoundingPolygon () {
    for (int i = 0; i < points.size(); i++) {
        delete points[i];

    }
    points.clear();

}
bool BoundingPolygon::operator== (const BoundingPolygon &bp) {
    if(points.size() != bp.points.size())
        return false;
    for (int i = 0; i < points.size(); i++) {
        if (!(points[i] == bp.points[i]))
            return false;
    }
    return true;
}
Vec2f BoundingPolygon::getPoint(int index) {
    if (index >= 0 && index < points.size())
        return *points[index];
}
Vec2f BoundingPolygon::getCenter () {
    return center;
}



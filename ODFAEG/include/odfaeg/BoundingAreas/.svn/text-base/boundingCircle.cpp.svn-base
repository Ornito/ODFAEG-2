#include "boundingCircle.h"
/*Crée un cercle englobant, utilisé pour les détection de collisions, et la sélection
* d'objets.
*/
//Crée un cercle de centre center et de rayon radius.
BoundingCircle::BoundingCircle (Vec2f center, float radius) {
    this->center = center;
    this->radius = radius;
}
//Test si un cercle en intersecte un autre.
bool BoundingCircle::intersects (BoundingCircle &other) {
    float d = center.computeDist (other.center);
    float rSum = radius + other.radius;
    return (d <= rSum);
}
//Test si un rectangle intersecte un cercle. (Théorême de l'axe séparateur.)
bool BoundingCircle::intersects (BoundingRectangle &br) {
    float c = center.magnitude();
    float cPrim = br.getCenter().projOnAxis(center);
    float hu = br.getWidth() * 0.5f;
    float hv = br.getHeight() * 0.5f;
    for (int i = 0; i < 2; i++) {
        int rSum = 0;
        if (i == 0) {
            rSum = radius + hu;
        } else {
            rSum = radius + hv;
        }
        if (c - cPrim - rSum > 0.f)
            return false;
    }
    return true;
}
bool BoundingCircle::intersects (Segment &segment) {

    Vec2f ac = center - segment.getOrig();
    float numerateur = segment.getDir().x * ac.y - segment.getDir().y * ac.x;
    numerateur = Math::abs(numerateur);
    float denominateur = segment.getDir().magnitude();
    float ci =  numerateur / denominateur;
    if (ci >= radius)
        return false;

    Vec2f bc = center - segment.getExt();
    float dot1 = segment.getDir().dot(ac);
    float dot2 = -segment.getDir().dot(bc);
    if (dot1 >= 0 && dot2 >= 0)
        return true;
    Vec2f orig = segment.getOrig ();
    if (isPointInside(orig)) {

        return true;
    }
    Vec2f ext = segment.getExt();
    if (isPointInside(ext)) {
        return true;
    }
    return false;

}
//Teste si un point est à l'intérieur du cercle.
bool BoundingCircle::isPointInside (Vec2f &point) {
    float d = center.computeDist(point);
    return d < radius;
}
Vec2f BoundingCircle::getTNear () {
    return tNear;
}
Vec2f BoundingCircle::getTFar () {
    return tFar;
}


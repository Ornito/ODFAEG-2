
;; Function void __debugbreak() (null)
;; enabled by -tree-original


<<cleanup_point __asm__ __volatile__("int {$}3"::)>>;


;; Function int swscanf(const wchar_t*, const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __mingw_vswscanf (__source, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int wscanf(const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __mingw_vfwscanf (__acrt_iob_func (0), __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int fwscanf(FILE*, const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __mingw_vfwscanf (__stream, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int vswscanf(const wchar_t*, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vswscanf (__source, __format, __local_argv)>>;


;; Function int vwscanf(const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vfwscanf (__acrt_iob_func (0), __format, __local_argv)>>;


;; Function int vfwscanf(FILE*, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vfwscanf (__stream, __format, __local_argv)>>;


;; Function int fwprintf(FILE*, const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __mingw_vfwprintf (__stream, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int wprintf(const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __mingw_vfwprintf (__acrt_iob_func (1), __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int vfwprintf(FILE*, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vfwprintf (__stream, __format, __local_argv)>>;


;; Function int vwprintf(const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vfwprintf (__acrt_iob_func (1), __format, __local_argv)>>;


;; Function int snwprintf(wchar_t*, size_t, const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __mingw_vsnwprintf (__stream, __n, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int vsnwprintf(wchar_t*, size_t, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vsnwprintf (__stream, __n, __format, __local_argv)>>;


;; Function int vswprintf(wchar_t*, size_t, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = vsnwprintf (__stream, __count, __format, __local_argv)>>;


;; Function int swprintf(wchar_t*, size_t, const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = vswprintf (__stream, __count, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int vswprintf(wchar_t*, const wchar_t*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vswprintf (__stream, __format, __local_argv)>>;


;; Function int swprintf(wchar_t*, const wchar_t*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = vswprintf (__stream, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function double wcstod(const wchar_t*, wchar_t**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_wcstod (_Str, _EndPtr)>>;


;; Function float wcstof(const wchar_t*, wchar_t**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_wcstof (_Str, _EndPtr)>>;


;; Function size_t wcsnlen_s(const wchar_t*, size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _src != 0B ? wcsnlen (_src, _count) : 0>>;


;; Function wchar_t* std::wcschr(wchar_t*, wchar_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = wcschr ((const wchar_t *) __p, (int) __c)>>;


;; Function wchar_t* std::wcspbrk(wchar_t*, const wchar_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = wcspbrk ((const wchar_t *) __s1, __s2)>>;


;; Function wchar_t* std::wcsrchr(wchar_t*, wchar_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = wcsrchr ((const wchar_t *) __p, (int) __c)>>;


;; Function wchar_t* std::wcsstr(wchar_t*, const wchar_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = wcsstr ((const wchar_t *) __s1, __s2)>>;


;; Function wchar_t* std::wmemchr(wchar_t*, wchar_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = wmemchr ((const wchar_t *) __p, (int) __c, __n)>>;


;; Function std::exception::exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct exception *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception *) this)->_vptr.exception = &_ZTVSt9exception + 16) >>>>>;
  }
   >>>;


;; Function std::bad_exception::bad_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct bad_exception *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_exception *) this)->D.4338) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_exception *) this)->D.4338._vptr.exception = &_ZTVSt13bad_exception + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_exception *) this)->D.4338);
      }
  }
   >>>;


;; Function const char* std::type_info::name() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *(const char *) ((const struct type_info *) this)->__name == 42 ? (const char *) ((const struct type_info *) this)->__name + 1 : (const char *) ((const struct type_info *) this)->__name
   >>>;


;; Function std::size_t std::type_info::hash_code() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_bytes ((const void *) std::type_info::name ((const struct type_info *) this), __builtin_strlen (std::type_info::name ((const struct type_info *) this)), 3339675911)>>
   >>>;


;; Function std::type_info::type_info(const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct type_info *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct type_info *) this)->_vptr.type_info = &_ZTVSt9type_info + 16) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct type_info *) this)->__name = __n) >>>>>;
}


;; Function std::bad_cast::bad_cast() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct bad_cast *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_cast *) this)->D.4496) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_cast *) this)->D.4496._vptr.exception = &_ZTVSt8bad_cast + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_cast *) this)->D.4496);
      }
  }
   >>>;


;; Function std::bad_typeid::bad_typeid() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct bad_typeid *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_typeid *) this)->D.4528) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_typeid *) this)->D.4528._vptr.exception = &_ZTVSt10bad_typeid + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_typeid *) this)->D.4528);
      }
  }
   >>>;


;; Function std::bad_alloc::bad_alloc() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct bad_alloc *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::exception::exception (&((struct bad_alloc *) this)->D.4579) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_alloc *) this)->D.4579._vptr.exception = &_ZTVSt9bad_alloc + 16) >>>>>;
      }
    catch
      {
        std::exception::~exception (&((struct bad_alloc *) this)->D.4579);
      }
  }
   >>>;


;; Function std::bad_array_new_length::bad_array_new_length() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct bad_array_new_length *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::bad_alloc::bad_alloc (&((struct bad_array_new_length *) this)->D.4611) >>>>>;
    try
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct bad_array_new_length *) this)->D.4611.D.4579._vptr.exception = &_ZTVSt20bad_array_new_length + 16) >>>>>;
      }
    catch
      {
        std::bad_alloc::~bad_alloc (&((struct bad_array_new_length *) this)->D.4611);
      }
  }
   >>>;


;; Function void* operator new(std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __p
   >>>;


;; Function void* operator new [](std::size_t, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __p
   >>>;


;; Function void operator delete(void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function void operator delete [](void*, void*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::nullptr_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct exception_ptr *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception_ptr *) this)->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct exception_ptr *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception_ptr *) this)->_M_exception_object = __o->_M_exception_object) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__o->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr& std::__exception_ptr::exception_ptr::operator=(std::__exception_ptr::exception_ptr&&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::swap (&TARGET_EXPR <D.4898, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.4898
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  NON_LVALUE_EXPR <__o> >>>>, (struct exception_ptr &) this) >>>>>;
  return <retval> = (struct exception_ptr &) this;
   >>>;


;; Function std::__exception_ptr::exception_ptr::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (void *) ((const struct exception_ptr *) this)->_M_exception_object != 0B
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct exception_ptr *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception_ptr *) this)->_M_exception_object = 0B) >>>>>;
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::exception_ptr(const std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct exception_ptr *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception_ptr *) this)->_M_exception_object = (void *) __other->_M_exception_object) >>>>>;
    if (((struct exception_ptr *) this)->_M_exception_object != 0B)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::_M_addref ((struct exception_ptr *) this) >>>>>;
      }
  }
   >>>;


;; Function std::__exception_ptr::exception_ptr::~exception_ptr() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (((struct exception_ptr *) this)->_M_exception_object != 0B)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::_M_release ((struct exception_ptr *) this) >>>>>;
          }
      }
    finally
      {
        *(struct exception_ptr *) this = {CLOBBER};
      }
  }
  <D.4918>:;
   >>>;


;; Function std::__exception_ptr::exception_ptr& std::__exception_ptr::exception_ptr::operator=(const std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::swap (&TARGET_EXPR <D.4930, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.4930
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  __other >>>>, (struct exception_ptr &) this) >>>>>;
  return <retval> = (struct exception_ptr &) this;
   >>>;


;; Function void std::__exception_ptr::exception_ptr::swap(std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    void * __tmp = ((struct exception_ptr *) this)->_M_exception_object;

        void * __tmp = ((struct exception_ptr *) this)->_M_exception_object;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct exception_ptr *) this)->_M_exception_object = __other->_M_exception_object) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__other->_M_exception_object = __tmp) >>>>>;
  }
   >>>;


;; Function void std::__exception_ptr::swap(std::__exception_ptr::exception_ptr&, std::__exception_ptr::exception_ptr&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__exception_ptr::exception_ptr::swap ((struct exception_ptr *) __lhs, __rhs) >>>>>;


;; Function constexpr bool std::is_constant_evaluated() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __builtin_is_constant_evaluated ()
   >>>;


;; Function std::nested_exception::nested_exception() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct nested_exception *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct nested_exception *) this)->_vptr.nested_exception = &_ZTVSt16nested_exception + 16) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct nested_exception *) this)->_M_ptr = TARGET_EXPR <D.9591, <<< Unknown tree: aggr_init_expr
  3
  current_exception
  D.9591 >>>>) >>>>>;
    try
      {
        
      }
    catch
      {
        std::__exception_ptr::exception_ptr::~exception_ptr (&((struct nested_exception *) this)->_M_ptr);
      }
  }
   >>>;


;; Function void std::nested_exception::rethrow_nested() const (null)
;; enabled by -tree-original


if (<<cleanup_point std::__exception_ptr::exception_ptr::operator bool (&((const struct nested_exception *) this)->_M_ptr)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::rethrow_exception (&TARGET_EXPR <D.9597, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.9597
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>) >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::terminate () >>>>>;


;; Function std::__exception_ptr::exception_ptr std::nested_exception::nested_ptr() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return *<retval> = TARGET_EXPR <D.9599, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.9599
  (struct exception_ptr *) <<< Unknown tree: void_cst >>>
  (const struct exception_ptr &) &((const struct nested_exception *) this)->_M_ptr >>>>>>
   >>>;


;; Function void std::__rethrow_if_nested_impl(const void*) (null)
;; enabled by -tree-original





;; Function bool __gnu_cxx::__is_null_pointer(std::nullptr_t) (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function constexpr std::__cmp_cat::__unspec::__unspec(std::__cmp_cat::__unspec*) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr std::partial_ordering::partial_ordering(std::__cmp_cat::_Ord) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct partial_ordering *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct partial_ordering *) this)->_M_value = (type) __v) >>>>>;
  }
   >>>;


;; Function constexpr std::partial_ordering::partial_ordering(std::__cmp_cat::_Ncmp) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct partial_ordering *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct partial_ordering *) this)->_M_value = (type) __v) >>>>>;
  }
   >>>;


;; Function constexpr bool std::operator==(std::partial_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value == 0
   >>>;


;; Function constexpr bool std::operator<(std::partial_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value == -1
   >>>;


;; Function constexpr bool std::operator>(std::partial_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value == 1
   >>>;


;; Function constexpr bool std::operator<=(std::partial_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value <= 0
   >>>;


;; Function constexpr bool std::operator>=(std::partial_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ((int) __v._M_value & 1) == (int) __v._M_value
   >>>;


;; Function constexpr bool std::operator<(std::__cmp_cat::__unspec, std::partial_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value == 1
   >>>;


;; Function constexpr bool std::operator>(std::__cmp_cat::__unspec, std::partial_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value == -1
   >>>;


;; Function constexpr bool std::operator<=(std::__cmp_cat::__unspec, std::partial_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ((int) __v._M_value & 1) == (int) __v._M_value
   >>>;


;; Function constexpr bool std::operator>=(std::__cmp_cat::__unspec, std::partial_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value <= 0
   >>>;


;; Function constexpr std::partial_ordering std::operator<=>(std::partial_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.11031, *(struct partial_ordering &) &__v>>>
   >>>;


;; Function constexpr std::partial_ordering std::operator<=>(std::__cmp_cat::__unspec, std::partial_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (((int) __v._M_value & 1) != 0)
    {
      <<cleanup_point return <retval> = TARGET_EXPR <D.11046, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.11046
  (struct partial_ordering *) <<< Unknown tree: void_cst >>>
  (_Ord) -(unsigned char) __v._M_value >>>>;, D.11046>>;
    }
  else
    {
      <<cleanup_point return <retval> = TARGET_EXPR <D.11047, *(struct partial_ordering &) &__v>>>;
    }
   >>>;


;; Function constexpr std::weak_ordering::weak_ordering(std::__cmp_cat::_Ord) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct weak_ordering *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct weak_ordering *) this)->_M_value = (type) __v) >>>>>;
  }
   >>>;


;; Function constexpr std::weak_ordering::operator std::partial_ordering() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.11124, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.11124
  (struct partial_ordering *) <<< Unknown tree: void_cst >>>
  (_Ord) ((const struct weak_ordering *) this)->_M_value >>>>;, D.11124>>
   >>>;


;; Function constexpr bool std::operator==(std::weak_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value == 0
   >>>;


;; Function constexpr bool std::operator<(std::weak_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value < 0
   >>>;


;; Function constexpr bool std::operator>(std::weak_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value > 0
   >>>;


;; Function constexpr bool std::operator<=(std::weak_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value <= 0
   >>>;


;; Function constexpr bool std::operator>=(std::weak_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value >= 0
   >>>;


;; Function constexpr bool std::operator<(std::__cmp_cat::__unspec, std::weak_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value > 0
   >>>;


;; Function constexpr bool std::operator>(std::__cmp_cat::__unspec, std::weak_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value < 0
   >>>;


;; Function constexpr bool std::operator<=(std::__cmp_cat::__unspec, std::weak_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value >= 0
   >>>;


;; Function constexpr bool std::operator>=(std::__cmp_cat::__unspec, std::weak_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value <= 0
   >>>;


;; Function constexpr std::weak_ordering std::operator<=>(std::weak_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.11183, *(struct weak_ordering &) &__v>>>
   >>>;


;; Function constexpr std::weak_ordering std::operator<=>(std::__cmp_cat::__unspec, std::weak_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.11198, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.11198
  (struct weak_ordering *) <<< Unknown tree: void_cst >>>
  (_Ord) -(unsigned char) __v._M_value >>>>;, D.11198>>
   >>>;


;; Function constexpr std::strong_ordering::strong_ordering(std::__cmp_cat::_Ord) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct strong_ordering *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct strong_ordering *) this)->_M_value = (type) __v) >>>>>;
  }
   >>>;


;; Function constexpr std::strong_ordering::operator std::partial_ordering() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.11276, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.11276
  (struct partial_ordering *) <<< Unknown tree: void_cst >>>
  (_Ord) ((const struct strong_ordering *) this)->_M_value >>>>;, D.11276>>
   >>>;


;; Function constexpr std::strong_ordering::operator std::weak_ordering() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.11281, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.11281
  (struct weak_ordering *) <<< Unknown tree: void_cst >>>
  (_Ord) ((const struct strong_ordering *) this)->_M_value >>>>;, D.11281>>
   >>>;


;; Function constexpr bool std::operator==(std::strong_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value == 0
   >>>;


;; Function constexpr bool std::operator<(std::strong_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value < 0
   >>>;


;; Function constexpr bool std::operator>(std::strong_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value > 0
   >>>;


;; Function constexpr bool std::operator<=(std::strong_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value <= 0
   >>>;


;; Function constexpr bool std::operator>=(std::strong_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value >= 0
   >>>;


;; Function constexpr bool std::operator<(std::__cmp_cat::__unspec, std::strong_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value > 0
   >>>;


;; Function constexpr bool std::operator>(std::__cmp_cat::__unspec, std::strong_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value < 0
   >>>;


;; Function constexpr bool std::operator<=(std::__cmp_cat::__unspec, std::strong_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value >= 0
   >>>;


;; Function constexpr bool std::operator>=(std::__cmp_cat::__unspec, std::strong_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __v._M_value <= 0
   >>>;


;; Function constexpr std::strong_ordering std::operator<=>(std::strong_ordering, std::__cmp_cat::__unspec) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.11340, *(struct strong_ordering &) &__v>>>
   >>>;


;; Function constexpr std::strong_ordering std::operator<=>(std::__cmp_cat::__unspec, std::strong_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.11355, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.11355
  (struct strong_ordering *) <<< Unknown tree: void_cst >>>
  (_Ord) -(unsigned char) __v._M_value >>>>;, D.11355>>
   >>>;


;; Function constexpr bool std::is_eq(std::partial_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::operator== (TARGET_EXPR <D.11389, __cmp>, TARGET_EXPR <D.11390, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.11390
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)>>
   >>>;


;; Function constexpr bool std::is_neq(std::partial_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::operator== (TARGET_EXPR <D.11407, __cmp>, TARGET_EXPR <D.11408, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.11408
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)>>
   >>>;


;; Function constexpr bool std::is_lt(std::partial_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::operator< (TARGET_EXPR <D.11416, __cmp>, TARGET_EXPR <D.11417, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.11417
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)>>
   >>>;


;; Function constexpr bool std::is_lteq(std::partial_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::operator<= (TARGET_EXPR <D.11425, __cmp>, TARGET_EXPR <D.11426, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.11426
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)>>
   >>>;


;; Function constexpr bool std::is_gt(std::partial_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::operator> (TARGET_EXPR <D.11434, __cmp>, TARGET_EXPR <D.11435, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.11435
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)>>
   >>>;


;; Function constexpr bool std::is_gteq(std::partial_ordering) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::operator>= (TARGET_EXPR <D.11443, __cmp>, TARGET_EXPR <D.11444, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.11444
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)>>
   >>>;


;; Function constexpr __gnu_cxx::__ops::_Iter_less_iter __gnu_cxx::__ops::__iter_less_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16011, {}>>>;


;; Function constexpr __gnu_cxx::__ops::_Iter_less_val::_Iter_less_val(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


{
  
}


;; Function constexpr __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_less_val() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16091, {}>>>;


;; Function constexpr __gnu_cxx::__ops::_Iter_less_val __gnu_cxx::__ops::__iter_comp_val(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16098, {}>>>;


;; Function constexpr __gnu_cxx::__ops::_Val_less_iter::_Val_less_iter(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


{
  
}


;; Function constexpr __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_less_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16170, {}>>>;


;; Function constexpr __gnu_cxx::__ops::_Val_less_iter __gnu_cxx::__ops::__val_comp_iter(__gnu_cxx::__ops::_Iter_less_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16177, {}>>>;


;; Function constexpr __gnu_cxx::__ops::_Iter_equal_to_iter __gnu_cxx::__ops::__iter_equal_to_iter() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16220, {}>>>;


;; Function constexpr __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_equal_to_val() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16271, {}>>>;


;; Function constexpr __gnu_cxx::__ops::_Iter_equal_to_val __gnu_cxx::__ops::__iter_comp_val(__gnu_cxx::__ops::_Iter_equal_to_iter) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.16286, {}>>>;


;; Function constexpr int std::__size_to_integer(int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr unsigned int std::__size_to_integer(unsigned int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long int std::__size_to_integer(long int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long unsigned int std::__size_to_integer(long unsigned int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long long int std::__size_to_integer(long long int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long long unsigned int std::__size_to_integer(long long unsigned int) (null)
;; enabled by -tree-original


return <retval> = __n;


;; Function constexpr long long int std::__size_to_integer(float) (null)
;; enabled by -tree-original


return <retval> = (long long int) __n;


;; Function constexpr long long int std::__size_to_integer(double) (null)
;; enabled by -tree-original


return <retval> = (long long int) __n;


;; Function constexpr long long int std::__size_to_integer(long double) (null)
;; enabled by -tree-original


return <retval> = (long long int) __n;


;; Function constexpr int std::__lg(int) (null)
;; enabled by -tree-original


return <retval> = 31 - __builtin_clz ((unsigned int) __n);


;; Function constexpr unsigned int std::__lg(unsigned int) (null)
;; enabled by -tree-original


return <retval> = (unsigned int) (31 - __builtin_clz (__n));


;; Function constexpr long int std::__lg(long int) (null)
;; enabled by -tree-original


return <retval> = (long int) (31 - __builtin_clzl ((long unsigned int) __n));


;; Function constexpr long unsigned int std::__lg(long unsigned int) (null)
;; enabled by -tree-original


return <retval> = (long unsigned int) (31 - __builtin_clzl (__n));


;; Function constexpr long long int std::__lg(long long int) (null)
;; enabled by -tree-original


return <retval> = (long long int) (63 - __builtin_clzll ((long long unsigned int) __n));


;; Function constexpr long long unsigned int std::__lg(long long unsigned int) (null)
;; enabled by -tree-original


return <retval> = (long long unsigned int) (63 - __builtin_clzll (__n));


;; Function static constexpr void std::char_traits<char>::assign(std::char_traits<char>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<char>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (unsigned char) *__c1 < (unsigned char) *__c2
   >>>;


;; Function constexpr bool std::__constant_char_array_p(const _CharT*, std::size_t) [with _CharT = char; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
<<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
return <retval> = __builtin_is_constant_evaluated ();


;; Function static constexpr int std::char_traits<char>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  if (__n == 0)
    {
      return <retval> = 0;
    }
  {
    if (<<cleanup_point (__builtin_constant_p (__n) != 0 && std::__constant_char_array_p<char> (__s1, __n)) && std::__constant_char_array_p<char> (__s2, __n)>>)
      {
        {
          {
            size_t __i = 0;

            <<cleanup_point             size_t __i = 0;>>;
            goto <D.18236>;
            <D.18235>:;
            if (<<cleanup_point std::char_traits<char>::lt ((const char_type &) (__s1 + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) (__s2 + (sizetype) NON_LVALUE_EXPR <__i>))>>)
              {
                return <retval> = -1;
              }
            else
              {
                if (<<cleanup_point std::char_traits<char>::lt ((const char_type &) (__s2 + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) (__s1 + (sizetype) NON_LVALUE_EXPR <__i>))>>)
                  {
                    return <retval> = 1;
                  }
              }
            <<cleanup_point (void)  ++__i>>;
            <D.18236>:;
            if (__i < __n) goto <D.18235>; else goto <D.18233>;
            <D.18233>:;
          }
          return <retval> = 0;
        }
      }
  }
  return <retval> = __builtin_memcmp ((const void *) __s1, (const void *) __s2, __n);
}


;; Function constexpr bool std::__constant_string_p(const _CharT*) [with _CharT = char] (null)
;; enabled by -tree-original


<<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
return <retval> = __builtin_is_constant_evaluated ();


;; Function static constexpr std::size_t std::char_traits<char>::length(const char_type*) (null)
;; enabled by -tree-original


if (<<cleanup_point std::__constant_string_p<char> (__s)>>)
  {
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<char>::length (__s)>>;
  }
return <retval> = __builtin_strlen (__s);


;; Function static constexpr const char_type* std::char_traits<char>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0B;
  }
if (<<cleanup_point (__builtin_constant_p (__n) != 0 && __builtin_constant_p ((char_type) *__a) != 0) && std::__constant_char_array_p<char> (__s, __n)>>)
  {
    <<cleanup_point return <retval> = (const char_type *) __gnu_cxx::char_traits<char>::find (__s, __n, (const char_type &) __a)>>;
  }
return <retval> = (const char_type *) __builtin_memchr ((const void *) __s, (int) *__a, __n);


;; Function static constexpr std::char_traits<char>::char_type* std::char_traits<char>::move(std::char_traits<char>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char_type *) __gnu_cxx::char_traits<char>::move (__s1, __s2, __n)>>;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static constexpr std::char_traits<char>::char_type* std::char_traits<char>::copy(std::char_traits<char>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char_type *) __gnu_cxx::char_traits<char>::copy (__s1, __s2, __n)>>;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static constexpr std::char_traits<char>::char_type* std::char_traits<char>::assign(std::char_traits<char>::char_type*, std::size_t, std::char_traits<char>::char_type) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char_type *) __gnu_cxx::char_traits<char>::assign (__s, __n, (int) __a)>>;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memset ((void *) __s, (int) __a, __n)>>;


;; Function static constexpr std::char_traits<char>::char_type std::char_traits<char>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) (unsigned char) *__c
   >>>;


;; Function static constexpr bool std::char_traits<char>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = -1
   >>>;


;; Function static constexpr std::char_traits<char>::int_type std::char_traits<char>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (int) *__c != std::char_traits<char>::eof () ? (int_type) *__c : 0>>
   >>>;


;; Function static constexpr void std::char_traits<wchar_t>::assign(std::char_traits<wchar_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;


;; Function constexpr bool std::__constant_char_array_p(const _CharT*, std::size_t) [with _CharT = wchar_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
<<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
return <retval> = __builtin_is_constant_evaluated ();


;; Function static constexpr int std::char_traits<wchar_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0;
  }
if (<<cleanup_point (__builtin_constant_p (__n) != 0 && std::__constant_char_array_p<wchar_t> (__s1, __n)) && std::__constant_char_array_p<wchar_t> (__s2, __n)>>)
  {
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<wchar_t>::compare (__s1, __s2, __n)>>;
  }
<<cleanup_point return <retval> = wmemcmp (__s1, __s2, __n)>>;


;; Function constexpr bool std::__constant_string_p(const _CharT*) [with _CharT = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
return <retval> = __builtin_is_constant_evaluated ();


;; Function static constexpr std::size_t std::char_traits<wchar_t>::length(const char_type*) (null)
;; enabled by -tree-original


if (<<cleanup_point std::__constant_string_p<wchar_t> (__s)>>)
  {
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<wchar_t>::length (__s)>>;
  }
<<cleanup_point return <retval> = wcslen (__s)>>;


;; Function static constexpr const char_type* std::char_traits<wchar_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0B;
  }
if (<<cleanup_point (__builtin_constant_p (__n) != 0 && __builtin_constant_p ((char_type) *__a) != 0) && std::__constant_char_array_p<wchar_t> (__s, __n)>>)
  {
    <<cleanup_point return <retval> = (const char_type *) __gnu_cxx::char_traits<wchar_t>::find (__s, __n, (const char_type &) __a)>>;
  }
<<cleanup_point return <retval> = (const char_type *) wmemchr (__s, (int) *__a, __n)>>;


;; Function static constexpr std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::move(std::char_traits<wchar_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char_type *) __gnu_cxx::char_traits<wchar_t>::move (__s1, __s2, __n)>>;
  }
<<cleanup_point return <retval> = (char_type *) wmemmove (__s1, __s2, __n)>>;


;; Function static constexpr std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::copy(std::char_traits<wchar_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char_type *) __gnu_cxx::char_traits<wchar_t>::copy (__s1, __s2, __n)>>;
  }
<<cleanup_point return <retval> = (char_type *) wmemcpy (__s1, __s2, __n)>>;


;; Function static constexpr std::char_traits<wchar_t>::char_type* std::char_traits<wchar_t>::assign(std::char_traits<wchar_t>::char_type*, std::size_t, std::char_traits<wchar_t>::char_type) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char_type *) __gnu_cxx::char_traits<wchar_t>::assign (__s, __n, (int) __a)>>;
  }
<<cleanup_point return <retval> = (char_type *) wmemset (__s, (int) __a, __n)>>;


;; Function static constexpr std::char_traits<wchar_t>::char_type std::char_traits<wchar_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;


;; Function static constexpr bool std::char_traits<wchar_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;


;; Function static constexpr std::char_traits<wchar_t>::int_type std::char_traits<wchar_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<wchar_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.18517, std::char_traits<wchar_t>::eof ()>) ? 0 : (int_type) *__c>>
   >>>;


;; Function static constexpr void std::char_traits<char8_t>::assign(std::char_traits<char8_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char8_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<char8_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;


;; Function constexpr bool std::__constant_char_array_p(const _CharT*, std::size_t) [with _CharT = char8_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
<<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
return <retval> = __builtin_is_constant_evaluated ();


;; Function static constexpr int std::char_traits<char8_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0;
  }
if (<<cleanup_point (__builtin_constant_p (__n) != 0 && std::__constant_char_array_p<char8_t> (__s1, __n)) && std::__constant_char_array_p<char8_t> (__s2, __n)>>)
  {
    <<cleanup_point return <retval> = __gnu_cxx::char_traits<char8_t>::compare (__s1, __s2, __n)>>;
  }
return <retval> = __builtin_memcmp ((const void *) __s1, (const void *) __s2, __n);


;; Function constexpr bool std::__constant_string_p(const _CharT*) [with _CharT = char8_t] (null)
;; enabled by -tree-original


<<< Unknown tree: expr_stmt
  <<< Unknown tree: void_cst >>> >>>;
return <retval> = __builtin_is_constant_evaluated ();


;; Function static constexpr std::size_t std::char_traits<char8_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  if (<<cleanup_point std::__constant_string_p<char8_t> (__s)>>)
    {
      <<cleanup_point return <retval> = __gnu_cxx::char_traits<char8_t>::length (__s)>>;
    }
  <<cleanup_point   size_t __i = 0;>>;
  goto <D.18670>;
  <D.18671>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
  <D.18670>:;
  if (<<cleanup_point !std::char_traits<char8_t>::eq ((const char_type &) (__s + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) &TARGET_EXPR <D.18660, 0>)>>) goto <D.18671>; else goto <D.18669>;
  <D.18669>:;
  return <retval> = __i;
}


;; Function static constexpr const char_type* std::char_traits<char8_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = 0B;
  }
if (<<cleanup_point (__builtin_constant_p (__n) != 0 && __builtin_constant_p ((char_type) *__a) != 0) && std::__constant_char_array_p<char8_t> (__s, __n)>>)
  {
    <<cleanup_point return <retval> = (const char_type *) __gnu_cxx::char_traits<char8_t>::find (__s, __n, (const char_type &) __a)>>;
  }
return <retval> = (const char_type *) __builtin_memchr ((const void *) __s, (int) *__a, __n);


;; Function static constexpr std::char_traits<char8_t>::char_type* std::char_traits<char8_t>::move(std::char_traits<char8_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char_type *) __gnu_cxx::char_traits<char8_t>::move (__s1, __s2, __n)>>;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static constexpr std::char_traits<char8_t>::char_type* std::char_traits<char8_t>::copy(std::char_traits<char8_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char_type *) __gnu_cxx::char_traits<char8_t>::copy (__s1, __s2, __n)>>;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n)>>;


;; Function static constexpr std::char_traits<char8_t>::char_type* std::char_traits<char8_t>::assign(std::char_traits<char8_t>::char_type*, std::size_t, std::char_traits<char8_t>::char_type) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char_type *) __gnu_cxx::char_traits<char8_t>::assign (__s, __n, (int) __a)>>;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memset ((void *) __s, (int) __a, __n)>>;


;; Function static constexpr std::char_traits<char8_t>::char_type std::char_traits<char8_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<char8_t>::int_type std::char_traits<char8_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;


;; Function static constexpr bool std::char_traits<char8_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr std::char_traits<char8_t>::int_type std::char_traits<char8_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;


;; Function static constexpr std::char_traits<char8_t>::int_type std::char_traits<char8_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<char8_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.18705, std::char_traits<char8_t>::eof ()>) ? 0 : (int_type) *__c>>
   >>>;


;; Function static constexpr void std::char_traits<char16_t>::assign(std::char_traits<char16_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;


;; Function static constexpr int std::char_traits<char16_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.18835>;
    <D.18834>:;
    if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 2)), (const char_type &) (__s2 + (sizetype) (__i * 2)))>>)
      {
        return <retval> = -1;
      }
    else
      {
        if (<<cleanup_point std::char_traits<char16_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 2)), (const char_type &) (__s1 + (sizetype) (__i * 2)))>>)
          {
            return <retval> = 1;
          }
      }
    <<cleanup_point (void)  ++__i>>;
    <D.18835>:;
    if (__i < __n) goto <D.18834>; else goto <D.18832>;
    <D.18832>:;
  }
  return <retval> = 0;
}


;; Function static constexpr std::size_t std::char_traits<char16_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  goto <D.18844>;
  <D.18845>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
  <D.18844>:;
  if (<<cleanup_point !std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) &TARGET_EXPR <D.18838, 0>)>>) goto <D.18845>; else goto <D.18843>;
  <D.18843>:;
  return <retval> = __i;
}


;; Function static constexpr const char_type* std::char_traits<char16_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.18856>;
    <D.18855>:;
    if (<<cleanup_point std::char_traits<char16_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), __a)>>)
      {
        return <retval> = __s + (sizetype) (__i * 2);
      }
    <<cleanup_point (void)  ++__i>>;
    <D.18856>:;
    if (__i < __n) goto <D.18855>; else goto <D.18853>;
    <D.18853>:;
  }
  return <retval> = 0B;
}


;; Function static constexpr std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::move(std::char_traits<char16_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char_type *) __gnu_cxx::char_traits<char16_t>::move (__s1, __s2, __n)>>;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static constexpr std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::copy(std::char_traits<char16_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char_type *) __gnu_cxx::char_traits<char16_t>::copy (__s1, __s2, __n)>>;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static constexpr std::char_traits<char16_t>::char_type* std::char_traits<char16_t>::assign(std::char_traits<char16_t>::char_type*, std::size_t, std::char_traits<char16_t>::char_type) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.18936>;
    <D.18935>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) (__s + (sizetype) (__i * 2)), (const char_type &) &__a) >>>>>;
    <<cleanup_point (void)  ++__i>>;
    <D.18936>:;
    if (__i < __n) goto <D.18935>; else goto <D.18933>;
    <D.18933>:;
  }
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char16_t>::char_type std::char_traits<char16_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = *__c != (const char_type) std::char_traits<char16_t>::eof () ? (int_type) *__c : 65533>>
   >>>;


;; Function static constexpr bool std::char_traits<char16_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 65535
   >>>;


;; Function static constexpr std::char_traits<char16_t>::int_type std::char_traits<char16_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<char16_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.18950, std::char_traits<char16_t>::eof ()>) ? 0 : (int_type) *__c>>
   >>>;


;; Function static constexpr void std::char_traits<char32_t>::assign(std::char_traits<char32_t>::char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__c1 = (char_type) *__c2) >>>>>
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::eq(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::lt(const char_type&, const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 < *__c2
   >>>;


;; Function static constexpr int std::char_traits<char32_t>::compare(const char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.19026>;
    <D.19025>:;
    if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 4)), (const char_type &) (__s2 + (sizetype) (__i * 4)))>>)
      {
        return <retval> = -1;
      }
    else
      {
        if (<<cleanup_point std::char_traits<char32_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 4)), (const char_type &) (__s1 + (sizetype) (__i * 4)))>>)
          {
            return <retval> = 1;
          }
      }
    <<cleanup_point (void)  ++__i>>;
    <D.19026>:;
    if (__i < __n) goto <D.19025>; else goto <D.19023>;
    <D.19023>:;
  }
  return <retval> = 0;
}


;; Function static constexpr std::size_t std::char_traits<char32_t>::length(const char_type*) (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  goto <D.19035>;
  <D.19036>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
  <D.19035>:;
  if (<<cleanup_point !std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) &TARGET_EXPR <D.19029, 0>)>>) goto <D.19036>; else goto <D.19034>;
  <D.19034>:;
  return <retval> = __i;
}


;; Function static constexpr const char_type* std::char_traits<char32_t>::find(const char_type*, std::size_t, const char_type&) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.19047>;
    <D.19046>:;
    if (<<cleanup_point std::char_traits<char32_t>::eq ((const char_type &) (__s + (sizetype) (__i * 4)), __a)>>)
      {
        return <retval> = __s + (sizetype) (__i * 4);
      }
    <<cleanup_point (void)  ++__i>>;
    <D.19047>:;
    if (__i < __n) goto <D.19046>; else goto <D.19044>;
    <D.19044>:;
  }
  return <retval> = 0B;
}


;; Function static constexpr std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::move(std::char_traits<char32_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char_type *) __gnu_cxx::char_traits<char32_t>::move (__s1, __s2, __n)>>;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 4)>>;


;; Function static constexpr std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::copy(std::char_traits<char32_t>::char_type*, const char_type*, std::size_t) (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char_type *) __gnu_cxx::char_traits<char32_t>::copy (__s1, __s2, __n)>>;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memcpy ((void *) __s1, (const void *) __s2, __n * 4)>>;


;; Function static constexpr std::char_traits<char32_t>::char_type* std::char_traits<char32_t>::assign(std::char_traits<char32_t>::char_type*, std::size_t, std::char_traits<char32_t>::char_type) (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.19127>;
    <D.19126>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) (__s + (sizetype) (__i * 4)), (const char_type &) &__a) >>>>>;
    <<cleanup_point (void)  ++__i>>;
    <D.19127>:;
    if (__i < __n) goto <D.19126>; else goto <D.19124>;
    <D.19124>:;
  }
  return <retval> = __s;
}


;; Function static constexpr std::char_traits<char32_t>::char_type std::char_traits<char32_t>::to_char_type(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char_type) *__c
   >>>;


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::to_int_type(const char_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int_type) *__c
   >>>;


;; Function static constexpr bool std::char_traits<char32_t>::eq_int_type(const int_type&, const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = *__c1 == *__c2
   >>>;


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::eof() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4294967295
   >>>;


;; Function static constexpr std::char_traits<char32_t>::int_type std::char_traits<char32_t>::not_eof(const int_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::char_traits<char32_t>::eq_int_type (__c, (const int_type &) &TARGET_EXPR <D.19141, std::char_traits<char32_t>::eof ()>) ? 0 : (int_type) *__c>>
   >>>;


;; Function int sscanf(const char*, const char*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __mingw_vsscanf (__source, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int scanf(const char*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __mingw_vfscanf (__acrt_iob_func (0), __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int fscanf(FILE*, const char*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __mingw_vfscanf (__stream, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int vsscanf(const char*, const char*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vsscanf (__source, __format, __local_argv)>>;


;; Function int vscanf(const char*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vfscanf (__acrt_iob_func (0), __format, __local_argv)>>;


;; Function int vfscanf(FILE*, const char*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vfscanf (__stream, __format, __local_argv)>>;


;; Function int fprintf(FILE*, const char*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __mingw_vfprintf (__stream, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int printf(const char*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __mingw_vfprintf (__acrt_iob_func (1), __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int sprintf(char*, const char*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __mingw_vsprintf (__stream, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int vfprintf(FILE*, const char*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vfprintf (__stream, __format, __local_argv)>>;


;; Function int vprintf(const char*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vfprintf (__acrt_iob_func (1), __format, __local_argv)>>;


;; Function int vsprintf(char*, const char*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vsprintf (__stream, __format, __local_argv)>>;


;; Function int snprintf(char*, size_t, const char*, ...) (null)
;; enabled by -tree-original


{
  int __retval;
  char * __local_argv;

    int __retval;
    char * __local_argv;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__local_argv, __format) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__retval = __mingw_vsnprintf (__stream, __n, __format, __local_argv)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__local_argv) >>>>>;
  return <retval> = __retval;
}


;; Function int vsnprintf(char*, size_t, const char*, char*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __mingw_vsnprintf (__stream, __n, __format, __local_argv)>>;


;; Function int std::__convert_from_v(int* const&, char*, int, const char*, ...) (null)
;; enabled by -tree-original


{
  char * __old;
  char * __sav = 0B;
  char * __args;
  const int __ret;

    char * __old;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__old = setlocale (4, 0B)) >>>>>;
  <<cleanup_point   char * __sav = 0B;>>;
  {
    if (__builtin_strcmp ((const char *) __old, (const char *) "C") != 0)
      {
        {
          const size_t __len = __builtin_strlen ((const char *) __old) + 1;

                    const size_t __len = __builtin_strlen ((const char *) __old) + 1;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__sav = (char *) operator new [] ((size_t) __len)) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __sav, (const void *) __old, (size_t) __len) >>>>>;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) setlocale (4, (const char *) "C") >>>>>;
        }
      }
  }
    char * __args;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__args, __fmt) >>>>>;
    const int __ret;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = __mingw_vsnprintf (__out, (size_t) __size, __fmt, __args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__args) >>>>>;
  if (__sav != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) setlocale (4, (const char *) __sav) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (if (__sav != 0B)
    {
      operator delete [] ((void *) __sav);
    }
  else
    {
      0
    }) >>>>>;
    }
  return <retval> = (int) __ret;
}


;; Function time_t time(time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _time64 (_Time)>>;


;; Function double difftime(time_t, time_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _difftime64 (_Time1, _Time2)>>;


;; Function tm* localtime(const time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _localtime64 (_Time)>>;


;; Function errno_t localtime_s(tm*, const time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _localtime64_s (_Tm, _Time)>>;


;; Function tm* gmtime(const time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _gmtime64 (_Time)>>;


;; Function errno_t gmtime_s(tm*, const time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _gmtime64_s (_Tm, _Time)>>;


;; Function char* ctime(const time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _ctime64 (_Time)>>;


;; Function errno_t ctime_s(char*, size_t, const time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _ctime64_s (_Buf, _SizeInBytes, _Time)>>;


;; Function time_t mktime(tm*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mktime64 (_Tm)>>;


;; Function time_t _mkgmtime(tm*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = _mkgmtime64 (_Tm)>>;


;; Function int __gthread_active_p() (null)
;; enabled by -tree-original


return <retval> = 1;


;; Function int __gthread_create(__gthread_t*, void* (*)(void*), void*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_create (__threadid, 0B, __func, __args)>>;


;; Function int __gthread_join(__gthread_t, void**) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_join (__threadid, __value_ptr)>>;


;; Function int __gthread_detach(__gthread_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_detach (__threadid)>>;


;; Function int __gthread_equal(__gthread_t, __gthread_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_equal (__t1, __t2)>>;


;; Function __gthread_t __gthread_self() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_self ()>>;


;; Function int __gthread_yield() (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = sched_yield ()>>;


;; Function int __gthread_once(__gthread_once_t*, void (*)()) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_once (__once, __func)>>;
  }
else
  {
    return <retval> = -1;
  }


;; Function int __gthread_key_create(__gthread_key_t*, void (*)(void*)) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_key_create (__key, __dtor)>>;


;; Function int __gthread_key_delete(__gthread_key_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_key_delete (__key)>>;


;; Function void* __gthread_getspecific(__gthread_key_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_getspecific (__key)>>;


;; Function int __gthread_setspecific(__gthread_key_t, const void*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_setspecific (__key, __ptr)>>;


;; Function void __gthread_mutex_init_function(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) pthread_mutex_init (__mutex, 0B) >>>>>;
  }


;; Function int __gthread_mutex_destroy(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_destroy (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_lock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_lock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_trylock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_trylock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_timedlock(__gthread_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_timedlock (__mutex, __abs_timeout)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_mutex_unlock(__gthread_mutex_t*) (null)
;; enabled by -tree-original


if (<<cleanup_point __gthread_active_p () != 0>>)
  {
    <<cleanup_point return <retval> = pthread_mutex_unlock (__mutex)>>;
  }
else
  {
    return <retval> = 0;
  }


;; Function int __gthread_recursive_mutex_init_function(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


{
  {
    if (<<cleanup_point __gthread_active_p () != 0>>)
      {
        {
          pthread_mutexattr_t __attr;
          int __r;

                    pthread_mutexattr_t __attr;
                    int __r;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__r = pthread_mutexattr_init (&__attr)) >>>>>;
          if (__r == 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__r = pthread_mutexattr_settype (&__attr, 2)) >>>>>;
            }
          if (__r == 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__r = pthread_mutex_init (__mutex, (const pthread_mutexattr_t *) &__attr)) >>>>>;
            }
          if (__r == 0)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__r = pthread_mutexattr_destroy (&__attr)) >>>>>;
            }
          return <retval> = __r;
        }
      }
  }
  return <retval> = 0;
}


;; Function int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_lock (__mutex)>>;


;; Function int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_trylock (__mutex)>>;


;; Function int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_timedlock (__mutex, __abs_timeout)>>;


;; Function int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_unlock (__mutex)>>;


;; Function int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_mutex_destroy (__mutex)>>;


;; Function int __gthread_cond_broadcast(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_broadcast (__cond)>>;


;; Function int __gthread_cond_signal(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_signal (__cond)>>;


;; Function int __gthread_cond_wait(__gthread_cond_t*, __gthread_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_timedwait(__gthread_cond_t*, __gthread_mutex_t*, const __gthread_time_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_timedwait (__cond, __mutex, __abs_timeout)>>;


;; Function int __gthread_cond_wait_recursive(__gthread_cond_t*, __gthread_recursive_mutex_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gthread_cond_wait (__cond, __mutex)>>;


;; Function int __gthread_cond_destroy(__gthread_cond_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = pthread_cond_destroy (__cond)>>;


;; Function bool __gnu_cxx::__is_single_threaded() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __gthread_active_p () == 0>>
   >>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4)>>;


;; Function void __gnu_cxx::__atomic_add(volatile _Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (int) __atomic_fetch_add_4 ((volatile void *) __mem, (unsigned int) __val, 4) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


{
  _Atomic_word __result = *__mem;

    _Atomic_word __result = *__mem;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__mem = *__mem + __val) >>>>>;
  return <retval> = __result;
}


;; Function void __gnu_cxx::__atomic_add_single(_Atomic_word*, int) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__mem = *__mem + __val) >>>>>;


;; Function _Atomic_word __gnu_cxx::__exchange_and_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


if (<<cleanup_point __gnu_cxx::__is_single_threaded ()>>)
  {
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add_single (__mem, __val)>>;
  }
else
  {
    <<cleanup_point return <retval> = __gnu_cxx::__exchange_and_add ((volatile _Atomic_word *) __mem, __val)>>;
  }


;; Function void __gnu_cxx::__atomic_add_dispatch(_Atomic_word*, int) (null)
;; enabled by -tree-original


if (<<cleanup_point __gnu_cxx::__is_single_threaded ()>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_single (__mem, __val) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add ((volatile _Atomic_word *) __mem, __val) >>>>>;
  }


;; Function long long int _abs64(long long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <x>;


;; Function double strtod(const char*, char**) (null)
;; enabled by -tree-original


{
  extern double __mingw_strtod (const char *, char * *);

  <<cleanup_point return <retval> = __mingw_strtod (_Str, _EndPtr)>>;
}


;; Function float strtof(const char*, char**) (null)
;; enabled by -tree-original


{
  extern float __mingw_strtof (const char *, char * *);

  <<cleanup_point return <retval> = __mingw_strtof (_Str, _EndPtr)>>;
}


;; Function void* _mm_malloc(size_t, size_t) (null)
;; enabled by -tree-original


{
  void * __malloc_ptr;
  void * __aligned_ptr;

    void * __malloc_ptr;
    void * __aligned_ptr;
  if ((__align + 18446744073709551615 & __align) != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 22) >>>>>;
      return <retval> = 0B;
    }
  if (__size == 0)
    {
      return <retval> = 0B;
    }
  if (__align <= 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__align = 16) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__malloc_ptr = malloc (__size + __align)) >>>>>;
  if (__malloc_ptr == 0B)
    {
      return <retval> = 0B;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__aligned_ptr = (void *) ((size_t) __malloc_ptr + __align & -__align)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*((void * *) __aligned_ptr + 18446744073709551608) = __malloc_ptr) >>>>>;
  return <retval> = __aligned_ptr;
}


;; Function void _mm_free(void*) (null)
;; enabled by -tree-original


if (__aligned_ptr != 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  free (*((void * *) __aligned_ptr + 18446744073709551608)) >>>>>;
  }


;; Function void* _MarkAllocaS(void*, unsigned int) (null)
;; enabled by -tree-original


if (_Ptr != 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(unsigned int *) _Ptr = _Marker) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (_Ptr = _Ptr + 16) >>>>>;
  }
return <retval> = _Ptr;


;; Function void _freea(void*) (null)
;; enabled by -tree-original


{
  unsigned int _Marker;

    unsigned int _Marker;
  if (_Memory != 0B)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (_Memory = _Memory + 18446744073709551600) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (_Marker = *(unsigned int *) _Memory) >>>>>;
      if (_Marker == 56797)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  free (_Memory) >>>>>;
        }
    }
}


;; Function long int std::abs(long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__i>;


;; Function long long int std::abs(long long int) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr double std::abs(double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr float std::abs(float) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function constexpr long double std::abs(long double) (null)
;; enabled by -tree-original


return <retval> = ABS_EXPR <__x>;


;; Function ldiv_t std::div(long int, long int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.24142, ldiv (__i, __j)>>>;


;; Function lldiv_t __gnu_cxx::div(long long int, long long int) (null)
;; enabled by -tree-original


{
  struct lldiv_t __q [value-expr: <retval>];

  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (<retval>.quot = __n / __d) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (<retval>.rem = __n % __d) >>>>>;
  <<cleanup_point return <retval>>>;
}


;; Function std::size_t std::hash<bool>::operator()(bool) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<char>::operator()(char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<signed char>::operator()(signed char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<unsigned char>::operator()(unsigned char) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<wchar_t>::operator()(wchar_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<char8_t>::operator()(char8_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<char16_t>::operator()(char16_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<char32_t>::operator()(char32_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<short int>::operator()(short int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<int>::operator()(int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long int>::operator()(long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long long int>::operator()(long long int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<short unsigned int>::operator()(short unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<unsigned int>::operator()(unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long unsigned int>::operator()(long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) __val
   >>>;


;; Function std::size_t std::hash<long long unsigned int>::operator()(long long unsigned int) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __val
   >>>;


;; Function static std::size_t std::_Hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_bytes (__ptr, __clength, __seed)>>;


;; Function static std::size_t std::_Fnv_hash_impl::hash(const void*, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Fnv_hash_bytes (__ptr, __clength, __seed)>>;


;; Function std::size_t std::hash<float>::operator()(float) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<float> ((const float &) &__val) : 0>>
   >>>;


;; Function std::size_t std::hash<double>::operator()(double) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = __val != 0.0 ? std::_Hash_impl::hash<double> ((const double &) &__val) : 0>>
   >>>;


;; Function std::size_t std::hash<std::nullptr_t>::operator()(std::nullptr_t) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 0
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ((const struct __max_size_type *) this)->_M_val != 0 || (BIT_FIELD_REF <*(const struct __max_size_type *) this, 8, 128> & 1) != 0
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::__max_size_type::operator+() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.29611, *(const struct __max_size_type &) this>>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::__max_size_type::operator~() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.29625, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.29625
  (struct __max_size_type *) <<< Unknown tree: void_cst >>>
  ~(__int128 unsigned) ((const struct __max_size_type *) this)->_M_val
  (BIT_FIELD_REF <*(const struct __max_size_type *) this, 8, 128> & 1) == 0 >>>>>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::__max_size_type::operator-() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.29652, std::ranges::__detail::operator+ (TARGET_EXPR <D.29630, std::ranges::__detail::__max_size_type::operator~ ((const struct __max_size_type *) this)>, (const struct __max_size_type &) &TARGET_EXPR <D.29651, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29651
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  1 >>>>)>>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type& std::ranges::__detail::__max_size_type::operator++() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::ranges::__detail::__max_size_type::operator+= ((struct __max_size_type *) this, (const struct __max_size_type &) &TARGET_EXPR <D.29677, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29677
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  1 >>>>)>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::__max_size_type::operator++(int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    struct __max_size_type __tmp [value-expr: <retval>];

    <retval> = *(const struct __max_size_type &) this;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator++ ((struct __max_size_type *) this) >>>>>;
    <<cleanup_point return <retval>>>;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type& std::ranges::__detail::__max_size_type::operator--() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::ranges::__detail::__max_size_type::operator-= ((struct __max_size_type *) this, (const struct __max_size_type &) &TARGET_EXPR <D.29692, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29692
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  1 >>>>)>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::__max_size_type::operator--(int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    struct __max_size_type __tmp [value-expr: <retval>];

    <retval> = *(const struct __max_size_type &) this;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator-- ((struct __max_size_type *) this) >>>>>;
    <<cleanup_point return <retval>>>;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type& std::ranges::__detail::__max_size_type::operator+=(const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const __int128 unsigned __sum = ((struct __max_size_type *) this)->_M_val + (__int128 unsigned) __r->_M_val;
    const bool __overflow = ((struct __max_size_type *) this)->_M_val > (__int128 unsigned) __sum;

        const __int128 unsigned __sum = ((struct __max_size_type *) this)->_M_val + (__int128 unsigned) __r->_M_val;
        const bool __overflow = ((struct __max_size_type *) this)->_M_val > (__int128 unsigned) __sum;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_msb = (<unnamed-unsigned:1>) ((unsigned char) (((struct __max_size_type *) this)->_M_msb ^ (<unnamed-unsigned:1>) __r->_M_msb) ^ (unsigned char) __overflow)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = (__int128 unsigned) __sum) >>>>>;
    return <retval> = (struct __max_size_type &) this;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type& std::ranges::__detail::__max_size_type::operator-=(const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::ranges::__detail::__max_size_type::operator+= ((struct __max_size_type *) this, (const struct __max_size_type &) &TARGET_EXPR <D.29716, std::ranges::__detail::__max_size_type::operator- ((const struct __max_size_type *) __r)>)>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type::__max_size_type(_Tp) [with _Tp = __int128 unsigned] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __as_base  &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = __i) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_msb = 0) >>>>>;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type& std::ranges::__detail::__max_size_type::operator*=(std::ranges::__detail::__max_size_type) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const struct __max_size_type __threshold = {._M_val=9223372036854775808, ._M_msb=0};

    <<cleanup_point     const struct __max_size_type __threshold = {._M_val=9223372036854775808, ._M_msb=0};>>;
    {
      if (<<cleanup_point std::operator< (TARGET_EXPR <D.29760, std::ranges::__detail::operator<=> ((const struct __max_size_type &) &TARGET_EXPR <D.29759, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29759
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  ((struct __max_size_type *) this)->_M_val >>>>, (const struct __max_size_type &) &__threshold)>, TARGET_EXPR <D.29761, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29761
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>) && std::operator< (TARGET_EXPR <D.29762, std::ranges::__detail::operator<=> ((const struct __max_size_type &) &__r, (const struct __max_size_type &) &__threshold)>, TARGET_EXPR <D.29763, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29763
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)>>)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = ((struct __max_size_type *) this)->_M_val * __r._M_val) >>>>>;
        }
      else
        {
          {
            const bool __lsb = (((struct __max_size_type *) this)->_M_val & 1) != 0;
            const bool __rlsb = (__r._M_val & 1) != 0;

                        const bool __lsb = (((struct __max_size_type *) this)->_M_val & 1) != 0;
                        const bool __rlsb = (__r._M_val & 1) != 0;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator>>= ((struct __max_size_type *) this, (const struct __max_size_type &) &TARGET_EXPR <D.29766, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29766
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  1 >>>>) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator>>= (&__r, (const struct __max_size_type &) &TARGET_EXPR <D.29767, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29767
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  1 >>>>) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = ((((struct __max_size_type *) this)->_M_val * __r._M_val) * 2 + ((struct __max_size_type *) this)->_M_val * (__rep) __rlsb) + __r._M_val * (__rep) __lsb) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator<<= ((struct __max_size_type *) this, (const struct __max_size_type &) &TARGET_EXPR <D.29768, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29768
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  1 >>>>) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator+= ((struct __max_size_type *) this, (const struct __max_size_type &) &TARGET_EXPR <D.29769, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29769
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  (int) __rlsb * (int) __lsb >>>>) >>>>>;
          }
        }
    }
    return <retval> = (struct __max_size_type &) this;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type::__max_size_type(_Tp) [with _Tp = int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __as_base  &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = (__rep) __i) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_msb = __i < 0) >>>>>;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type& std::ranges::__detail::__max_size_type::operator/=(const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    {
      {
        if (__builtin_is_constant_evaluated ())
          {
            {
              extern void __failed_assertion (void);

              if (<<cleanup_point std::ranges::__detail::operator== (__r, (const struct __max_size_type &) &TARGET_EXPR <D.29788, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29788
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  0 >>>>)>>)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  std::ranges::__detail::__failed_assertion () >>>>>;
                }
            }
          }
        else
          {
            
          }
      }
    }
    {
      if ((BIT_FIELD_REF <*(struct __max_size_type *) this, 8, 128> & 1) == 0 && (BIT_FIELD_REF <*__r, 8, 128> & 1) == 0)
        {
          // predicted likely by hot label predictor.;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = ((struct __max_size_type *) this)->_M_val / (__rep) __r->_M_val) >>>>>;
        }
      else
        {
          {
            {
              if ((BIT_FIELD_REF <*(struct __max_size_type *) this, 8, 128> & 1) != 0 && (BIT_FIELD_REF <*__r, 8, 128> & 1) != 0)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = ((struct __max_size_type *) this)->_M_val >= (__int128 unsigned) __r->_M_val) >>>>>;
                  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_msb = 0) >>>>>;
                }
              else
                {
                  {
                    {
                      if ((BIT_FIELD_REF <*(struct __max_size_type *) this, 8, 128> & 1) == 0 && (BIT_FIELD_REF <*__r, 8, 128> & 1) != 0)
                        {
                          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = 0) >>>>>;
                        }
                      else
                        {
                          {
                            {
                              if ((BIT_FIELD_REF <*(struct __max_size_type *) this, 8, 128> & 1) != 0 && (BIT_FIELD_REF <*__r, 8, 128> & 1) == 0)
                                {
                                  {
                                    const struct __max_size_type __orig = *(const struct __max_size_type &) this;

                                                                        const struct __max_size_type __orig = *(const struct __max_size_type &) this;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator>>= ((struct __max_size_type *) this, (const struct __max_size_type &) &TARGET_EXPR <D.29799, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29799
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  1 >>>>) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = ((struct __max_size_type *) this)->_M_val / (__rep) __r->_M_val) >>>>>;
                                    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator<<= ((struct __max_size_type *) this, (const struct __max_size_type &) &TARGET_EXPR <D.29800, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29800
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  1 >>>>) >>>>>;
                                    if (<<cleanup_point std::operator>= (TARGET_EXPR <D.29805, std::ranges::__detail::operator<=> ((const struct __max_size_type &) &TARGET_EXPR <D.29804, std::ranges::__detail::operator- (TARGET_EXPR <D.29803, __orig>, (const struct __max_size_type &) &TARGET_EXPR <D.29802, std::ranges::__detail::operator* (TARGET_EXPR <D.29801, *(const struct __max_size_type &) this>, __r)>)>, __r)>, TARGET_EXPR <D.29806, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29806
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)>>)
                                      {
                                        <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++((struct __max_size_type *) this)->_M_val >>>>>;
                                      }
                                  }
                                }
                            }
                          }
                        }
                    }
                  }
                }
            }
          }
        }
    }
    return <retval> = (struct __max_size_type &) this;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type& std::ranges::__detail::__max_size_type::operator%=(const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if ((BIT_FIELD_REF <*(struct __max_size_type *) this, 8, 128> & 1) == 0 && (BIT_FIELD_REF <*__r, 8, 128> & 1) == 0)
    {
      // predicted likely by hot label predictor.;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = ((struct __max_size_type *) this)->_M_val % (__rep) __r->_M_val) >>>>>;
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator-= ((struct __max_size_type *) this, (const struct __max_size_type &) &TARGET_EXPR <D.29825, std::ranges::__detail::operator* (TARGET_EXPR <D.29824, std::ranges::__detail::operator/ (TARGET_EXPR <D.29823, *(const struct __max_size_type &) this>, __r)>, __r)>) >>>>>;
    }
  return <retval> = (struct __max_size_type &) this;
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type::__max_size_type(_Tp) [with _Tp = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __as_base  &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = (__rep) __i) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_msb = 0) >>>>>;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type& std::ranges::__detail::__max_size_type::operator<<=(const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    {
      {
        if (__builtin_is_constant_evaluated ())
          {
            {
              extern void __failed_assertion (void);

              if (<<cleanup_point !std::operator<= (TARGET_EXPR <D.29855, std::ranges::__detail::operator<=> (__r, (const struct __max_size_type &) &TARGET_EXPR <D.29854, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29854
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  128 >>>>)>, TARGET_EXPR <D.29856, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29856
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)>>)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  std::ranges::__detail::__failed_assertion () >>>>>;
                }
            }
          }
        else
          {
            
          }
      }
    }
    if (<<cleanup_point !std::ranges::__detail::operator== (__r, (const struct __max_size_type &) &TARGET_EXPR <D.29864, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29864
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  0 >>>>)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_msb = (<unnamed-unsigned:1>) (((struct __max_size_type *) this)->_M_val >> 128 - (__int128 unsigned) __r->_M_val)) >>>>>;
        if (__r->_M_val == 128)
          {
            // predicted unlikely by cold label predictor.;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = 0) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = ((struct __max_size_type *) this)->_M_val << (__rep) __r->_M_val) >>>>>;
          }
      }
    return <retval> = (struct __max_size_type &) this;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type& std::ranges::__detail::__max_size_type::operator>>=(const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    {
      {
        if (__builtin_is_constant_evaluated ())
          {
            {
              extern void __failed_assertion (void);

              if (<<cleanup_point !std::operator<= (TARGET_EXPR <D.29877, std::ranges::__detail::operator<=> (__r, (const struct __max_size_type &) &TARGET_EXPR <D.29876, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29876
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  128 >>>>)>, TARGET_EXPR <D.29878, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29878
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)>>)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  std::ranges::__detail::__failed_assertion () >>>>>;
                }
            }
          }
        else
          {
            
          }
      }
    }
    if (<<cleanup_point !std::ranges::__detail::operator== (__r, (const struct __max_size_type &) &TARGET_EXPR <D.29879, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.29879
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  0 >>>>)>>)
      {
        if (__r->_M_val == 128)
          {
            // predicted unlikely by cold label predictor.;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = 0) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = ((struct __max_size_type *) this)->_M_val >> (__rep) __r->_M_val) >>>>>;
          }
        if ((BIT_FIELD_REF <*(struct __max_size_type *) this, 8, 128> & 1) != 0)
          {
            // predicted unlikely by cold label predictor.;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = ((struct __max_size_type *) this)->_M_val | 1 << 128 - (__int128 unsigned) __r->_M_val) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_msb = 0) >>>>>;
          }
      }
    return <retval> = (struct __max_size_type &) this;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type& std::ranges::__detail::__max_size_type::operator&=(const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = ((struct __max_size_type *) this)->_M_val & (__rep) __r->_M_val) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_msb = ((struct __max_size_type *) this)->_M_msb & (<unnamed-unsigned:1>) __r->_M_msb) >>>>>;
  return <retval> = (struct __max_size_type &) this;
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type& std::ranges::__detail::__max_size_type::operator|=(const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = ((struct __max_size_type *) this)->_M_val | (__rep) __r->_M_val) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_msb = ((struct __max_size_type *) this)->_M_msb | (<unnamed-unsigned:1>) __r->_M_msb) >>>>>;
  return <retval> = (struct __max_size_type &) this;
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type& std::ranges::__detail::__max_size_type::operator^=(const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = ((struct __max_size_type *) this)->_M_val ^ (__rep) __r->_M_val) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_msb = ((struct __max_size_type *) this)->_M_msb ^ (<unnamed-unsigned:1>) __r->_M_msb) >>>>>;
  return <retval> = (struct __max_size_type &) this;
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::operator+(std::ranges::__detail::__max_size_type, const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator+= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.29912, *(struct __max_size_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::operator-(std::ranges::__detail::__max_size_type, const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator-= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.29918, *(struct __max_size_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::operator*(std::ranges::__detail::__max_size_type, const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator*= (&__l, TARGET_EXPR <D.29924, *__r>) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.29925, *(struct __max_size_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::operator/(std::ranges::__detail::__max_size_type, const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator/= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.29932, *(struct __max_size_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::operator%(std::ranges::__detail::__max_size_type, const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator%= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.29938, *(struct __max_size_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::operator<<(std::ranges::__detail::__max_size_type, const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator<<= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.29944, *(struct __max_size_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::operator>>(std::ranges::__detail::__max_size_type, const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator>>= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.29950, *(struct __max_size_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::operator&(std::ranges::__detail::__max_size_type, const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator&= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.29956, *(struct __max_size_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::operator|(std::ranges::__detail::__max_size_type, const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator|= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.29962, *(struct __max_size_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::operator^(std::ranges::__detail::__max_size_type, const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator^= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.29968, *(struct __max_size_type &) &__l>>>;
   >>>;


;; Function constexpr bool std::ranges::__detail::operator==(const std::ranges::__detail::__max_size_type&, const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __l->_M_val == __r->_M_val && __l->_M_msb == __r->_M_msb
   >>>;


;; Function constexpr std::strong_ordering std::ranges::__detail::operator<=>(const std::ranges::__detail::__max_size_type&, const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (__l->_M_msb != __r->_M_msb)
    {
      <<cleanup_point return <retval> = TARGET_EXPR <D.29978, *(const struct strong_ordering &) ((BIT_FIELD_REF <*__l, 8, 128> & 1) != 0 ? &greater : &less)>>>;
    }
  else
    {
      <<cleanup_point return <retval> = TARGET_EXPR <D.29979, (__int128 unsigned) __l->_M_val == (__int128 unsigned) __r->_M_val ? equal : (__int128 unsigned) __l->_M_val < (__int128 unsigned) __r->_M_val ? less : greater>>>;
    }
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type::__max_size_type(std::ranges::__detail::__max_size_type::__rep, int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __as_base  &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_val = __val) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_size_type *) this)->_M_msb = (<unnamed-unsigned:1>) __msb) >>>>>;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type::__max_diff_type(const std::ranges::__detail::__max_size_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __max_diff_type *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_diff_type *) this)->_M_rep = *__d) >>>>>;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = !std::ranges::__detail::operator== ((const struct __max_size_type &) &((const struct __max_diff_type *) this)->_M_rep, (const struct __max_size_type &) &TARGET_EXPR <D.30204, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30204
  (const struct __max_size_type *) <<< Unknown tree: void_cst >>>
  0 >>>>)>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::__max_diff_type::operator+() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.30209, *(const struct __max_diff_type &) this>>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::__max_diff_type::operator-() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.30255, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30255
  (struct __max_diff_type *) <<< Unknown tree: void_cst >>>
  (const struct __max_size_type &) &TARGET_EXPR <D.30223, std::ranges::__detail::__max_size_type::operator- (&((const struct __max_diff_type *) this)->_M_rep)> >>>>>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::__max_diff_type::operator~() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.30262, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30262
  (struct __max_diff_type *) <<< Unknown tree: void_cst >>>
  (const struct __max_size_type &) &TARGET_EXPR <D.30261, std::ranges::__detail::__max_size_type::operator~ (&((const struct __max_diff_type *) this)->_M_rep)> >>>>>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type& std::ranges::__detail::__max_diff_type::operator++() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::ranges::__detail::__max_diff_type::operator+= ((struct __max_diff_type *) this, (const struct __max_diff_type &) &TARGET_EXPR <D.30277, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30277
  (const struct __max_diff_type *) <<< Unknown tree: void_cst >>>
  1 >>>>)>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::__max_diff_type::operator++(int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    struct __max_diff_type __tmp [value-expr: <retval>];

    <retval> = *(const struct __max_diff_type &) this;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_diff_type::operator++ ((struct __max_diff_type *) this) >>>>>;
    <<cleanup_point return <retval>>>;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type& std::ranges::__detail::__max_diff_type::operator--() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::ranges::__detail::__max_diff_type::operator-= ((struct __max_diff_type *) this, (const struct __max_diff_type &) &TARGET_EXPR <D.30292, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30292
  (const struct __max_diff_type *) <<< Unknown tree: void_cst >>>
  1 >>>>)>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::__max_diff_type::operator--(int) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    struct __max_diff_type __tmp [value-expr: <retval>];

    <retval> = *(const struct __max_diff_type &) this;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_diff_type::operator-- ((struct __max_diff_type *) this) >>>>>;
    <<cleanup_point return <retval>>>;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type& std::ranges::__detail::__max_diff_type::operator+=(const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator+= (&((struct __max_diff_type *) this)->_M_rep, (const struct __max_size_type &) &__r->_M_rep) >>>>>;
  return <retval> = (struct __max_diff_type &) this;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type& std::ranges::__detail::__max_diff_type::operator-=(const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator-= (&((struct __max_diff_type *) this)->_M_rep, (const struct __max_size_type &) &__r->_M_rep) >>>>>;
  return <retval> = (struct __max_diff_type &) this;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type& std::ranges::__detail::__max_diff_type::operator*=(const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator*= (&((struct __max_diff_type *) this)->_M_rep, TARGET_EXPR <D.30315, __r->_M_rep>) >>>>>;
  return <retval> = (struct __max_diff_type &) this;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type::__max_diff_type(_Tp) [with _Tp = int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __max_diff_type *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::ranges::__detail::__max_size_type::__max_size_type<int> (&((struct __max_diff_type *) this)->_M_rep, __i) >>>>>;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type& std::ranges::__detail::__max_diff_type::operator/=(const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const bool __neg;
    const bool __rneg;

    {
      {
        if (__builtin_is_constant_evaluated ())
          {
            {
              extern void __failed_assertion (void);

              if (<<cleanup_point std::ranges::__detail::operator== (__r, (const struct __max_diff_type &) &TARGET_EXPR <D.30322, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30322
  (const struct __max_diff_type *) <<< Unknown tree: void_cst >>>
  0 >>>>)>>)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  std::ranges::__detail::__failed_assertion () >>>>>;
                }
            }
          }
        else
          {
            
          }
      }
    }
        const bool __neg;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__neg = std::operator< (TARGET_EXPR <D.30332, std::ranges::__detail::__max_diff_type::operator<=> ((struct __max_diff_type *) this, (const struct __max_diff_type &) &TARGET_EXPR <D.30331, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30331
  (const struct __max_diff_type *) <<< Unknown tree: void_cst >>>
  0 >>>>)>, TARGET_EXPR <D.30333, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30333
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)) >>>>>;
        const bool __rneg;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__rneg = std::operator< (TARGET_EXPR <D.30336, std::ranges::__detail::__max_diff_type::operator<=> ((const struct __max_diff_type *) __r, (const struct __max_diff_type &) &TARGET_EXPR <D.30335, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30335
  (const struct __max_diff_type *) <<< Unknown tree: void_cst >>>
  0 >>>>)>, TARGET_EXPR <D.30337, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30337
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)) >>>>>;
    if (!(bool) __neg && !(bool) __rneg)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  MEM <unsigned char[20]> [(struct __max_size_type *)&((struct __max_diff_type *) this)->_M_rep] = MEM <unsigned char[20]> [(struct __max_size_type *)(struct __max_size_type &) &TARGET_EXPR <D.30339, std::ranges::__detail::operator/ (TARGET_EXPR <D.30338, ((struct __max_diff_type *) this)->_M_rep>, (const struct __max_size_type &) &__r->_M_rep)>];, <<< Unknown tree: void_cst >>> >>>>>;
      }
    else
      {
        if ((bool) __neg && (bool) __rneg)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  MEM <unsigned char[20]> [(struct __max_size_type *)&((struct __max_diff_type *) this)->_M_rep] = MEM <unsigned char[20]> [(struct __max_size_type *)(struct __max_size_type &) &TARGET_EXPR <D.30348, std::ranges::__detail::operator/ (TARGET_EXPR <D.30346, std::ranges::__detail::__max_size_type::operator- (&((struct __max_diff_type *) this)->_M_rep)>, (const struct __max_size_type &) &TARGET_EXPR <D.30347, std::ranges::__detail::__max_size_type::operator- (&__r->_M_rep)>)>];, <<< Unknown tree: void_cst >>> >>>>>;
          }
        else
          {
            if ((bool) __neg && !(bool) __rneg)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
  MEM <unsigned char[20]> [(struct __max_size_type *)&((struct __max_diff_type *) this)->_M_rep] = MEM <unsigned char[20]> [(struct __max_size_type *)(struct __max_size_type &) &TARGET_EXPR <D.30351, std::ranges::__detail::__max_size_type::operator- (&TARGET_EXPR <D.30350, std::ranges::__detail::operator/ (TARGET_EXPR <D.30349, std::ranges::__detail::__max_size_type::operator- (&((struct __max_diff_type *) this)->_M_rep)>, (const struct __max_size_type &) &__r->_M_rep)>)>];, <<< Unknown tree: void_cst >>> >>>>>;
              }
            else
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
  MEM <unsigned char[20]> [(struct __max_size_type *)&((struct __max_diff_type *) this)->_M_rep] = MEM <unsigned char[20]> [(struct __max_size_type *)(struct __max_size_type &) &TARGET_EXPR <D.30355, std::ranges::__detail::__max_size_type::operator- (&TARGET_EXPR <D.30354, std::ranges::__detail::operator/ (TARGET_EXPR <D.30353, ((struct __max_diff_type *) this)->_M_rep>, (const struct __max_size_type &) &TARGET_EXPR <D.30352, std::ranges::__detail::__max_size_type::operator- (&__r->_M_rep)>)>)>];, <<< Unknown tree: void_cst >>> >>>>>;
              }
          }
      }
    return <retval> = (struct __max_diff_type &) this;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type& std::ranges::__detail::__max_diff_type::operator%=(const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    {
      {
        if (__builtin_is_constant_evaluated ())
          {
            {
              extern void __failed_assertion (void);

              if (<<cleanup_point std::ranges::__detail::operator== (__r, (const struct __max_diff_type &) &TARGET_EXPR <D.30384, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30384
  (const struct __max_diff_type *) <<< Unknown tree: void_cst >>>
  0 >>>>)>>)
                {
                  <<cleanup_point <<< Unknown tree: expr_stmt
  std::ranges::__detail::__failed_assertion () >>>>>;
                }
            }
          }
        else
          {
            
          }
      }
    }
    if (<<cleanup_point std::operator>= (TARGET_EXPR <D.30386, std::ranges::__detail::__max_diff_type::operator<=> ((struct __max_diff_type *) this, (const struct __max_diff_type &) &TARGET_EXPR <D.30385, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30385
  (const struct __max_diff_type *) <<< Unknown tree: void_cst >>>
  0 >>>>)>, TARGET_EXPR <D.30387, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30387
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>) && std::operator> (TARGET_EXPR <D.30389, std::ranges::__detail::__max_diff_type::operator<=> ((const struct __max_diff_type *) __r, (const struct __max_diff_type &) &TARGET_EXPR <D.30388, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30388
  (const struct __max_diff_type *) <<< Unknown tree: void_cst >>>
  0 >>>>)>, TARGET_EXPR <D.30390, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30390
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator%= (&((struct __max_diff_type *) this)->_M_rep, (const struct __max_size_type &) &__r->_M_rep) >>>>>;
      }
    else
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_diff_type::operator-= ((struct __max_diff_type *) this, (const struct __max_diff_type &) &TARGET_EXPR <D.30393, std::ranges::__detail::operator* (TARGET_EXPR <D.30392, std::ranges::__detail::operator/ (TARGET_EXPR <D.30391, *(const struct __max_diff_type &) this>, __r)>, __r)>) >>>>>;
      }
    return <retval> = (struct __max_diff_type &) this;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type& std::ranges::__detail::__max_diff_type::operator<<=(const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator<<= (&((struct __max_diff_type *) this)->_M_rep, (const struct __max_size_type &) &__r->_M_rep) >>>>>;
  return <retval> = (struct __max_diff_type &) this;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type& std::ranges::__detail::__max_diff_type::operator>>=(const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const unsigned int __msb = (unsigned int) ((struct __max_diff_type *) this)->_M_rep._M_msb;

        const unsigned int __msb = (unsigned int) ((struct __max_diff_type *) this)->_M_rep._M_msb;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator>>= (&((struct __max_diff_type *) this)->_M_rep, (const struct __max_size_type &) &__r->_M_rep) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct __max_diff_type *) this)->_M_rep._M_msb = (<unnamed-unsigned:1>) ((unsigned char) ((struct __max_diff_type *) this)->_M_rep._M_msb | (unsigned char) __msb)) >>>>>;
    return <retval> = (struct __max_diff_type &) this;
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type& std::ranges::__detail::__max_diff_type::operator&=(const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator&= (&((struct __max_diff_type *) this)->_M_rep, (const struct __max_size_type &) &__r->_M_rep) >>>>>;
  return <retval> = (struct __max_diff_type &) this;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type& std::ranges::__detail::__max_diff_type::operator|=(const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator|= (&((struct __max_diff_type *) this)->_M_rep, (const struct __max_size_type &) &__r->_M_rep) >>>>>;
  return <retval> = (struct __max_diff_type &) this;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type& std::ranges::__detail::__max_diff_type::operator^=(const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_size_type::operator^= (&((struct __max_diff_type *) this)->_M_rep, (const struct __max_size_type &) &__r->_M_rep) >>>>>;
  return <retval> = (struct __max_diff_type &) this;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::operator+(std::ranges::__detail::__max_diff_type, const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_diff_type::operator+= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.30443, *(struct __max_diff_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::operator-(std::ranges::__detail::__max_diff_type, const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_diff_type::operator-= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.30449, *(struct __max_diff_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::operator*(std::ranges::__detail::__max_diff_type, const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_diff_type::operator*= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.30455, *(struct __max_diff_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::operator/(std::ranges::__detail::__max_diff_type, const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_diff_type::operator/= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.30461, *(struct __max_diff_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::operator%(std::ranges::__detail::__max_diff_type, const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_diff_type::operator%= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.30467, *(struct __max_diff_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::operator<<(std::ranges::__detail::__max_diff_type, const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_diff_type::operator<<= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.30473, *(struct __max_diff_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::operator>>(std::ranges::__detail::__max_diff_type, const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_diff_type::operator>>= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.30479, *(struct __max_diff_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::operator&(std::ranges::__detail::__max_diff_type, const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_diff_type::operator&= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.30485, *(struct __max_diff_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::operator|(std::ranges::__detail::__max_diff_type, const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_diff_type::operator|= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.30491, *(struct __max_diff_type &) &__l>>>;
   >>>;


;; Function constexpr std::ranges::__detail::__max_diff_type std::ranges::__detail::operator^(std::ranges::__detail::__max_diff_type, const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ranges::__detail::__max_diff_type::operator^= (&__l, __r) >>>>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.30497, *(struct __max_diff_type &) &__l>>>;
   >>>;


;; Function constexpr bool std::ranges::__detail::operator==(const std::ranges::__detail::__max_diff_type&, const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::ranges::__detail::operator== ((const struct __max_size_type &) &__l->_M_rep, (const struct __max_size_type &) &__r->_M_rep)>>
   >>>;


;; Function constexpr std::strong_ordering std::ranges::__detail::__max_diff_type::operator<=>(const std::ranges::__detail::__max_diff_type&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const unsigned int __lsign = (unsigned int) ((const struct __max_diff_type *) this)->_M_rep._M_msb;
    const unsigned int __rsign = (unsigned int) __r->_M_rep._M_msb;

        const unsigned int __lsign = (unsigned int) ((const struct __max_diff_type *) this)->_M_rep._M_msb;
        const unsigned int __rsign = (unsigned int) __r->_M_rep._M_msb;
    if (__lsign != __rsign)
      {
        <<cleanup_point return <retval> = TARGET_EXPR <D.30511, *(const struct strong_ordering &) (__lsign != 0 ? &less : &greater)>>>;
      }
    else
      {
        <<cleanup_point return <retval> = TARGET_EXPR <D.30512, std::ranges::__detail::operator<=> ((const struct __max_size_type &) &((const struct __max_diff_type *) this)->_M_rep, (const struct __max_size_type &) &__r->_M_rep)>>>;
      }
  }
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type::__max_size_type(const std::ranges::__detail::__max_diff_type&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __as_base  &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(struct __max_size_type *) this = __d->_M_rep) >>>>>;
  }
   >>>;


;; Function static constexpr std::numeric_limits<std::ranges::__detail::__max_size_type>::_Sp std::numeric_limits<std::ranges::__detail::__max_size_type>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.30544, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30544
  (struct _Sp *) <<< Unknown tree: void_cst >>>
  0 >>>>>>
   >>>;


;; Function static constexpr std::numeric_limits<std::ranges::__detail::__max_size_type>::_Sp std::numeric_limits<std::ranges::__detail::__max_size_type>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.30549, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.30549
  (struct __max_size_type *) <<< Unknown tree: void_cst >>>
  0xffffffffffffffffffffffffffffffff
  1 >>>>>>
   >>>;


;; Function static constexpr std::numeric_limits<std::ranges::__detail::__max_size_type>::_Sp std::numeric_limits<std::ranges::__detail::__max_size_type>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.30554, std::numeric_limits<std::ranges::__detail::__max_size_type>::min ()>>>
   >>>;


;; Function static constexpr std::numeric_limits<std::ranges::__detail::__max_diff_type>::_Dp std::numeric_limits<std::ranges::__detail::__max_diff_type>::min() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.30574, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30574
  (struct __max_diff_type *) <<< Unknown tree: void_cst >>>
  (const struct __max_size_type &) &TARGET_EXPR <D.30573, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.30573
  (struct __max_size_type *) <<< Unknown tree: void_cst >>>
  0
  1 >>>> >>>>>>
   >>>;


;; Function static constexpr std::numeric_limits<std::ranges::__detail::__max_diff_type>::_Dp std::numeric_limits<std::ranges::__detail::__max_diff_type>::max() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.30581, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30581
  (struct __max_diff_type *) <<< Unknown tree: void_cst >>>
  (const struct __max_size_type &) &TARGET_EXPR <D.30580, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.30580
  (struct __max_size_type *) <<< Unknown tree: void_cst >>>
  0xffffffffffffffffffffffffffffffff
  0 >>>> >>>>>>
   >>>;


;; Function static constexpr std::numeric_limits<std::ranges::__detail::__max_diff_type>::_Dp std::numeric_limits<std::ranges::__detail::__max_diff_type>::lowest() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.30587, std::numeric_limits<std::ranges::__detail::__max_diff_type>::min ()>>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::__to_unsigned_like(std::ranges::__detail::__max_size_type) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.30600, *(struct __max_size_type &) &__t>>>
   >>>;


;; Function constexpr std::ranges::__detail::__max_size_type std::ranges::__detail::__to_unsigned_like(std::ranges::__detail::__max_diff_type) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.30620, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.30620
  (struct __max_size_type *) <<< Unknown tree: void_cst >>>
  (const struct __max_diff_type &) &__t >>>>>>
   >>>;


;; Function constexpr __int128 unsigned std::ranges::__detail::__to_unsigned_like(__int128) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (__int128 unsigned) __t
   >>>;


;; Function constexpr __int128 unsigned std::ranges::__detail::__to_unsigned_like(__int128 unsigned) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __t
   >>>;


;; Function constexpr std::size_t std::__sv_check(std::size_t, std::size_t, const char*) (null)
;; enabled by -tree-original


if (__pos > __size)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range_fmt ((const char *) "%s: __pos (which is %zu) > __size (which is %zu)", __s, __pos, __size) >>>>>;
  }
return <retval> = __pos;


;; Function constexpr std::size_t std::__sv_limit(std::size_t, std::size_t, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const bool __testoff = __size - __pos > __off;

        const bool __testoff = __size - __pos > __off;
    return <retval> = (bool) __testoff ? __off : __size - __pos;
  }
   >>>;


;; Function constexpr std::integral_constant<_Tp, __v>::operator std::integral_constant<_Tp, __v>::value_type() const [with _Tp = bool; _Tp __v = true; std::integral_constant<_Tp, __v>::value_type = bool] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 1
   >>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = char; long long unsigned int <anonymous> = 1; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.32479, {}>>>;


;; Function std::size_t std::hash<std::basic_string_view<char> >::operator()(const string_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<char>::data ((const struct string_view *) __str), std::basic_string_view<char>::length ((const struct string_view *) __str), 3339675911)>>
   >>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = wchar_t; long long unsigned int <anonymous> = 2; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.32935, {}>>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; std::basic_string_view<_CharT, _Traits>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;


;; Function std::size_t std::hash<std::basic_string_view<wchar_t> >::operator()(const wstring_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<wchar_t>::data ((const struct wstring_view *) __s), std::basic_string_view<wchar_t>::length ((const struct wstring_view *) __s) * 2, 3339675911)>>
   >>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = char8_t; long long unsigned int <anonymous> = 1; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.33392, {}>>>;


;; Function std::size_t std::hash<std::basic_string_view<char8_t> >::operator()(const u8string_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<char8_t>::data ((const struct u8string_view *) __str), std::basic_string_view<char8_t>::length ((const struct u8string_view *) __str), 3339675911)>>
   >>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = char16_t; long long unsigned int <anonymous> = 2; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.33846, {}>>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; std::basic_string_view<_CharT, _Traits>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;


;; Function std::size_t std::hash<std::basic_string_view<char16_t> >::operator()(const u16string_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<char16_t>::data ((const struct u16string_view *) __s), std::basic_string_view<char16_t>::length ((const struct u16string_view *) __s) * 2, 3339675911)>>
   >>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = char32_t; long long unsigned int <anonymous> = 4; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.34303, {}>>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; std::basic_string_view<_CharT, _Traits>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;


;; Function std::size_t std::hash<std::basic_string_view<char32_t> >::operator()(const u32string_view&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::basic_string_view<char32_t>::data ((const struct u32string_view *) __s), std::basic_string_view<char32_t>::length ((const struct u32string_view *) __s) * 4, 3339675911)>>
   >>>;


;; Function constexpr std::basic_string_view<char> std::literals::string_view_literals::operator""sv(const char*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.34626, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.34626
  (struct basic_string_view *) <<< Unknown tree: void_cst >>>
  __str
  __len >>>>>>
   >>>;


;; Function constexpr std::basic_string_view<wchar_t> std::literals::string_view_literals::operator""sv(const wchar_t*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.34644, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.34644
  (struct basic_string_view *) <<< Unknown tree: void_cst >>>
  __str
  __len >>>>>>
   >>>;


;; Function constexpr std::basic_string_view<char8_t> std::literals::string_view_literals::operator""sv(const char8_t*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.34662, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.34662
  (struct basic_string_view *) <<< Unknown tree: void_cst >>>
  __str
  __len >>>>>>
   >>>;


;; Function constexpr std::basic_string_view<char16_t> std::literals::string_view_literals::operator""sv(const char16_t*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.34680, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.34680
  (struct basic_string_view *) <<< Unknown tree: void_cst >>>
  __str
  __len >>>>>>
   >>>;


;; Function constexpr std::basic_string_view<char32_t> std::literals::string_view_literals::operator""sv(const char32_t*, std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.34698, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.34698
  (struct basic_string_view *) <<< Unknown tree: void_cst >>>
  __str
  __len >>>>>>
   >>>;


;; Function int std::__cxx11::stoi(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, char, int> (strtol, (const char *) "stoi", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int> (strtol, (const char *) "stol", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int> (strtoul, (const char *) "stoul", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int> (strtoll, (const char *) "stoll", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const string&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int> (strtoull, (const char *) "stoull", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx, __base)>>;


;; Function float std::__cxx11::stof(const string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<float> (strtof, (const char *) "stof", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function double std::__cxx11::stod(const string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<double> (strtod, (const char *) "stod", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const string&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double> (strtold, (const char *) "stold", std::__cxx11::basic_string<char>::c_str ((const struct string *) __str), __idx)>>;


;; Function std::string std::__cxx11::to_string(int) (null)
;; enabled by -tree-original


{
  const bool __neg = __val < 0;
  const unsigned int __uval = (bool) __neg ? -(unsigned int) __val : (unsigned int) __val;
  const unsigned int __len;
  struct string __str [value-expr: *<retval>];

    const bool __neg = __val < 0;
    const unsigned int __uval = (bool) __neg ? -(unsigned int) __val : (unsigned int) __val;
    const unsigned int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = std::__detail::__to_chars_len<unsigned int> ((unsigned int) __uval, 10)) >>>>>;
  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string<> ((struct string *) <retval>, (size_type) ((unsigned int) __neg + (unsigned int) __len), 45, (const struct allocator &) &TARGET_EXPR <D.38423, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.38423
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__detail::__to_chars_10_impl<unsigned int> ((value_type *) std::__cxx11::basic_string<char>::operator[] ((struct string *) <retval>, (size_type) __neg), (unsigned int) __len, (unsigned int) __uval) >>>>>;
      <<cleanup_point return <retval>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
}


;; Function constexpr unsigned int std::__detail::__to_chars_len(_Tp, int) [with _Tp = unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    unsigned int __n = 1;
    const unsigned int __b2 = (unsigned int) (__base * __base);
    const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
    const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);

    <<cleanup_point     unsigned int __n = 1;>>;
        const unsigned int __b2 = (unsigned int) (__base * __base);
        const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
        const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);
    <D.38507>:;
    if (__value < (unsigned int) __base)
      {
        return <retval> = __n;
      }
    if (__value < (unsigned int) __b2)
      {
        return <retval> = __n + 1;
      }
    if (__value < (unsigned int) __b3)
      {
        return <retval> = __n + 2;
      }
    if (__value < (unsigned int) __b4)
      {
        return <retval> = __n + 3;
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__value = (unsigned int) ((long unsigned int) __value / (long unsigned int) __b4)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__n = __n + 4) >>>>>;
    goto <D.38507>;
  }
   >>>;


;; Function std::string std::__cxx11::to_string(unsigned int) (null)
;; enabled by -tree-original


{
  struct string __str [value-expr: *<retval>];

  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string<> ((struct string *) <retval>, (size_type) std::__detail::__to_chars_len<unsigned int> (__val, 10), 0, (const struct allocator &) &TARGET_EXPR <D.38508, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.38508
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__detail::__to_chars_10_impl<unsigned int> ((value_type *) std::__cxx11::basic_string<char>::operator[] ((struct string *) <retval>, 0), (unsigned int) std::__cxx11::basic_string<char>::size ((struct string *) <retval>), __val) >>>>>;
      <<cleanup_point return <retval>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
}


;; Function std::string std::__cxx11::to_string(long int) (null)
;; enabled by -tree-original


{
  const bool __neg = __val < 0;
  const long unsigned int __uval = (bool) __neg ? -(long unsigned int) __val : (long unsigned int) __val;
  const unsigned int __len;
  struct string __str [value-expr: *<retval>];

    const bool __neg = __val < 0;
    const long unsigned int __uval = (bool) __neg ? -(long unsigned int) __val : (long unsigned int) __val;
    const unsigned int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = std::__detail::__to_chars_len<long unsigned int> ((long unsigned int) __uval, 10)) >>>>>;
  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string<> ((struct string *) <retval>, (size_type) ((unsigned int) __neg + (unsigned int) __len), 45, (const struct allocator &) &TARGET_EXPR <D.38523, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.38523
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__detail::__to_chars_10_impl<long unsigned int> ((value_type *) std::__cxx11::basic_string<char>::operator[] ((struct string *) <retval>, (size_type) __neg), (unsigned int) __len, (long unsigned int) __uval) >>>>>;
      <<cleanup_point return <retval>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
}


;; Function constexpr unsigned int std::__detail::__to_chars_len(_Tp, int) [with _Tp = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    unsigned int __n = 1;
    const unsigned int __b2 = (unsigned int) (__base * __base);
    const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
    const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);

    <<cleanup_point     unsigned int __n = 1;>>;
        const unsigned int __b2 = (unsigned int) (__base * __base);
        const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
        const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);
    <D.38607>:;
    if (__value < (long unsigned int) __base)
      {
        return <retval> = __n;
      }
    if (__value < (long unsigned int) __b2)
      {
        return <retval> = __n + 1;
      }
    if (__value < (long unsigned int) __b3)
      {
        return <retval> = __n + 2;
      }
    if (__value < (long unsigned int) __b4)
      {
        return <retval> = __n + 3;
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__value = __value / (long unsigned int) __b4) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__n = __n + 4) >>>>>;
    goto <D.38607>;
  }
   >>>;


;; Function std::string std::__cxx11::to_string(long unsigned int) (null)
;; enabled by -tree-original


{
  struct string __str [value-expr: *<retval>];

  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string<> ((struct string *) <retval>, (size_type) std::__detail::__to_chars_len<long unsigned int> (__val, 10), 0, (const struct allocator &) &TARGET_EXPR <D.38608, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.38608
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__detail::__to_chars_10_impl<long unsigned int> ((value_type *) std::__cxx11::basic_string<char>::operator[] ((struct string *) <retval>, 0), (unsigned int) std::__cxx11::basic_string<char>::size ((struct string *) <retval>), __val) >>>>>;
      <<cleanup_point return <retval>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
}


;; Function std::string std::__cxx11::to_string(long long int) (null)
;; enabled by -tree-original


{
  const bool __neg = __val < 0;
  const long long unsigned int __uval = (bool) __neg ? -(long long unsigned int) __val : (long long unsigned int) __val;
  const unsigned int __len;
  struct string __str [value-expr: *<retval>];

    const bool __neg = __val < 0;
    const long long unsigned int __uval = (bool) __neg ? -(long long unsigned int) __val : (long long unsigned int) __val;
    const unsigned int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = std::__detail::__to_chars_len<long long unsigned int> ((long long unsigned int) __uval, 10)) >>>>>;
  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string<> ((struct string *) <retval>, (size_type) ((unsigned int) __neg + (unsigned int) __len), 45, (const struct allocator &) &TARGET_EXPR <D.38623, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.38623
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__detail::__to_chars_10_impl<long long unsigned int> ((value_type *) std::__cxx11::basic_string<char>::operator[] ((struct string *) <retval>, (size_type) __neg), (unsigned int) __len, (long long unsigned int) __uval) >>>>>;
      <<cleanup_point return <retval>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
}


;; Function constexpr unsigned int std::__detail::__to_chars_len(_Tp, int) [with _Tp = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    unsigned int __n = 1;
    const unsigned int __b2 = (unsigned int) (__base * __base);
    const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
    const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);

    <<cleanup_point     unsigned int __n = 1;>>;
        const unsigned int __b2 = (unsigned int) (__base * __base);
        const unsigned int __b3 = (unsigned int) __b2 * (unsigned int) __base;
        const long unsigned int __b4 = (long unsigned int) ((unsigned int) __b3 * (unsigned int) __base);
    <D.38697>:;
    if ((long long unsigned int) (unsigned int) __base > __value)
      {
        return <retval> = __n;
      }
    if ((long long unsigned int) __b2 > __value)
      {
        return <retval> = __n + 1;
      }
    if ((long long unsigned int) __b3 > __value)
      {
        return <retval> = __n + 2;
      }
    if ((long long unsigned int) __b4 > __value)
      {
        return <retval> = __n + 3;
      }
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__value = __value / (long long unsigned int) __b4) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__n = __n + 4) >>>>>;
    goto <D.38697>;
  }
   >>>;


;; Function std::string std::__cxx11::to_string(long long unsigned int) (null)
;; enabled by -tree-original


{
  struct string __str [value-expr: *<retval>];

  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string<> ((struct string *) <retval>, (size_type) std::__detail::__to_chars_len<long long unsigned int> (__val, 10), 0, (const struct allocator &) &TARGET_EXPR <D.38698, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.38698
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__detail::__to_chars_10_impl<long long unsigned int> ((value_type *) std::__cxx11::basic_string<char>::operator[] ((struct string *) <retval>, 0), (unsigned int) std::__cxx11::basic_string<char>::size ((struct string *) <retval>), __val) >>>>>;
      <<cleanup_point return <retval>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct string *) <retval>);
    }
}


;; Function std::string std::__cxx11::to_string(float) (null)
;; enabled by -tree-original


{
  const int __n = 58;

  <<cleanup_point   const int __n = 58;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.38722, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.38722
  vsnprintf
  58
  (const char *) "%f"
  (double) __val >>>>>>;
}


;; Function std::string std::__cxx11::to_string(double) (null)
;; enabled by -tree-original


{
  const int __n = 328;

  <<cleanup_point   const int __n = 328;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.38741, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.38741
  vsnprintf
  328
  (const char *) "%f"
  __val >>>>>>;
}


;; Function std::string std::__cxx11::to_string(long double) (null)
;; enabled by -tree-original


{
  const int __n = 4952;

  <<cleanup_point   const int __n = 4952;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.38760, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.38760
  vsnprintf
  4952
  (const char *) "%Lf"
  __val >>>>>>;
}


;; Function int std::__cxx11::stoi(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int, int, wchar_t, int> (wcstol, (const char *) "stoi", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long int std::__cxx11::stol(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long int> (wcstol, (const char *) "stol", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long unsigned int std::__cxx11::stoul(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long unsigned int> (wcstoul, (const char *) "stoul", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long int std::__cxx11::stoll(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long int> (wcstoll, (const char *) "stoll", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function long long unsigned int std::__cxx11::stoull(const wstring&, std::size_t*, int) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long long unsigned int> (wcstoull, (const char *) "stoull", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx, __base)>>;


;; Function float std::__cxx11::stof(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<float> (wcstof, (const char *) "stof", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function double std::__cxx11::stod(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<double> (wcstod, (const char *) "stod", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function long double std::__cxx11::stold(const wstring&, std::size_t*) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __gnu_cxx::__stoa<long double> (wcstold, (const char *) "stold", std::__cxx11::basic_string<wchar_t>::c_str ((const struct wstring *) __str), __idx)>>;


;; Function std::wstring std::__cxx11::to_wstring(int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.40099, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.40099
  vswprintf
  16
  (const wchar_t *) "%\x00d\x00\x00"
  __val >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.40112, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.40112
  vswprintf
  16
  (const wchar_t *) "%\x00u\x00\x00"
  __val >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.40116, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.40116
  vswprintf
  16
  (const wchar_t *) "%\x00l\x00d\x00\x00"
  __val >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.40120, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.40120
  vswprintf
  16
  (const wchar_t *) "%\x00l\x00u\x00\x00"
  __val >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long long int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.40124, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.40124
  vswprintf
  32
  (const wchar_t *) "%\x00l\x00l\x00d\x00\x00"
  __val >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(long long unsigned int) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.40128, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.40128
  vswprintf
  32
  (const wchar_t *) "%\x00l\x00l\x00u\x00\x00"
  __val >>>>>>;


;; Function std::wstring std::__cxx11::to_wstring(float) (null)
;; enabled by -tree-original


{
  const int __n = 58;

  <<cleanup_point   const int __n = 58;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.40133, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.40133
  vswprintf
  58
  (const wchar_t *) "%\x00f\x00\x00"
  (double) __val >>>>>>;
}


;; Function std::wstring std::__cxx11::to_wstring(double) (null)
;; enabled by -tree-original


{
  const int __n = 328;

  <<cleanup_point   const int __n = 328;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.40138, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.40138
  vswprintf
  328
  (const wchar_t *) "%\x00f\x00\x00"
  __val >>>>>>;
}


;; Function std::wstring std::__cxx11::to_wstring(long double) (null)
;; enabled by -tree-original


{
  const int __n = 4952;

  <<cleanup_point   const int __n = 4952;>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.40143, <<< Unknown tree: aggr_init_expr
  7
  __to_xstring
  D.40143
  vswprintf
  4952
  (const wchar_t *) "%\x00L\x00f\x00\x00"
  __val >>>>>>;
}


;; Function std::size_t std::hash<std::__cxx11::basic_string<char> >::operator()(const string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char>::data ((const struct string *) __s), std::__cxx11::basic_string<char>::length ((const struct string *) __s), 3339675911)>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<wchar_t> >::operator()(const wstring&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<wchar_t>::data ((const struct wstring *) __s), std::__cxx11::basic_string<wchar_t>::length ((const struct wstring *) __s) * 2, 3339675911)>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<char8_t> >::operator()(const u8string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char8_t>::data ((const struct u8string *) __s), std::__cxx11::basic_string<char8_t>::length ((const struct u8string *) __s), 3339675911)>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<char16_t> >::operator()(const u16string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char16_t>::data ((const struct u16string *) __s), std::__cxx11::basic_string<char16_t>::length ((const struct u16string *) __s) * 2, 3339675911)>>
   >>>;


;; Function std::size_t std::hash<std::__cxx11::basic_string<char32_t> >::operator()(const u32string&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) std::__cxx11::basic_string<char32_t>::data ((const struct u32string *) __s), std::__cxx11::basic_string<char32_t>::length ((const struct u32string *) __s) * 4, 3339675911)>>
   >>>;


;; Function std::__cxx11::basic_string<char> std::literals::string_literals::operator""s(const char*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.44393, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.44393
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.44392, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.44392
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<wchar_t> std::literals::string_literals::operator""s(const wchar_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.44497, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.44497
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.44496, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.44496
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char8_t> std::literals::string_literals::operator""s(const char8_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.44601, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.44601
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.44600, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.44600
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char16_t> std::literals::string_literals::operator""s(const char16_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.44714, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.44714
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.44713, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.44713
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::__cxx11::basic_string<char32_t> std::literals::string_literals::operator""s(const char32_t*, std::size_t) (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.44827, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.44827
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __str
  __len
  (const struct allocator &) &TARGET_EXPR <D.44826, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.44826
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;


;; Function std::locale::locale(const string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct locale *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::locale::locale ((struct locale *) this, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s)) >>>>>;
  try
    {
      
    }
  catch
    {
      std::locale::~locale ((struct locale *) this);
    }
}


;; Function std::locale::locale(const std::locale&, const string&, std::locale::category) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct locale *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::locale::locale ((struct locale *) this, __base, std::__cxx11::basic_string<char>::c_str ((const struct string *) __s), __cat) >>>>>;
  try
    {
      
    }
  catch
    {
      std::locale::~locale ((struct locale *) this);
    }
}


;; Function std::locale::facet::facet(std::size_t) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __as_base  &) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct facet *) this)->_vptr.facet = &_ZTVNSt6locale5facetE + 16) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct facet *) this)->_M_refcount = __refs != 0 ? 1 : 0) >>>>>;
  }
   >>>;


;; Function void std::locale::facet::_M_add_reference() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((const struct facet *) this)->_M_refcount, 1) >>>>>
   >>>;


;; Function void std::locale::facet::_M_remove_reference() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((const struct facet *) this)->_M_refcount, -1) == 1>>)
    {
      <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  if ((struct facet *) this != 0B)
    {
      OBJ_TYPE_REF(*(((struct facet *) this)->_vptr.facet + 8);(struct facet)(struct facet *) this->1) ((struct facet *) this);
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
    }
   >>>;


;; Function std::locale::id::id() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct id *) this = {CLOBBER} >>>>>;
{
  
}


;; Function void std::locale::_Impl::_M_add_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((struct _Impl *) this)->_M_refcount, 1) >>>>>
   >>>;


;; Function void std::locale::_Impl::_M_remove_reference() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (<<cleanup_point __gnu_cxx::__exchange_and_add_dispatch (&((struct _Impl *) this)->_M_refcount, -1) == 1>>)
    {
      <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  if ((struct _Impl *) this != 0B)
    {
      try
        {
          std::locale::_Impl::~_Impl ((struct _Impl *) this);
        }
      finally
        {
          operator delete ((void *) this, 40);
        }
    }
  else
    {
      <<< Unknown tree: void_cst >>>
    } >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
    }
   >>>;


;; Function bool std::locale::_Impl::_M_check_same_name() (null)
;; enabled by -tree-original


{
  bool __ret = 1;

  <<cleanup_point   bool __ret = 1;>>;
  {
    if (*(((struct _Impl *) this)->_M_names + 8) != 0B)
      {
        {
          {
            size_t __i = 0;

            <<cleanup_point             size_t __i = 0;>>;
            goto <D.46011>;
            <D.46010>:;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = __builtin_strcmp ((const char *) *(((struct _Impl *) this)->_M_names + (sizetype) (__i * 8)), (const char *) *(((struct _Impl *) this)->_M_names + ((sizetype) __i + 1) * 8)) == 0) >>>>>;
            <<cleanup_point (void)  ++__i>>;
            <D.46011>:;
            if (__ret && __i <= 4) goto <D.46010>; else goto <D.46008>;
            <D.46008>:;
          }
        }
      }
  }
  return <retval> = __ret;
}


;; Function bool std::_V2::error_category::operator==(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category *) this == (const struct error_category *) __other
   >>>;


;; Function constexpr auto std::__detail::__common_cmp_cat() [with _Ts = {std::strong_ordering, std::partial_ordering}] (null)
;; enabled by -tree-original


{
  const unsigned int __cats = 10;

  <<cleanup_point   const unsigned int __cats = 10;>>;
  <<cleanup_point return <retval> = TARGET_EXPR <D.47652, equivalent>>>;
}


;; Function constexpr auto std::compare_three_way::operator()(_Tp&&, _Up&&) const [with _Tp = const std::_V2::error_category*; _Up = const std::_V2::error_category*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    {
      {
        const volatile void * __pt = (const volatile void *) *__t;
        const volatile void * __pu = (const volatile void *) *__u;
        long long unsigned int __it = (long long unsigned int) __pt;
        long long unsigned int __iu = (long long unsigned int) __pu;

                const volatile void * __pt = (const volatile void *) *__t;
                const volatile void * __pu = (const volatile void *) *__u;
        if (__builtin_is_constant_evaluated ())
          {
            <<cleanup_point return <retval> = TARGET_EXPR <D.48090, SAVE_EXPR <__pt> == SAVE_EXPR <__pu> ? equal : SAVE_EXPR <__pt> < SAVE_EXPR <__pu> ? less : greater>>>;
          }
                long long unsigned int __it = (long long unsigned int) __pt;
                long long unsigned int __iu = (long long unsigned int) __pu;
        <<cleanup_point return <retval> = TARGET_EXPR <D.48093, SAVE_EXPR <__it> == SAVE_EXPR <__iu> ? equal : SAVE_EXPR <__it> < SAVE_EXPR <__iu> ? less : greater>>>;
      }
    }
  }
   >>>;


;; Function std::strong_ordering std::_V2::error_category::operator<=>(const std::_V2::error_category&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.48104, std::compare_three_way::operator()<const std::_V2::error_category*, const std::_V2::error_category*> (&TARGET_EXPR <D.47506, {}>, (const struct error_category * &) &TARGET_EXPR <D.47979, (const struct error_category *) this>, (const struct error_category * &) &TARGET_EXPR <D.47980, (const struct error_category *) __rhs>)>>>
   >>>;


;; Function std::error_code::error_code() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct error_code *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_value = 0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) std::_V2::system_category ()) >>>>>;
  }
   >>>;


;; Function std::error_code::error_code(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct error_code *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_value = __v) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
  }
   >>>;


;; Function void std::error_code::assign(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_value = __v) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_code *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
   >>>;


;; Function void std::error_code::clear() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_code::assign ((struct error_code *) this, 0, std::_V2::system_category ()) >>>>>
   >>>;


;; Function int std::error_code::value() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) ((const struct error_code *) this)->_M_value
   >>>;


;; Function const std::_V2::error_category& std::error_code::category() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category &) ((const struct error_code *) this)->_M_cat
   >>>;


;; Function std::string std::error_code::message() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.48195, <<< Unknown tree: aggr_init_expr
  5
  OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>)->_vptr.error_category + 32);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>->4)
  D.48195
  SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) this)>
  std::error_code::value ((const struct error_code *) this) >>>>>>;


;; Function std::error_code::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ((const struct error_code *) this)->_M_value != 0
   >>>;


;; Function std::error_code std::make_error_code(std::errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.48218, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.48218
  (struct error_code *) <<< Unknown tree: void_cst >>>
  (int) __e
  std::_V2::generic_category () >>>>>>
   >>>;


;; Function std::strong_ordering std::operator<=>(const std::error_code&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    {
      struct strong_ordering __c;

            struct strong_ordering __c;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__c = std::_V2::error_category::operator<=> ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs))) >>>>>;
      if (<<cleanup_point !std::operator== (TARGET_EXPR <D.48240, __c>, TARGET_EXPR <D.48241, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.48241
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)>>)
        {
          <<cleanup_point return <retval> = TARGET_EXPR <D.48242, *(struct strong_ordering &) &__c>>>;
        }
    }
    <<cleanup_point return <retval> = TARGET_EXPR <D.48243, SAVE_EXPR <std::error_code::value ((const struct error_code *) __lhs)> == SAVE_EXPR <std::error_code::value ((const struct error_code *) __rhs)> ? equal : SAVE_EXPR <std::error_code::value ((const struct error_code *) __lhs)> < SAVE_EXPR <std::error_code::value ((const struct error_code *) __rhs)> ? less : greater>>>;
  }
   >>>;


;; Function std::error_condition::error_condition() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct error_condition *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_value = 0) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) std::_V2::generic_category ()) >>>>>;
  }
   >>>;


;; Function std::error_condition::error_condition(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct error_condition *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_value = __v) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
  }
   >>>;


;; Function void std::error_condition::assign(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_value = __v) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct error_condition *) this)->_M_cat = (const struct error_category *) __cat) >>>>>;
   >>>;


;; Function void std::error_condition::clear() (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_condition::assign ((struct error_condition *) this, 0, std::_V2::generic_category ()) >>>>>
   >>>;


;; Function int std::error_condition::value() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (int) ((const struct error_condition *) this)->_M_value
   >>>;


;; Function const std::_V2::error_category& std::error_condition::category() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_category &) ((const struct error_condition *) this)->_M_cat
   >>>;


;; Function std::string std::error_condition::message() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.48336, <<< Unknown tree: aggr_init_expr
  5
  OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>)->_vptr.error_category + 32);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>->4)
  D.48336
  SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) this)>
  std::error_condition::value ((const struct error_condition *) this) >>>>>>;


;; Function std::error_condition::operator bool() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = ((const struct error_condition *) this)->_M_value != 0
   >>>;


;; Function std::error_condition std::make_error_condition(std::errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.48359, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.48359
  (struct error_condition *) <<< Unknown tree: void_cst >>>
  (int) __e
  std::_V2::generic_category () >>>>>>
   >>>;


;; Function bool std::operator==(const std::error_code&, const std::error_code&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator== ((const struct error_category *) std::error_code::category ((const struct error_code *) __lhs), std::error_code::category ((const struct error_code *) __rhs)) && std::error_code::value ((const struct error_code *) __lhs) == std::error_code::value ((const struct error_code *) __rhs)>>
   >>>;


;; Function bool std::operator==(const std::error_code&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>)->_vptr.error_category + 48);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>->6) (SAVE_EXPR <(const struct error_category *) std::error_code::category ((const struct error_code *) __lhs)>, std::error_code::value ((const struct error_code *) __lhs), __rhs) || OBJ_TYPE_REF(*((SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>)->_vptr.error_category + 56);(const struct error_category)SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>->7) (SAVE_EXPR <(const struct error_category *) std::error_condition::category ((const struct error_condition *) __rhs)>, __lhs, std::error_condition::value ((const struct error_condition *) __rhs))>>
   >>>;


;; Function bool std::operator==(const std::error_condition&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::_V2::error_category::operator== ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs)) && std::error_condition::value ((const struct error_condition *) __lhs) == std::error_condition::value ((const struct error_condition *) __rhs)>>
   >>>;


;; Function std::strong_ordering std::operator<=>(const std::error_condition&, const std::error_condition&) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    {
      struct strong_ordering __c;

            struct strong_ordering __c;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__c = std::_V2::error_category::operator<=> ((const struct error_category *) std::error_condition::category ((const struct error_condition *) __lhs), std::error_condition::category ((const struct error_condition *) __rhs))) >>>>>;
      if (<<cleanup_point !std::operator== (TARGET_EXPR <D.48408, __c>, TARGET_EXPR <D.48409, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.48409
  (struct __unspec *) <<< Unknown tree: void_cst >>>
  0B >>>>)>>)
        {
          <<cleanup_point return <retval> = TARGET_EXPR <D.48410, *(struct strong_ordering &) &__c>>>;
        }
    }
    <<cleanup_point return <retval> = TARGET_EXPR <D.48411, SAVE_EXPR <std::error_condition::value ((const struct error_condition *) __lhs)> == SAVE_EXPR <std::error_condition::value ((const struct error_condition *) __rhs)> ? equal : SAVE_EXPR <std::error_condition::value ((const struct error_condition *) __lhs)> < SAVE_EXPR <std::error_condition::value ((const struct error_condition *) __rhs)> ? less : greater>>>;
  }
   >>>;


;; Function std::system_error::system_error(std::error_code) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.48535, (const struct string &) &TARGET_EXPR <D.48543, <<< Unknown tree: aggr_init_expr
  4
  message
  D.48543
  &__ec >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.48535.D.47140._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.48535);
    }
}


;; Function std::system_error::system_error(std::error_code, const string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.48535, (const struct string &) &TARGET_EXPR <D.48566, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.48566
  (struct basic_string &) &TARGET_EXPR <D.48552, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.48552
  (const struct basic_string &) __what
  (const char *) ": " >>>>
  (struct basic_string &) &TARGET_EXPR <D.48553, <<< Unknown tree: aggr_init_expr
  4
  message
  D.48553
  &__ec >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.48535.D.47140._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.48535);
    }
}


;; Function std::system_error::system_error(std::error_code, const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.48535, (const struct string &) &TARGET_EXPR <D.48584, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.48584
  __what
  (struct basic_string &) &TARGET_EXPR <D.48583, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.48583
  (const char *) ": "
  (struct basic_string &) &TARGET_EXPR <D.48576, <<< Unknown tree: aggr_init_expr
  4
  message
  D.48576
  &__ec >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.48535.D.47140._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->_M_code = __ec) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.48535);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&, const char*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::system_error::system_error ((struct system_error *) this, TARGET_EXPR <D.48594, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.48594
  (struct error_code *) <<< Unknown tree: void_cst >>>
  __v
  __ecat >>>>, __what) >>>>>;
  try
    {
      
    }
  catch
    {
      std::system_error::~system_error ((struct system_error *) this);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.48535, (const struct string &) &TARGET_EXPR <D.48601, <<< Unknown tree: aggr_init_expr
  4
  message
  D.48601
  &TARGET_EXPR <D.48600, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.48600
  (struct error_code *) <<< Unknown tree: void_cst >>>
  __v
  __ecat >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.48535.D.47140._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_code::error_code (&((struct system_error *) this)->_M_code, __v, __ecat) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.48535);
    }
}


;; Function std::system_error::system_error(int, const std::_V2::error_category&, const string&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct system_error *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::runtime_error::runtime_error (&((struct system_error *) this)->D.48535, (const struct string &) &TARGET_EXPR <D.48612, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.48612
  (struct basic_string &) &TARGET_EXPR <D.48609, <<< Unknown tree: aggr_init_expr
  5
  operator+
  D.48609
  (const struct basic_string &) __what
  (const char *) ": " >>>>
  (struct basic_string &) &TARGET_EXPR <D.48611, <<< Unknown tree: aggr_init_expr
  4
  message
  D.48611
  &TARGET_EXPR <D.48610, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.48610
  (struct error_code *) <<< Unknown tree: void_cst >>>
  __v
  __ecat >>>> >>>> >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct system_error *) this)->D.48535.D.47140._vptr.exception = &_ZTVSt12system_error + 16) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::error_code::error_code (&((struct system_error *) this)->_M_code, __v, __ecat) >>>>>;
    }
  catch
    {
      std::runtime_error::~runtime_error (&((struct system_error *) this)->D.48535);
    }
}


;; Function const std::error_code& std::system_error::code() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const struct error_code &) &((const struct system_error *) this)->_M_code
   >>>;


;; Function std::size_t std::hash<std::error_code>::operator()(const std::error_code&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const size_t __tmp;

        const size_t __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = std::_Hash_impl::hash<int> ((const int &) &TARGET_EXPR <D.48643, std::error_code::value ((const struct error_code *) __e)>)) >>>>>;
    <<cleanup_point return <retval> = std::_Hash_impl::__hash_combine<const std::_V2::error_category*> ((const struct error_category * const &) &TARGET_EXPR <D.48647, (const struct error_category *) std::error_code::category ((const struct error_code *) __e)>, (size_t) __tmp)>>;
  }
   >>>;


;; Function std::size_t std::hash<std::error_condition>::operator()(const std::error_condition&) const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const size_t __tmp;

        const size_t __tmp;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = std::_Hash_impl::hash<int> ((const int &) &TARGET_EXPR <D.48665, std::error_condition::value ((const struct error_condition *) __e)>)) >>>>>;
    <<cleanup_point return <retval> = std::_Hash_impl::__hash_combine<const std::_V2::error_category*> ((const struct error_category * const &) &TARGET_EXPR <D.48666, (const struct error_category *) std::error_condition::category ((const struct error_condition *) __e)>, (size_t) __tmp)>>;
  }
   >>>;


;; Function constexpr std::_Ios_Fmtflags std::operator&(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Fmtflags) ((int) __a & (int) __b);


;; Function constexpr std::_Ios_Fmtflags std::operator|(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Fmtflags) ((int) __a | (int) __b);


;; Function constexpr std::_Ios_Fmtflags std::operator^(std::_Ios_Fmtflags, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Fmtflags) ((int) __a ^ (int) __b);


;; Function constexpr std::_Ios_Fmtflags std::operator~(std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


return <retval> = ~__a;


;; Function const std::_Ios_Fmtflags& std::operator|=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Fmtflags &) __a;>>;


;; Function const std::_Ios_Fmtflags& std::operator&=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Fmtflags &) __a;>>;


;; Function const std::_Ios_Fmtflags& std::operator^=(std::_Ios_Fmtflags&, std::_Ios_Fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Fmtflags &) __a;>>;


;; Function constexpr std::_Ios_Openmode std::operator&(std::_Ios_Openmode, std::_Ios_Openmode) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Openmode) ((int) __a & (int) __b);


;; Function constexpr std::_Ios_Openmode std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Openmode) ((int) __a | (int) __b);


;; Function constexpr std::_Ios_Openmode std::operator^(std::_Ios_Openmode, std::_Ios_Openmode) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Openmode) ((int) __a ^ (int) __b);


;; Function constexpr std::_Ios_Openmode std::operator~(std::_Ios_Openmode) (null)
;; enabled by -tree-original


return <retval> = ~__a;


;; Function const std::_Ios_Openmode& std::operator|=(std::_Ios_Openmode&, std::_Ios_Openmode) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Openmode &) __a;>>;


;; Function const std::_Ios_Openmode& std::operator&=(std::_Ios_Openmode&, std::_Ios_Openmode) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Openmode &) __a;>>;


;; Function const std::_Ios_Openmode& std::operator^=(std::_Ios_Openmode&, std::_Ios_Openmode) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Openmode &) __a;>>;


;; Function constexpr std::_Ios_Iostate std::operator&(std::_Ios_Iostate, std::_Ios_Iostate) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Iostate) ((int) __a & (int) __b);


;; Function constexpr std::_Ios_Iostate std::operator|(std::_Ios_Iostate, std::_Ios_Iostate) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Iostate) ((int) __a | (int) __b);


;; Function constexpr std::_Ios_Iostate std::operator^(std::_Ios_Iostate, std::_Ios_Iostate) (null)
;; enabled by -tree-original


return <retval> = (_Ios_Iostate) ((int) __a ^ (int) __b);


;; Function constexpr std::_Ios_Iostate std::operator~(std::_Ios_Iostate) (null)
;; enabled by -tree-original


return <retval> = ~__a;


;; Function const std::_Ios_Iostate& std::operator|=(std::_Ios_Iostate&, std::_Ios_Iostate) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator| (*__a, __b);, (const _Ios_Iostate &) __a;>>;


;; Function const std::_Ios_Iostate& std::operator&=(std::_Ios_Iostate&, std::_Ios_Iostate) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator& (*__a, __b);, (const _Ios_Iostate &) __a;>>;


;; Function const std::_Ios_Iostate& std::operator^=(std::_Ios_Iostate&, std::_Ios_Iostate) (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = *__a = std::operator^ (*__a, __b);, (const _Ios_Iostate &) __a;>>;


;; Function std::error_code std::make_error_code(std::io_errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.48837, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.48837
  (struct error_code *) <<< Unknown tree: void_cst >>>
  (int) __e
  std::iostream_category () >>>>>>
   >>>;


;; Function std::error_condition std::make_error_condition(std::io_errc) (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = TARGET_EXPR <D.48841, <<< Unknown tree: aggr_init_expr
  6
  __ct_comp 
  D.48841
  (struct error_condition *) <<< Unknown tree: void_cst >>>
  (int) __e
  std::iostream_category () >>>>>>
   >>>;


;; Function std::ios_base::_Callback_list::_Callback_list(std::ios_base::event_callback, int, std::ios_base::_Callback_list*) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Callback_list *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_next = __cb) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_fn = __fn) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_index = __index) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Callback_list *) this)->_M_refcount = 0) >>>>>;
}


;; Function void std::ios_base::_Callback_list::_M_add_reference() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__atomic_add_dispatch (&((struct _Callback_list *) this)->_M_refcount, 1) >>>>>;


;; Function int std::ios_base::_Callback_list::_M_remove_reference() (null)
;; enabled by -tree-original


{
  int __res;

    int __res;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__res = __gnu_cxx::__exchange_and_add_dispatch (&((struct _Callback_list *) this)->_M_refcount, -1)) >>>>>;
  if (__res == 0)
    {
      
    }
  return <retval> = __res;
}


;; Function std::ios_base::_Words::_Words() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct __as_base  &) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Words *) this)->_M_pword = 0B) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Words *) this)->_M_iword = 0) >>>>>;
}


;; Function std::ios_base::fmtflags std::ios_base::flags() const (null)
;; enabled by -tree-original


return <retval> = (fmtflags) ((const struct ios_base *) this)->_M_flags;


;; Function std::ios_base::fmtflags std::ios_base::flags(std::ios_base::fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ios_base *) this)->_M_flags = __fmtfl) >>>>>;
  return <retval> = __old;
}


;; Function std::ios_base::fmtflags std::ios_base::setf(std::ios_base::fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator|= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, __fmtfl) >>>>>;
  return <retval> = __old;
}


;; Function std::ios_base::fmtflags std::ios_base::setf(std::ios_base::fmtflags, std::ios_base::fmtflags) (null)
;; enabled by -tree-original


{
  fmtflags __old = ((struct ios_base *) this)->_M_flags;

    fmtflags __old = ((struct ios_base *) this)->_M_flags;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator&= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator~ (__mask)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator|= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator& (__fmtfl, __mask)) >>>>>;
  return <retval> = __old;
}


;; Function void std::ios_base::unsetf(std::ios_base::fmtflags) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator&= ((_Ios_Fmtflags &) &((struct ios_base *) this)->_M_flags, std::operator~ (__mask)) >>>>>;


;; Function std::streamsize std::ios_base::precision() const (null)
;; enabled by -tree-original


return <retval> = (streamsize) ((const struct ios_base *) this)->_M_precision;


;; Function std::streamsize std::ios_base::precision(std::streamsize) (null)
;; enabled by -tree-original


{
  streamsize __old = ((struct ios_base *) this)->_M_precision;

    streamsize __old = ((struct ios_base *) this)->_M_precision;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ios_base *) this)->_M_precision = __prec) >>>>>;
  return <retval> = __old;
}


;; Function std::streamsize std::ios_base::width() const (null)
;; enabled by -tree-original


return <retval> = (streamsize) ((const struct ios_base *) this)->_M_width;


;; Function std::streamsize std::ios_base::width(std::streamsize) (null)
;; enabled by -tree-original


{
  streamsize __old = ((struct ios_base *) this)->_M_width;

    streamsize __old = ((struct ios_base *) this)->_M_width;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct ios_base *) this)->_M_width = __wide) >>>>>;
  return <retval> = __old;
}


;; Function std::locale std::ios_base::getloc() const (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.49209, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.49209
  (struct locale *) <<< Unknown tree: void_cst >>>
  (const struct locale &) &((const struct ios_base *) this)->_M_ios_locale >>>>>>;


;; Function const std::locale& std::ios_base::_M_getloc() const (null)
;; enabled by -tree-original


return <retval> = (const struct locale &) &((const struct ios_base *) this)->_M_ios_locale;


;; Function long int& std::ios_base::iword(int) (null)
;; enabled by -tree-original


{
  struct _Words & __word;

    struct _Words & __word;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__word = (unsigned int) ((struct ios_base *) this)->_M_word_size > (unsigned int) __ix ? (struct _Words &) (((struct ios_base *) this)->_M_word + (sizetype) ((long long unsigned int) __ix * 16)) : std::ios_base::_M_grow_words ((struct ios_base *) this, __ix, 1)) >>>>>;
  return <retval> = (long int &) &__word->_M_iword;
}


;; Function void*& std::ios_base::pword(int) (null)
;; enabled by -tree-original


{
  struct _Words & __word;

    struct _Words & __word;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__word = (unsigned int) ((struct ios_base *) this)->_M_word_size > (unsigned int) __ix ? (struct _Words &) (((struct ios_base *) this)->_M_word + (sizetype) ((long long unsigned int) __ix * 16)) : std::ios_base::_M_grow_words ((struct ios_base *) this, __ix, 0)) >>>>>;
  return <retval> = (void * &) &__word->_M_pword;
}


;; Function std::ios_base& std::boolalpha(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 1) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noboolalpha(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 1) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::showbase(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 512) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noshowbase(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 512) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::showpoint(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 1024) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noshowpoint(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 1024) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::showpos(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 2048) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noshowpos(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 2048) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::skipws(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 4096) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::noskipws(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 4096) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::uppercase(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 16384) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::nouppercase(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 16384) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::unitbuf(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 8192) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::nounitbuf(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 8192) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::internal(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 16, 176) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::left(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 32, 176) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::right(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 128, 176) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::dec(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 2, 74) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::hex(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 8, 74) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::oct(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 64, 74) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::fixed(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 4, 260) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::scientific(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, 256, 260) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::hexfloat(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::ios_base::setf ((struct ios_base *) __base, std::operator| (4, 256), 260) >>>>>;
return <retval> = __base;


;; Function std::ios_base& std::defaultfloat(std::ios_base&) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::unsetf ((struct ios_base *) __base, 260) >>>>>;
return <retval> = __base;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = std::locale; long long unsigned int <anonymous> = 8; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.49812, {}>>>;


;; Function std::ctype<char>::char_type std::ctype<char>::toupper(std::ctype<char>::char_type) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.51299._vptr.facet + 16);(const struct ctype)(const struct ctype *) this->2) ((const struct ctype *) this, (int) __c)>>;


;; Function const char_type* std::ctype<char>::toupper(std::ctype<char>::char_type*, const char_type*) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.51299._vptr.facet + 24);(const struct ctype)(const struct ctype *) this->3) ((const struct ctype *) this, __lo, __hi)>>;


;; Function std::ctype<char>::char_type std::ctype<char>::tolower(std::ctype<char>::char_type) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.51299._vptr.facet + 32);(const struct ctype)(const struct ctype *) this->4) ((const struct ctype *) this, (int) __c)>>;


;; Function const char_type* std::ctype<char>::tolower(std::ctype<char>::char_type*, const char_type*) const (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.51299._vptr.facet + 40);(const struct ctype)(const struct ctype *) this->5) ((const struct ctype *) this, __lo, __hi)>>;


;; Function std::ctype<char>::char_type std::ctype<char>::widen(char) const (null)
;; enabled by -tree-original


if (((const struct ctype *) this)->_M_widen_ok != 0)
  {
    return <retval> = ((const struct ctype *) this)->_M_widen[(int) (unsigned char) __c];
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_widen_init ((const struct ctype *) this) >>>>>;
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.51299._vptr.facet + 48);(const struct ctype)(const struct ctype *) this->6) ((const struct ctype *) this, (int) __c)>>;


;; Function const char* std::ctype<char>::widen(const char*, const char*, std::ctype<char>::char_type*) const (null)
;; enabled by -tree-original


if (((const struct ctype *) this)->_M_widen_ok == 1)
  {
    if (__builtin_expect (__hi != __lo, 1) != 0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long long unsigned int) (__hi - __lo)) >>>>>;
      }
    return <retval> = __hi;
  }
if (((const struct ctype *) this)->_M_widen_ok == 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_widen_init ((const struct ctype *) this) >>>>>;
  }
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.51299._vptr.facet + 56);(const struct ctype)(const struct ctype *) this->7) ((const struct ctype *) this, __lo, __hi, __to)>>;


;; Function char std::ctype<char>::narrow(std::ctype<char>::char_type, char) const (null)
;; enabled by -tree-original


{
  const char __t;

  if (((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c] != 0)
    {
      return <retval> = ((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c];
    }
    const char __t;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__t = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.51299._vptr.facet + 64);(const struct ctype)(const struct ctype *) this->8) ((const struct ctype *) this, (int) __c, (int) __dfault)) >>>>>;
  if (__t != (const char) __dfault)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((const struct ctype *) this)->_M_narrow[(int) (unsigned char) __c] = (char) __t) >>>>>;
    }
  return <retval> = (char) __t;
}


;; Function const char_type* std::ctype<char>::narrow(const char_type*, const char_type*, char, char*) const (null)
;; enabled by -tree-original


if (__builtin_expect (((const struct ctype *) this)->_M_narrow_ok == 1, 1) != 0)
  {
    if (__builtin_expect (__hi != __lo, 1) != 0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long long unsigned int) (__hi - __lo)) >>>>>;
      }
    return <retval> = __hi;
  }
if (((const struct ctype *) this)->_M_narrow_ok == 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::ctype<char>::_M_narrow_init ((const struct ctype *) this) >>>>>;
  }
<<cleanup_point return <retval> = OBJ_TYPE_REF(*(((const struct ctype *) this)->D.51299._vptr.facet + 72);(const struct ctype)(const struct ctype *) this->9) ((const struct ctype *) this, __lo, __hi, (int) __dfault, __to)>>;


;; Function const mask* std::ctype<char>::table() const (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const mask *) ((const struct ctype *) this)->_M_table
   >>>;


;; Function virtual std::ctype<char>::char_type std::ctype<char>::do_widen(char) const (null)
;; enabled by -tree-original


return <retval> = __c;


;; Function virtual const char* std::ctype<char>::do_widen(const char*, const char*, std::ctype<char>::char_type*) const (null)
;; enabled by -tree-original


if (__builtin_expect (__hi != __lo, 1) != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long long unsigned int) (__hi - __lo)) >>>>>;
  }
return <retval> = __hi;


;; Function virtual char std::ctype<char>::do_narrow(std::ctype<char>::char_type, char) const (null)
;; enabled by -tree-original


return <retval> = __c;


;; Function virtual const char_type* std::ctype<char>::do_narrow(const char_type*, const char_type*, char, char*) const (null)
;; enabled by -tree-original


if (__builtin_expect (__hi != __lo, 1) != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memcpy ((void *) __to, (const void *) __lo, (long long unsigned int) (__hi - __lo)) >>>>>;
  }
return <retval> = __hi;


;; Function bool std::ctype<char>::is(std::ctype_base::mask, char) const (null)
;; enabled by -tree-original


return <retval> = ((short unsigned int) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long long unsigned int) (unsigned char) __c * 2)) & __m) != 0;


;; Function const char* std::ctype<char>::is(const char*, const char*, std::ctype_base::mask*) const (null)
;; enabled by -tree-original


goto <D.51722>;
<D.51723>:;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__vec++  = (mask) *((const mask *) ((const struct ctype *) this)->_M_table + (sizetype) ((long long unsigned int) (unsigned char) *__low++  * 2))) >>>>>;
<D.51722>:;
if (__low < __high) goto <D.51723>; else goto <D.51721>;
<D.51721>:;
return <retval> = __high;


;; Function const char* std::ctype<char>::scan_is(std::ctype_base::mask, const char*, const char*) const (null)
;; enabled by -tree-original


goto <D.51732>;
<D.51733>:;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__low >>>>>;
<D.51732>:;
if (<<cleanup_point __low < __high && !std::ctype<char>::is ((const struct ctype *) this, (int) __m, (int) *__low)>>) goto <D.51733>; else goto <D.51731>;
<D.51731>:;
return <retval> = __low;


;; Function const char* std::ctype<char>::scan_not(std::ctype_base::mask, const char*, const char*) const (null)
;; enabled by -tree-original


goto <D.51742>;
<D.51743>:;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__low >>>>>;
<D.51742>:;
if (<<cleanup_point __low < __high && (int) std::ctype<char>::is ((const struct ctype *) this, (int) __m, (int) *__low) != 0>>) goto <D.51743>; else goto <D.51741>;
<D.51741>:;
return <retval> = __low;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = bool; long long unsigned int <anonymous> = 1; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.54481, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = long long int; long long unsigned int <anonymous> = 8; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.56682, {}>>>;


;; Function static constexpr const auto append_if<C, Pred>::get() [with A = int; L = list<>; C = list<int, placeholder<0, float> >; Pred = is_placeholder] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) "don\'t push front"), endl) >>>>>;
<<cleanup_point return <retval> = TARGET_EXPR <D.58902, {}>>>;


;; Function static constexpr const auto append_if<C, Pred>::get() [with A = int; L = list<const unpack<list<> > >; C = list<int, placeholder<0, float> >; Pred = is_placeholder] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) "don\'t push front"), endl) >>>>>;
<<cleanup_point return <retval> = TARGET_EXPR <D.58953, {}>>>;


;; Function static constexpr const auto append_if<C, Pred>::func() [with long long unsigned int I = 0; long long unsigned int S = 2; seq = const unpack<list<> >; A = int; xs = {placeholder<0, float>}; C = list<int, placeholder<0, float> >; Pred = is_placeholder] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct __ostream_type *) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) "I = 0 : "), 0), endl) >>>>>;
<<cleanup_point return <retval> = TARGET_EXPR <D.58966, append_if<list<int, placeholder<0, float> >, is_placeholder>::get<int, list<const unpack<list<> > > > ()>>>;


;; Function static constexpr const auto append_if<C, Pred>::func() [with long long unsigned int I = 1; long long unsigned int S = 2; A = int; xs = {placeholder<0, float>}; C = list<int, placeholder<0, float> >; Pred = is_placeholder] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::basic_ostream<char>::operator<< ((struct __ostream_type *) std::basic_ostream<char>::operator<< ((struct basic_ostream *) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, (const char *) "I = S-1 : "), 1), endl) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  (void) TARGET_EXPR <D.58915, append_if<list<int, placeholder<0, float> >, is_placeholder>::get<int, list<> > ()> >>>>>;
<<cleanup_point return <retval> = TARGET_EXPR <D.58970, append_if<list<int, placeholder<0, float> >, is_placeholder>::func<0, 2, const unpack<list<> >, int, placeholder<0, float> > ()>>>;


;; Function int main(int, char**) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::operator<< <std::char_traits<char> > ((struct basic_ostream &) &cout, std::type_info::name ((const struct type_info *) &_ZTI6unpackI4listIJKS_IS0_IJEEEEEE)) >>>>>;
return <retval> = 0;


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::eq(const char_type&, const char_type&) [with _CharT = char; __gnu_cxx::char_traits<_CharT>::char_type = char] (null)
;; enabled by -tree-original


return <retval> = *__c1 == *__c2;


;; Function static constexpr std::size_t __gnu_cxx::char_traits<_CharT>::length(const char_type*) [with _CharT = char; std::size_t = long long unsigned int; __gnu_cxx::char_traits<_CharT>::char_type = char] (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  goto <D.59004>;
  <D.59005>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
  <D.59004>:;
  if (<<cleanup_point !__gnu_cxx::char_traits<char>::eq ((const char_type &) (__p + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) &TARGET_EXPR <D.58992, 0>)>>) goto <D.59005>; else goto <D.59003>;
  <D.59003>:;
  return <retval> = __i;
}


;; Function static constexpr const char_type* __gnu_cxx::char_traits<_CharT>::find(const char_type*, std::size_t, const char_type&) [with _CharT = char; __gnu_cxx::char_traits<_CharT>::char_type = char; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.59019>;
    <D.59018>:;
    if (<<cleanup_point __gnu_cxx::char_traits<char>::eq ((const char_type &) (__s + (sizetype) NON_LVALUE_EXPR <__i>), __a)>>)
      {
        return <retval> = __s + (sizetype) NON_LVALUE_EXPR <__i>;
      }
    <<cleanup_point (void)  ++__i>>;
    <D.59019>:;
    if (__i < __n) goto <D.59018>; else goto <D.59016>;
    <D.59016>:;
  }
  return <retval> = 0B;
}


;; Function constexpr _BI2 std::copy_backward(_BI1, _BI1, _BI2) [with _BI1 = const char*; _BI2 = char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_backward_a<false, const char*, char*> (std::__miter_base<const char*> (__first), std::__miter_base<const char*> (__last), __result)>>;


;; Function constexpr _OI std::copy(_II, _II, _OI) [with _II = const char*; _OI = char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_a<false, const char*, char*> (std::__miter_base<const char*> (__first), std::__miter_base<const char*> (__last), __result)>>;


;; Function static constexpr __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::move(__gnu_cxx::char_traits<_CharT>::char_type*, const char_type*, std::size_t) [with _CharT = char; __gnu_cxx::char_traits<_CharT>::char_type = char; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    if ((const char_type *) __s1 > __s2 && __s2 + (sizetype) NON_LVALUE_EXPR <__n> > (const char_type *) __s1)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy_backward<const char*, char*> (__s2, __s2 + (sizetype) NON_LVALUE_EXPR <__n>, __s1 + (sizetype) NON_LVALUE_EXPR <__n>) >>>>>;
      }
    else
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy<const char*, char*> (__s2, __s2 + (sizetype) NON_LVALUE_EXPR <__n>, __s1) >>>>>;
      }
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, NON_LVALUE_EXPR <__n>)>>;


;; Function static constexpr __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::copy(__gnu_cxx::char_traits<_CharT>::char_type*, const char_type*, std::size_t) [with _CharT = char; __gnu_cxx::char_traits<_CharT>::char_type = char; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy<const char*, char*> (__s2, __s2 + (sizetype) NON_LVALUE_EXPR <__n>, __s1) >>>>>;
return <retval> = __s1;


;; Function constexpr _OI std::fill_n(_OI, _Size, const _Tp&) [with _OI = char*; _Size = long long unsigned int; _Tp = char] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__fill_n_a<char*, long long unsigned int, char> (__first, std::__size_to_integer (__n), __value, std::__iterator_category<char*> ((char * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static constexpr __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::assign(__gnu_cxx::char_traits<_CharT>::char_type*, std::size_t, __gnu_cxx::char_traits<_CharT>::char_type) [with _CharT = char; __gnu_cxx::char_traits<_CharT>::char_type = char; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::fill_n<char*, long long unsigned int, char> (__s, __n, (const char &) &__a) >>>>>;
return <retval> = __s;


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::lt(const char_type&, const char_type&) [with _CharT = wchar_t; __gnu_cxx::char_traits<_CharT>::char_type = wchar_t] (null)
;; enabled by -tree-original


return <retval> = *__c1 < *__c2;


;; Function static constexpr int __gnu_cxx::char_traits<_CharT>::compare(const char_type*, const char_type*, std::size_t) [with _CharT = wchar_t; __gnu_cxx::char_traits<_CharT>::char_type = wchar_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.59231>;
    <D.59230>:;
    if (<<cleanup_point __gnu_cxx::char_traits<wchar_t>::lt ((const char_type &) (__s1 + (sizetype) (__i * 2)), (const char_type &) (__s2 + (sizetype) (__i * 2)))>>)
      {
        return <retval> = -1;
      }
    else
      {
        if (<<cleanup_point __gnu_cxx::char_traits<wchar_t>::lt ((const char_type &) (__s2 + (sizetype) (__i * 2)), (const char_type &) (__s1 + (sizetype) (__i * 2)))>>)
          {
            return <retval> = 1;
          }
      }
    <<cleanup_point (void)  ++__i>>;
    <D.59231>:;
    if (__i < __n) goto <D.59230>; else goto <D.59228>;
    <D.59228>:;
  }
  return <retval> = 0;
}


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::eq(const char_type&, const char_type&) [with _CharT = wchar_t; __gnu_cxx::char_traits<_CharT>::char_type = wchar_t] (null)
;; enabled by -tree-original


return <retval> = *__c1 == *__c2;


;; Function static constexpr std::size_t __gnu_cxx::char_traits<_CharT>::length(const char_type*) [with _CharT = wchar_t; std::size_t = long long unsigned int; __gnu_cxx::char_traits<_CharT>::char_type = wchar_t] (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  goto <D.59247>;
  <D.59248>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
  <D.59247>:;
  if (<<cleanup_point !__gnu_cxx::char_traits<wchar_t>::eq ((const char_type &) (__p + (sizetype) (__i * 2)), (const char_type &) &TARGET_EXPR <D.59235, 0>)>>) goto <D.59248>; else goto <D.59246>;
  <D.59246>:;
  return <retval> = __i;
}


;; Function static constexpr const char_type* __gnu_cxx::char_traits<_CharT>::find(const char_type*, std::size_t, const char_type&) [with _CharT = wchar_t; __gnu_cxx::char_traits<_CharT>::char_type = wchar_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.59262>;
    <D.59261>:;
    if (<<cleanup_point __gnu_cxx::char_traits<wchar_t>::eq ((const char_type &) (__s + (sizetype) (__i * 2)), __a)>>)
      {
        return <retval> = __s + (sizetype) (__i * 2);
      }
    <<cleanup_point (void)  ++__i>>;
    <D.59262>:;
    if (__i < __n) goto <D.59261>; else goto <D.59259>;
    <D.59259>:;
  }
  return <retval> = 0B;
}


;; Function constexpr _BI2 std::copy_backward(_BI1, _BI1, _BI2) [with _BI1 = const wchar_t*; _BI2 = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_backward_a<false, const wchar_t*, wchar_t*> (std::__miter_base<const wchar_t*> (__first), std::__miter_base<const wchar_t*> (__last), __result)>>;


;; Function constexpr _OI std::copy(_II, _II, _OI) [with _II = const wchar_t*; _OI = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_a<false, const wchar_t*, wchar_t*> (std::__miter_base<const wchar_t*> (__first), std::__miter_base<const wchar_t*> (__last), __result)>>;


;; Function static constexpr __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::move(__gnu_cxx::char_traits<_CharT>::char_type*, const char_type*, std::size_t) [with _CharT = wchar_t; __gnu_cxx::char_traits<_CharT>::char_type = wchar_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    if ((const char_type *) __s1 > __s2 && __s2 + (sizetype) (__n * 2) > (const char_type *) __s1)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy_backward<const wchar_t*, wchar_t*> (__s2, __s2 + (sizetype) (__n * 2), __s1 + (sizetype) (__n * 2)) >>>>>;
      }
    else
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy<const wchar_t*, wchar_t*> (__s2, __s2 + (sizetype) (__n * 2), __s1) >>>>>;
      }
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static constexpr __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::copy(__gnu_cxx::char_traits<_CharT>::char_type*, const char_type*, std::size_t) [with _CharT = wchar_t; __gnu_cxx::char_traits<_CharT>::char_type = wchar_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy<const wchar_t*, wchar_t*> (__s2, __s2 + (sizetype) (__n * 2), __s1) >>>>>;
return <retval> = __s1;


;; Function constexpr _OI std::fill_n(_OI, _Size, const _Tp&) [with _OI = wchar_t*; _Size = long long unsigned int; _Tp = wchar_t] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__fill_n_a<wchar_t*, long long unsigned int, wchar_t> (__first, std::__size_to_integer (__n), __value, std::__iterator_category<wchar_t*> ((wchar_t * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static constexpr __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::assign(__gnu_cxx::char_traits<_CharT>::char_type*, std::size_t, __gnu_cxx::char_traits<_CharT>::char_type) [with _CharT = wchar_t; __gnu_cxx::char_traits<_CharT>::char_type = wchar_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::fill_n<wchar_t*, long long unsigned int, wchar_t> (__s, __n, (const wchar_t &) &__a) >>>>>;
return <retval> = __s;


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::lt(const char_type&, const char_type&) [with _CharT = char8_t; __gnu_cxx::char_traits<_CharT>::char_type = char8_t] (null)
;; enabled by -tree-original


return <retval> = *__c1 < *__c2;


;; Function static constexpr int __gnu_cxx::char_traits<_CharT>::compare(const char_type*, const char_type*, std::size_t) [with _CharT = char8_t; __gnu_cxx::char_traits<_CharT>::char_type = char8_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.59414>;
    <D.59413>:;
    if (<<cleanup_point __gnu_cxx::char_traits<char8_t>::lt ((const char_type &) (__s1 + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) (__s2 + (sizetype) NON_LVALUE_EXPR <__i>))>>)
      {
        return <retval> = -1;
      }
    else
      {
        if (<<cleanup_point __gnu_cxx::char_traits<char8_t>::lt ((const char_type &) (__s2 + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) (__s1 + (sizetype) NON_LVALUE_EXPR <__i>))>>)
          {
            return <retval> = 1;
          }
      }
    <<cleanup_point (void)  ++__i>>;
    <D.59414>:;
    if (__i < __n) goto <D.59413>; else goto <D.59411>;
    <D.59411>:;
  }
  return <retval> = 0;
}


;; Function static constexpr bool __gnu_cxx::char_traits<_CharT>::eq(const char_type&, const char_type&) [with _CharT = char8_t; __gnu_cxx::char_traits<_CharT>::char_type = char8_t] (null)
;; enabled by -tree-original


return <retval> = *__c1 == *__c2;


;; Function static constexpr std::size_t __gnu_cxx::char_traits<_CharT>::length(const char_type*) [with _CharT = char8_t; std::size_t = long long unsigned int; __gnu_cxx::char_traits<_CharT>::char_type = char8_t] (null)
;; enabled by -tree-original


{
  size_t __i = 0;

  <<cleanup_point   size_t __i = 0;>>;
  goto <D.59430>;
  <D.59431>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__i >>>>>;
  <D.59430>:;
  if (<<cleanup_point !__gnu_cxx::char_traits<char8_t>::eq ((const char_type &) (__p + (sizetype) NON_LVALUE_EXPR <__i>), (const char_type &) &TARGET_EXPR <D.59418, 0>)>>) goto <D.59431>; else goto <D.59429>;
  <D.59429>:;
  return <retval> = __i;
}


;; Function static constexpr const char_type* __gnu_cxx::char_traits<_CharT>::find(const char_type*, std::size_t, const char_type&) [with _CharT = char8_t; __gnu_cxx::char_traits<_CharT>::char_type = char8_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  {
    size_t __i = 0;

    <<cleanup_point     size_t __i = 0;>>;
    goto <D.59445>;
    <D.59444>:;
    if (<<cleanup_point __gnu_cxx::char_traits<char8_t>::eq ((const char_type &) (__s + (sizetype) NON_LVALUE_EXPR <__i>), __a)>>)
      {
        return <retval> = __s + (sizetype) NON_LVALUE_EXPR <__i>;
      }
    <<cleanup_point (void)  ++__i>>;
    <D.59445>:;
    if (__i < __n) goto <D.59444>; else goto <D.59442>;
    <D.59442>:;
  }
  return <retval> = 0B;
}


;; Function constexpr _BI2 std::copy_backward(_BI1, _BI1, _BI2) [with _BI1 = const char8_t*; _BI2 = char8_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_backward_a<false, const char8_t*, char8_t*> (std::__miter_base<const char8_t*> (__first), std::__miter_base<const char8_t*> (__last), __result)>>;


;; Function constexpr _OI std::copy(_II, _II, _OI) [with _II = const char8_t*; _OI = char8_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_a<false, const char8_t*, char8_t*> (std::__miter_base<const char8_t*> (__first), std::__miter_base<const char8_t*> (__last), __result)>>;


;; Function static constexpr __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::move(__gnu_cxx::char_traits<_CharT>::char_type*, const char_type*, std::size_t) [with _CharT = char8_t; __gnu_cxx::char_traits<_CharT>::char_type = char8_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    if ((const char_type *) __s1 > __s2 && __s2 + (sizetype) NON_LVALUE_EXPR <__n> > (const char_type *) __s1)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy_backward<const char8_t*, char8_t*> (__s2, __s2 + (sizetype) NON_LVALUE_EXPR <__n>, __s1 + (sizetype) NON_LVALUE_EXPR <__n>) >>>>>;
      }
    else
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy<const char8_t*, char8_t*> (__s2, __s2 + (sizetype) NON_LVALUE_EXPR <__n>, __s1) >>>>>;
      }
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, NON_LVALUE_EXPR <__n>)>>;


;; Function static constexpr __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::copy(__gnu_cxx::char_traits<_CharT>::char_type*, const char_type*, std::size_t) [with _CharT = char8_t; __gnu_cxx::char_traits<_CharT>::char_type = char8_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy<const char8_t*, char8_t*> (__s2, __s2 + (sizetype) NON_LVALUE_EXPR <__n>, __s1) >>>>>;
return <retval> = __s1;


;; Function constexpr _OI std::fill_n(_OI, _Size, const _Tp&) [with _OI = char8_t*; _Size = long long unsigned int; _Tp = char8_t] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__fill_n_a<char8_t*, long long unsigned int, char8_t> (__first, std::__size_to_integer (__n), __value, std::__iterator_category<char8_t*> ((char8_t * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function static constexpr __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::assign(__gnu_cxx::char_traits<_CharT>::char_type*, std::size_t, __gnu_cxx::char_traits<_CharT>::char_type) [with _CharT = char8_t; __gnu_cxx::char_traits<_CharT>::char_type = char8_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::fill_n<char8_t*, long long unsigned int, char8_t> (__s, __n, (const char8_t &) &__a) >>>>>;
return <retval> = __s;


;; Function constexpr _BI2 std::copy_backward(_BI1, _BI1, _BI2) [with _BI1 = const char16_t*; _BI2 = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_backward_a<false, const char16_t*, char16_t*> (std::__miter_base<const char16_t*> (__first), std::__miter_base<const char16_t*> (__last), __result)>>;


;; Function constexpr _OI std::copy(_II, _II, _OI) [with _II = const char16_t*; _OI = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_a<false, const char16_t*, char16_t*> (std::__miter_base<const char16_t*> (__first), std::__miter_base<const char16_t*> (__last), __result)>>;


;; Function static constexpr __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::move(__gnu_cxx::char_traits<_CharT>::char_type*, const char_type*, std::size_t) [with _CharT = char16_t; __gnu_cxx::char_traits<_CharT>::char_type = char16_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    if ((const char_type *) __s1 > __s2 && __s2 + (sizetype) (__n * 2) > (const char_type *) __s1)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy_backward<const char16_t*, char16_t*> (__s2, __s2 + (sizetype) (__n * 2), __s1 + (sizetype) (__n * 2)) >>>>>;
      }
    else
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy<const char16_t*, char16_t*> (__s2, __s2 + (sizetype) (__n * 2), __s1) >>>>>;
      }
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 2)>>;


;; Function static constexpr __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::copy(__gnu_cxx::char_traits<_CharT>::char_type*, const char_type*, std::size_t) [with _CharT = char16_t; __gnu_cxx::char_traits<_CharT>::char_type = char16_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy<const char16_t*, char16_t*> (__s2, __s2 + (sizetype) (__n * 2), __s1) >>>>>;
return <retval> = __s1;


;; Function constexpr _BI2 std::copy_backward(_BI1, _BI1, _BI2) [with _BI1 = const char32_t*; _BI2 = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_backward_a<false, const char32_t*, char32_t*> (std::__miter_base<const char32_t*> (__first), std::__miter_base<const char32_t*> (__last), __result)>>;


;; Function constexpr _OI std::copy(_II, _II, _OI) [with _II = const char32_t*; _OI = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_a<false, const char32_t*, char32_t*> (std::__miter_base<const char32_t*> (__first), std::__miter_base<const char32_t*> (__last), __result)>>;


;; Function static constexpr __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::move(__gnu_cxx::char_traits<_CharT>::char_type*, const char_type*, std::size_t) [with _CharT = char32_t; __gnu_cxx::char_traits<_CharT>::char_type = char32_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __s1;
  }
if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    if ((const char_type *) __s1 > __s2 && __s2 + (sizetype) (__n * 4) > (const char_type *) __s1)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy_backward<const char32_t*, char32_t*> (__s2, __s2 + (sizetype) (__n * 4), __s1 + (sizetype) (__n * 4)) >>>>>;
      }
    else
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy<const char32_t*, char32_t*> (__s2, __s2 + (sizetype) (__n * 4), __s1) >>>>>;
      }
    return <retval> = __s1;
  }
<<cleanup_point return <retval> = (char_type *) __builtin_memmove ((void *) __s1, (const void *) __s2, __n * 4)>>;


;; Function static constexpr __gnu_cxx::char_traits<_CharT>::char_type* __gnu_cxx::char_traits<_CharT>::copy(__gnu_cxx::char_traits<_CharT>::char_type*, const char_type*, std::size_t) [with _CharT = char32_t; __gnu_cxx::char_traits<_CharT>::char_type = char32_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::copy<const char32_t*, char32_t*> (__s2, __s2 + (sizetype) (__n * 4), __s1) >>>>>;
return <retval> = __s1;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = float; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 4, 3339675911)>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = double; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 8, 3339675911)>>;


;; Function constexpr const value_type* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = char; _Traits = std::char_traits<char>; std::basic_string_view<_CharT, _Traits>::const_pointer = const char*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const value_type *) ((const struct basic_string_view *) this)->_M_str
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = char; _Traits = std::char_traits<char>; std::basic_string_view<_CharT, _Traits>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;


;; Function constexpr const value_type* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; std::basic_string_view<_CharT, _Traits>::const_pointer = const wchar_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const value_type *) ((const struct basic_string_view *) this)->_M_str
   >>>;


;; Function constexpr const value_type* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; std::basic_string_view<_CharT, _Traits>::const_pointer = const char8_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const value_type *) ((const struct basic_string_view *) this)->_M_str
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::size_type std::basic_string_view<_CharT, _Traits>::length() const [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; std::basic_string_view<_CharT, _Traits>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_t) ((const struct basic_string_view *) this)->_M_len
   >>>;


;; Function constexpr const value_type* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; std::basic_string_view<_CharT, _Traits>::const_pointer = const char16_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const value_type *) ((const struct basic_string_view *) this)->_M_str
   >>>;


;; Function constexpr const value_type* std::basic_string_view<_CharT, _Traits>::data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; std::basic_string_view<_CharT, _Traits>::const_pointer = const char32_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const value_type *) ((const struct basic_string_view *) this)->_M_str
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, std::basic_string_view<_CharT, _Traits>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_string_view<_CharT, _Traits>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string_view *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, std::basic_string_view<_CharT, _Traits>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; std::basic_string_view<_CharT, _Traits>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string_view *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, std::basic_string_view<_CharT, _Traits>::size_type) [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; std::basic_string_view<_CharT, _Traits>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string_view *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, std::basic_string_view<_CharT, _Traits>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; std::basic_string_view<_CharT, _Traits>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string_view *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function constexpr std::basic_string_view<_CharT, _Traits>::basic_string_view(const _CharT*, std::basic_string_view<_CharT, _Traits>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; std::basic_string_view<_CharT, _Traits>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string_view *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_len = __len) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string_view *) this)->_M_str = __str) >>>>>;
  }
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.59795>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<long int, int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<long int, int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.59858, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long int, int, char, int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.59925>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    long int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<long int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<long int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.59964, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long int>(long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.60016>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (signed int) __val >= 0 || (signed int) __val < 0;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long unsigned int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long unsigned int __tmp;

    long unsigned int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<long unsigned int>(long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<long unsigned int>(long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long unsigned int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.60055, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long unsigned int>(long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.60098>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2147483648 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long long int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long int __tmp;

    long long int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<long long int>(long long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<long long int>(long long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.60137, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long long int>(long long int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.60180>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val <= 18446744071562067967 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = char; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<long long unsigned int>(long long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<long long unsigned int>(long long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Range_chk::_S_chk ((long long unsigned int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.60219, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long long unsigned int>(long long unsigned int (*)(const char*, char**, int), const char*, const char*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = float; _Ret = float; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = float; _Ret = float; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.60261>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483648e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = char; _Base = {}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  float __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const float __tmp;

    float __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<float>(float (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const float __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<float>(float (*)(const char*, char**), const char*, const char*, std::size_t*)::_Range_chk::_S_chk ((float) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.60300, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (float) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<float>(float (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = double; _Ret = double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = double; _Ret = double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.60342>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = char; _Base = {}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  double __ret;
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const double __tmp;

    double __ret;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<double>(double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<double>(double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Range_chk::_S_chk ((double) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.60381, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<double>(double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.60423>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = char; _Base = {}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long double __ret [value-expr: <retval>];
  char * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long double __tmp;

  (void) 0;
    char * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<long double>(long double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const char *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<long double>(long double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Range_chk::_S_chk ((long double) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.60462, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (<retval> = (long double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) (__endptr - __str)) >>>>>;
        }
      return <retval>;
    }
  finally
    {
      __gnu_cxx::__stoa<long double>(long double (*)(const char*, char**), const char*, const char*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function constexpr std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::new_allocator ((struct new_allocator *) this) >>>>>;
  }
   >>>;


;; Function constexpr std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.60488>:;
   >>>;


;; Function constexpr std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Alloc_hider *) this = {CLOBBER};
    }
}
<D.60530>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT, const _Alloc&) [with <template-parameter-2-1> = std::allocator<char>; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct ((struct basic_string *) this, __n, (int) __c) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct basic_string *) this = {CLOBBER};
      }
  }
  <D.60544>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference = char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


{
  {
    {
      if (__builtin_is_constant_evaluated ())
        {
          {
            extern void __failed_assertion (void);

            if (<<cleanup_point std::__cxx11::basic_string<char>::size ((struct basic_string *) this) < __pos>>)
              {
                <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::__failed_assertion () >>>>>;
              }
          }
        }
      else
        {
          
        }
    }
  }
  <<cleanup_point return <retval> = (value_type &) (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + (sizetype) NON_LVALUE_EXPR <__pos>)>>;
}


;; Function void std::__detail::__to_chars_10_impl(char*, unsigned int, _Tp) [with _Tp = unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    static const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
    unsigned int __pos = __len + 4294967295;

    <<cleanup_point     static const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";>>;
        unsigned int __pos = __len + 4294967295;
    goto <D.60567>;
    <D.60568>:;
    {
      const unsigned int __num = (__val % 100) * 2;

            const unsigned int __num = (__val % 100) * 2;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__val = __val / 100) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__first + (sizetype) __pos) = (char) __digits[(unsigned int) __num + 1]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__first + (sizetype) (__pos + 4294967295)) = (char) __digits[(unsigned int) __num]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__pos = __pos + 4294967294) >>>>>;
    }
    <D.60567>:;
    if (__val > 99) goto <D.60568>; else goto <D.60566>;
    <D.60566>:;
    {
      if (__val > 9)
        {
          {
            const unsigned int __num = __val * 2;

                        const unsigned int __num = __val * 2;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__first + 1) = (char) __digits[(unsigned int) __num + 1]) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <__first> = (char) __digits[(unsigned int) __num]) >>>>>;
          }
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <__first> = (char) ((unsigned char) __val + 48)) >>>>>;
        }
    }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER} >>>>>;
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), (struct allocator &) std::move<std::allocator<char>&> ((struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) __str))) >>>>>;
    try
      {
        if (<<cleanup_point std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) __str)>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char>::copy ((char *) &((struct basic_string *) this)->D.37009._M_local_buf, (const char_type *) &__str->D.37009._M_local_buf, 16) >>>>>;
          }
        else
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str)) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __str->D.37009._M_allocated_capacity) >>>>>;
          }
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_length ((struct basic_string *) this, std::__cxx11::basic_string<char>::length ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) __str, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) __str)) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) __str, 0) >>>>>;
      }
    catch
      {
        std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
      }
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function void std::__detail::__to_chars_10_impl(char*, unsigned int, _Tp) [with _Tp = long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    static const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
    unsigned int __pos = __len + 4294967295;

    <<cleanup_point     static const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";>>;
        unsigned int __pos = __len + 4294967295;
    goto <D.60590>;
    <D.60591>:;
    {
      const long unsigned int __num = (__val % 100) * 2;

            const long unsigned int __num = (__val % 100) * 2;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__val = __val / 100) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__first + (sizetype) __pos) = (char) __digits[(long unsigned int) __num + 1]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__first + (sizetype) (__pos + 4294967295)) = (char) __digits[(long unsigned int) __num]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__pos = __pos + 4294967294) >>>>>;
    }
    <D.60590>:;
    if (__val > 99) goto <D.60591>; else goto <D.60589>;
    <D.60589>:;
    {
      if (__val > 9)
        {
          {
            const long unsigned int __num = __val * 2;

                        const long unsigned int __num = __val * 2;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__first + 1) = (char) __digits[(long unsigned int) __num + 1]) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <__first> = (char) __digits[(long unsigned int) __num]) >>>>>;
          }
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <__first> = (char) ((unsigned char) __val + 48)) >>>>>;
        }
    }
  }
   >>>;


;; Function void std::__detail::__to_chars_10_impl(char*, unsigned int, _Tp) [with _Tp = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    static const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";
    unsigned int __pos = __len + 4294967295;

    <<cleanup_point     static const char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899";>>;
        unsigned int __pos = __len + 4294967295;
    goto <D.60601>;
    <D.60602>:;
    {
      const long long unsigned int __num = (__val % 100) * 2;

            const long long unsigned int __num = (__val % 100) * 2;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__val = __val / 100) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__first + (sizetype) __pos) = (char) __digits[(long long unsigned int) __num + 1]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__first + (sizetype) (__pos + 4294967295)) = (char) __digits[(long long unsigned int) __num]) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__pos = __pos + 4294967294) >>>>>;
    }
    <D.60601>:;
    if (__val > 99) goto <D.60602>; else goto <D.60600>;
    <D.60600>:;
    {
      if (__val > 9)
        {
          {
            const long long unsigned int __num = __val * 2;

                        const long long unsigned int __num = __val * 2;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*(__first + 1) = (char) __digits[(long long unsigned int) __num + 1]) >>>>>;
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <__first> = (char) __digits[(long long unsigned int) __num]) >>>>>;
          }
        }
      else
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*NON_LVALUE_EXPR <__first> = (char) ((unsigned char) __val + 48)) >>>>>;
        }
    }
  }
   >>>;


;; Function _String __gnu_cxx::__to_xstring(int (*)(_CharT*, std::size_t, const _CharT*, char*), std::size_t, const _CharT*, ...) [with _String = std::__cxx11::basic_string<char>; _CharT = char; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  char * __s;
  char * __args;
  const int __len;

    char * __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__s = (char *) __builtin_alloca (NON_LVALUE_EXPR <__n>)) >>>>>;
    char * __args;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__args, __fmt) >>>>>;
    const int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = __convf (__s, __n, __fmt, __args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__args) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.60927, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.60927
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __s
  __s + (sizetype) __len
  (const struct allocator &) &TARGET_EXPR <D.60926, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.60926
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
}


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::c_str() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.60961>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<long int, int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<long int, int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.60995, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long int, int, wchar_t, int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.61029>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long int; _Ret = long int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long int __tmp;

    long int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<long int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<long int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.61063, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long int>(long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.61097>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = (signed int) __val >= 0 || (signed int) __val < 0;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long unsigned int; _Ret = long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long unsigned int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long unsigned int __tmp;

    long unsigned int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<long unsigned int>(long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<long unsigned int>(long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long unsigned int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.61131, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long unsigned int>(long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.61165>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2147483648 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long int; _Ret = long long int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long long int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long int __tmp;

    long long int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<long long int>(long long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<long long int>(long long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long long int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.61199, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long long int>(long long int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.61233>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val <= 18446744071562067967 || __val > 2147483647;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long long unsigned int; _Ret = long long unsigned int; _CharT = wchar_t; _Base = {int}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long long unsigned int __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long long unsigned int __tmp;

    long long unsigned int __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<long long unsigned int>(long long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long long unsigned int __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr, __base#0)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<long long unsigned int>(long long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Range_chk::_S_chk ((long long unsigned int) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.61267, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (long long unsigned int) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<long long unsigned int>(long long unsigned int (*)(const wchar_t*, wchar_t**, int), const char*, const wchar_t*, std::size_t*, int)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.61300>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483648e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = float; _Ret = float; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  float __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const float __tmp;

    float __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<float>(float (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const float __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<float>(float (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Range_chk::_S_chk ((float) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.61334, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (float) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<float>(float (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.61367>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = double; _Ret = double; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  double __ret;
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const double __tmp;

    double __ret;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<double>(double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<double>(double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Range_chk::_S_chk ((double) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.61401, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__ret = (double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval> = __ret;
    }
  finally
    {
      __gnu_cxx::__stoa<double>(double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Save_errno *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Save_errno *) this)->_M_errno = *_errno ()) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = 0) >>>>>;
}


;; Function __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Save_errno::~_Save_errno() [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        if (<<cleanup_point *_errno () == 0>>)
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*_errno () = ((struct _Save_errno *) this)->_M_errno) >>>>>;
          }
      }
    finally
      {
        *(struct _Save_errno *) this = {CLOBBER};
      }
  }
  <D.61434>:;
   >>>;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::false_type) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::false_type = std::integral_constant<bool, false>] (null)
;; enabled by -tree-original


return <retval> = 0;


;; Function static bool __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...)::_Range_chk::_S_chk(_TRet, std::true_type) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


return <retval> = __val < -2.147483648e+9 || __val > 2.147483647e+9;


;; Function _Ret __gnu_cxx::__stoa(_TRet (*)(const _CharT*, _CharT**, _Base ...), const char*, const _CharT*, std::size_t*, _Base ...) [with _TRet = long double; _Ret = long double; _CharT = wchar_t; _Base = {}; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  long double __ret [value-expr: <retval>];
  wchar_t * __endptr;
  typedef extern struct _Save_errno _Save_errno;
  const struct _Save_errno __save_errno;
  typedef extern struct _Range_chk _Range_chk;
  const long double __tmp;

  (void) 0;
    wchar_t * __endptr;
    const struct _Save_errno __save_errno;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::__stoa<long double>(long double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::_Save_errno ((struct _Save_errno *) &__save_errno) >>>>>;
  try
    {
            const long double __tmp;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__tmp = __convf (__str, &__endptr)) >>>>>;
      if ((const wchar_t *) __endptr == __str)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_invalid_argument (__name) >>>>>;
        }
      else
        {
          if (<<cleanup_point *_errno () == 34 || __gnu_cxx::__stoa<long double>(long double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Range_chk::_S_chk ((long double) __tmp, *(struct integral_constant &) &TARGET_EXPR <D.61468, {}>;, <<< Unknown tree: empty_class_expr >>>;)>>)
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range (__name) >>>>>;
            }
          else
            {
              <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (<retval> = (long double) __tmp) >>>>>;
            }
        }
      if (__idx != 0B)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__idx = (size_t) ((__endptr - __str) /[ex] 2)) >>>>>;
        }
      return <retval>;
    }
  finally
    {
      __gnu_cxx::__stoa<long double>(long double (*)(const wchar_t*, wchar_t**), const char*, const wchar_t*, std::size_t*)::_Save_errno::~_Save_errno ((struct _Save_errno *) &__save_errno);
    }
}


;; Function _String __gnu_cxx::__to_xstring(int (*)(_CharT*, std::size_t, const _CharT*, char*), std::size_t, const _CharT*, ...) [with _String = std::__cxx11::basic_string<wchar_t>; _CharT = wchar_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


{
  wchar_t * __s;
  char * __args;
  const int __len;

    wchar_t * __s;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__s = (wchar_t *) __builtin_alloca (__n * 2)) >>>>>;
    char * __args;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_start ((char * &) &__args, __fmt) >>>>>;
    const int __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = __convf (__s, __n, __fmt, __args)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  __builtin_va_end ((char * &) &__args) >>>>>;
  <<cleanup_point return *<retval> = TARGET_EXPR <D.61740, <<< Unknown tree: aggr_init_expr
  7
  __ct_comp 
  D.61740
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  __s
  __s + (sizetype) ((long long unsigned int) __len * 2)
  (const struct allocator &) &TARGET_EXPR <D.61739, <<< Unknown tree: aggr_init_expr
  4
  __ct_comp 
  D.61739
  (struct allocator *) <<< Unknown tree: void_cst >>> >>>> >>>>>>;
}


;; Function constexpr std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<wchar_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Alloc_hider *) this = {CLOBBER};
    }
}
<D.61744>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct basic_string *) this = {CLOBBER};
      }
  }
  <D.61742>:;
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char8_t *) std::__cxx11::basic_string<char8_t>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char16_t *) std::__cxx11::basic_string<char16_t>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function const _CharT* std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char32_t *) std::__cxx11::basic_string<char32_t>::_M_data ((const struct basic_string *) this)>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (size_type) ((const struct basic_string *) this)->_M_string_length
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<const char*> ((struct basic_string *) this, __s, __s + (sizetype) NON_LVALUE_EXPR <__n>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function constexpr std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::new_allocator ((struct new_allocator *) this) >>>>>;
  }
   >>>;


;; Function constexpr std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.61796>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 2)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function constexpr std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char8_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char8_t>::new_allocator ((struct new_allocator *) this) >>>>>;
  }
   >>>;


;; Function constexpr std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char8_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.61858>:;
   >>>;


;; Function constexpr std::__cxx11::basic_string<char8_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char8_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Alloc_hider *) this = {CLOBBER};
    }
}
<D.61901>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char8_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char8_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char8_t>::_M_construct<const char8_t*> ((struct basic_string *) this, __s, __s + (sizetype) NON_LVALUE_EXPR <__n>) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char8_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char8_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char8_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct basic_string *) this = {CLOBBER};
      }
  }
  <D.61919>:;
   >>>;


;; Function constexpr std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::new_allocator ((struct new_allocator *) this) >>>>>;
  }
   >>>;


;; Function constexpr std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.61941>:;
   >>>;


;; Function constexpr std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char16_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Alloc_hider *) this = {CLOBBER};
    }
}
<D.61984>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char16_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 2)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char16_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct basic_string *) this = {CLOBBER};
      }
  }
  <D.62002>:;
   >>>;


;; Function constexpr std::allocator< <template-parameter-1-1> >::allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::new_allocator ((struct new_allocator *) this) >>>>>;
  }
   >>>;


;; Function constexpr std::allocator< <template-parameter-1-1> >::~allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
  <D.62024>:;
   >>>;


;; Function constexpr std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider() (null)
;; enabled by -tree-original


{
  try
    {
      try
        {
          
        }
      finally
        {
          std::allocator<char32_t>::~allocator ((struct allocator *) this);
        }
    }
  finally
    {
      *(struct _Alloc_hider *) this = {CLOBBER};
    }
}
<D.62067>:;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char32_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*> ((struct basic_string *) this, __s, __s + (sizetype) (__n * 4)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::~basic_string() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    try
      {
        try
          {
            <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_dispose ((struct basic_string *) this) >>>>>;
          }
        finally
          {
            std::__cxx11::basic_string<char32_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
          }
      }
    finally
      {
        *(struct basic_string *) this = {CLOBBER};
      }
  }
  <D.62085>:;
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  struct basic_string __str [value-expr: *<retval>];

  (void) 0;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::basic_string ((struct basic_string *) <retval>, __lhs) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__cxx11::basic_string<char>::append ((struct basic_string *) <retval>, __rhs) >>>>>;
      <<cleanup_point return <retval>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::~basic_string ((struct basic_string *) <retval>);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator> std::operator+(std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&&, std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Alloc_traits _Alloc_traits;
  bool __use_rhs = 0;

  <<cleanup_point   bool __use_rhs = 0;>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__use_rhs = 1) >>>>>;
  {
    if (__use_rhs)
      {
        {
          const long long unsigned int __size;

                    const long long unsigned int __size;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__size = std::__cxx11::basic_string<char>::size ((struct basic_string *) __lhs) + std::__cxx11::basic_string<char>::size ((struct basic_string *) __rhs)) >>>>>;
          if (<<cleanup_point std::__cxx11::basic_string<char>::capacity ((struct basic_string *) __lhs) < (long long unsigned int) __size && std::__cxx11::basic_string<char>::capacity ((struct basic_string *) __rhs) >= (long long unsigned int) __size>>)
            {
              <<cleanup_point return *<retval> = TARGET_EXPR <D.62442, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.62442
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  (struct basic_string &) std::move<std::__cxx11::basic_string<char>&> (std::__cxx11::basic_string<char>::insert ((struct basic_string *) __rhs, 0, (const struct basic_string &) __lhs)) >>>>>>;
            }
        }
      }
  }
  <<cleanup_point return *<retval> = TARGET_EXPR <D.62445, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.62445
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  (struct basic_string &) std::move<std::__cxx11::basic_string<char>&> (std::__cxx11::basic_string<char>::append ((struct basic_string *) __lhs, (const struct basic_string &) __rhs)) >>>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator> std::operator+(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.62619, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.62619
  (struct basic_string *) <<< Unknown tree: void_cst >>>
  (struct basic_string &) std::move<std::__cxx11::basic_string<char>&> (std::__cxx11::basic_string<char>::insert ((struct basic_string *) __rhs, 0, __lhs)) >>>>>>;


;; Function static std::size_t std::_Hash_impl::hash(const _Tp&) [with _Tp = int; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 4, 3339675911)>>;


;; Function static std::size_t std::_Hash_impl::__hash_combine(const _Tp&, std::size_t) [with _Tp = const std::_V2::error_category*; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::_Hash_impl::hash ((const void *) __val, 8, __hash)>>;


;; Function std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*) [with _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


if (__s == 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::setstate ((struct basic_ios *) __out + (sizetype) *(long long int *) (((struct basic_ostream *) __out)->_vptr.basic_ostream + 18446744073709551592), 1) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::__ostream_insert<char, std::char_traits<char> > (__out, __s, (streamsize) std::char_traits<char>::length (__s)) >>>>>;
  }
return <retval> = __out;


;; Function std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (struct __ostream_type &) std::basic_ostream<char>::_M_insert<long long unsigned int> ((struct basic_ostream *) this, __n)>>;


;; Function std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = __pf ((struct __ostream_type &) this)>>;


;; Function std::basic_ostream<_CharT, _Traits>& std::endl(std::basic_ostream<_CharT, _Traits>&) [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::flush<char, std::char_traits<char> > (std::basic_ostream<char>::put ((struct basic_ostream *) __os, (int) std::basic_ios<char>::widen ((struct basic_ios *) __os + (sizetype) *(long long int *) (((struct basic_ostream *) __os)->_vptr.basic_ostream + 18446744073709551592), 10)))>>;


;; Function constexpr _Iterator std::__miter_base(_Iterator) [with _Iterator = const char*] (null)
;; enabled by -tree-original


return <retval> = __it;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = const char*; long long unsigned int <anonymous> = 8; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.62767, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = char*; long long unsigned int <anonymous> = 8; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.62914, {}>>>;


;; Function constexpr _OI std::__copy_move_backward_a(_II, _II, _OI) [with bool _IsMove = false; _II = const char*; _OI = char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__niter_wrap<char*> ((char * const &) &__result, std::__copy_move_backward_a1<false, const char*, char*> (std::__niter_base<const char*> (__first), std::__niter_base<const char*> (__last), std::__niter_base<char*> (__result)))>>;


;; Function constexpr _OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = const char*; _OI = char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__niter_wrap<char*> ((char * const &) &__result, std::__copy_move_a1<false, const char*, char*> (std::__niter_base<const char*> (__first), std::__niter_base<const char*> (__last), std::__niter_base<char*> (__result)))>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = char*; typename std::iterator_traits< <template-parameter-1-1> >::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63021, {.D.14122={.D.14118={.D.14114={}}}}>>>;


;; Function constexpr _OutputIterator std::__fill_n_a(_OutputIterator, _Size, const _Tp&, std::random_access_iterator_tag) [with _OutputIterator = char*; _Size = long long unsigned int; _Tp = char] (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __first;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::__fill_a<char*, char> (__first, __first + (sizetype) NON_LVALUE_EXPR <__n>, __value) >>>>>;
return <retval> = __first + (sizetype) NON_LVALUE_EXPR <__n>;


;; Function constexpr _Iterator std::__miter_base(_Iterator) [with _Iterator = const wchar_t*] (null)
;; enabled by -tree-original


return <retval> = __it;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = const wchar_t*; long long unsigned int <anonymous> = 8; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63182, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = wchar_t*; long long unsigned int <anonymous> = 8; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63329, {}>>>;


;; Function constexpr _OI std::__copy_move_backward_a(_II, _II, _OI) [with bool _IsMove = false; _II = const wchar_t*; _OI = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__niter_wrap<wchar_t*> ((wchar_t * const &) &__result, std::__copy_move_backward_a1<false, const wchar_t*, wchar_t*> (std::__niter_base<const wchar_t*> (__first), std::__niter_base<const wchar_t*> (__last), std::__niter_base<wchar_t*> (__result)))>>;


;; Function constexpr _OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = const wchar_t*; _OI = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__niter_wrap<wchar_t*> ((wchar_t * const &) &__result, std::__copy_move_a1<false, const wchar_t*, wchar_t*> (std::__niter_base<const wchar_t*> (__first), std::__niter_base<const wchar_t*> (__last), std::__niter_base<wchar_t*> (__result)))>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = wchar_t*; typename std::iterator_traits< <template-parameter-1-1> >::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63364, {.D.14122={.D.14118={.D.14114={}}}}>>>;


;; Function constexpr _OutputIterator std::__fill_n_a(_OutputIterator, _Size, const _Tp&, std::random_access_iterator_tag) [with _OutputIterator = wchar_t*; _Size = long long unsigned int; _Tp = wchar_t] (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __first;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::__fill_a<wchar_t*, wchar_t> (__first, __first + (sizetype) (__n * 2), __value) >>>>>;
return <retval> = __first + (sizetype) (__n * 2);


;; Function constexpr _Iterator std::__miter_base(_Iterator) [with _Iterator = const char8_t*] (null)
;; enabled by -tree-original


return <retval> = __it;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = const char8_t*; long long unsigned int <anonymous> = 8; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63531, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = char8_t*; long long unsigned int <anonymous> = 8; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63678, {}>>>;


;; Function constexpr _OI std::__copy_move_backward_a(_II, _II, _OI) [with bool _IsMove = false; _II = const char8_t*; _OI = char8_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__niter_wrap<char8_t*> ((char8_t * const &) &__result, std::__copy_move_backward_a1<false, const char8_t*, char8_t*> (std::__niter_base<const char8_t*> (__first), std::__niter_base<const char8_t*> (__last), std::__niter_base<char8_t*> (__result)))>>;


;; Function constexpr _OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = const char8_t*; _OI = char8_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__niter_wrap<char8_t*> ((char8_t * const &) &__result, std::__copy_move_a1<false, const char8_t*, char8_t*> (std::__niter_base<const char8_t*> (__first), std::__niter_base<const char8_t*> (__last), std::__niter_base<char8_t*> (__result)))>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = char8_t*; typename std::iterator_traits< <template-parameter-1-1> >::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63713, {.D.14122={.D.14118={.D.14114={}}}}>>>;


;; Function constexpr _OutputIterator std::__fill_n_a(_OutputIterator, _Size, const _Tp&, std::random_access_iterator_tag) [with _OutputIterator = char8_t*; _Size = long long unsigned int; _Tp = char8_t] (null)
;; enabled by -tree-original


if (__n == 0)
  {
    return <retval> = __first;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::__fill_a<char8_t*, char8_t> (__first, __first + (sizetype) NON_LVALUE_EXPR <__n>, __value) >>>>>;
return <retval> = __first + (sizetype) NON_LVALUE_EXPR <__n>;


;; Function constexpr _Iterator std::__miter_base(_Iterator) [with _Iterator = const char16_t*] (null)
;; enabled by -tree-original


return <retval> = __it;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = const char16_t*; long long unsigned int <anonymous> = 8; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.63880, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = char16_t*; long long unsigned int <anonymous> = 8; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.64027, {}>>>;


;; Function constexpr _OI std::__copy_move_backward_a(_II, _II, _OI) [with bool _IsMove = false; _II = const char16_t*; _OI = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__niter_wrap<char16_t*> ((char16_t * const &) &__result, std::__copy_move_backward_a1<false, const char16_t*, char16_t*> (std::__niter_base<const char16_t*> (__first), std::__niter_base<const char16_t*> (__last), std::__niter_base<char16_t*> (__result)))>>;


;; Function constexpr _OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = const char16_t*; _OI = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__niter_wrap<char16_t*> ((char16_t * const &) &__result, std::__copy_move_a1<false, const char16_t*, char16_t*> (std::__niter_base<const char16_t*> (__first), std::__niter_base<const char16_t*> (__last), std::__niter_base<char16_t*> (__result)))>>;


;; Function constexpr _Iterator std::__miter_base(_Iterator) [with _Iterator = const char32_t*] (null)
;; enabled by -tree-original


return <retval> = __it;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = const char32_t*; long long unsigned int <anonymous> = 8; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.64208, {}>>>;


;; Function constexpr std::true_type std::__is_complete_or_unbounded(std::__type_identity<_Tp>) [with _Tp = char32_t*; long long unsigned int <anonymous> = 8; std::true_type = std::integral_constant<bool, true>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.64355, {}>>>;


;; Function constexpr _OI std::__copy_move_backward_a(_II, _II, _OI) [with bool _IsMove = false; _II = const char32_t*; _OI = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__niter_wrap<char32_t*> ((char32_t * const &) &__result, std::__copy_move_backward_a1<false, const char32_t*, char32_t*> (std::__niter_base<const char32_t*> (__first), std::__niter_base<const char32_t*> (__last), std::__niter_base<char32_t*> (__result)))>>;


;; Function constexpr _OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II = const char32_t*; _OI = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__niter_wrap<char32_t*> ((char32_t * const &) &__result, std::__copy_move_a1<false, const char32_t*, char32_t*> (std::__niter_base<const char32_t*> (__first), std::__niter_base<const char32_t*> (__last), std::__niter_base<char32_t*> (__result)))>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


return <retval> = (char *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char *) std::pointer_traits<char*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.37009._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (__n > 15)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__n, 0)) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __n) >>>>>;
  }
if (__n != 0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_assign (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __n, (int) __c) >>>>>;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, __n) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.37009._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::__cxx11::basic_string<char>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = std::allocator<char>&; typename std::remove_reference<_Tp>::type = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, _Alloc&&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char>::allocator ((struct allocator *) this, (const struct allocator &) std::move<std::allocator<char>&> ((struct allocator &) __a)) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char>::~allocator ((struct allocator *) this);
    }
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.37009._M_allocated_capacity = __capacity) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + (sizetype) NON_LVALUE_EXPR <__n>), (const char_type &) &TARGET_EXPR <D.64441, 0>) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = char*; <template-parameter-2-2> = void; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> ((struct basic_string *) this, __beg, __end) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


return <retval> = (wchar_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(_InputIterator, _InputIterator, const _Alloc&) [with _InputIterator = wchar_t*; <template-parameter-2-2> = void; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<wchar_t>::_M_local_data ((struct basic_string *) this), __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<wchar_t*> ((struct basic_string *) this, __beg, __end) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<wchar_t>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<wchar_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.38940._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char8_t*] (null)
;; enabled by -tree-original


return <retval> = (char8_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


return <retval> = (char16_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


return <retval> = (char32_t *) ((const struct basic_string *) this)->_M_dataplus._M_p;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct_aux<const char*> ((struct basic_string *) this, __beg, __end, <<< Unknown tree: empty_class_expr >>>) >>>>>;
}


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (wchar_t *) std::pointer_traits<wchar_t*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.38940._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<wchar_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<wchar_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct_aux<const wchar_t*> ((struct basic_string *) this, __beg, __end, <<< Unknown tree: empty_class_expr >>>) >>>>>;
}


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char8_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char8_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char8_t *) std::pointer_traits<char8_t*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.40502._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char8_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char8_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char8_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char8_t*; _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char8_t>::_M_construct_aux<const char8_t*> ((struct basic_string *) this, __beg, __end, <<< Unknown tree: empty_class_expr >>>) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char8_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char8_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.40502._M_allocated_capacity) >>>>>;
  }


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) std::pointer_traits<char16_t*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.41898._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char16_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char16_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct_aux<const char16_t*> ((struct basic_string *) this, __beg, __end, <<< Unknown tree: empty_class_expr >>>) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char16_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.41898._M_allocated_capacity) >>>>>;
  }


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::new_allocator() [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) std::pointer_traits<char32_t*>::pointer_to ((__make_not_void &) &((struct basic_string *) this)->D.43294._M_local_buf)>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_Alloc_hider::_Alloc_hider(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer, const _Alloc&) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct _Alloc_hider *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char32_t>::allocator ((struct allocator *) this, __a) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct _Alloc_hider *) this)->_M_p = __dat) >>>>>;
    }
  catch
    {
      std::allocator<char32_t>::~allocator ((struct allocator *) this);
    }
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct_aux<const char32_t*> ((struct basic_string *) this, __beg, __end, <<< Unknown tree: empty_class_expr >>>) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_dispose() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


if (<<cleanup_point !std::__cxx11::basic_string<char32_t>::_M_is_local ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_destroy ((struct basic_string *) this, ((struct basic_string *) this)->D.43294._M_allocated_capacity) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  *(struct basic_string *) this = {CLOBBER} >>>>>;
{
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_Alloc_hider::_Alloc_hider (&((struct basic_string *) this)->_M_dataplus, std::__cxx11::basic_string<char>::_M_local_data ((struct basic_string *) this), (struct allocator &) &TARGET_EXPR <D.64726, <<< Unknown tree: aggr_init_expr
  4
  _S_select_on_copy
  D.64726
  (const struct allocator &) std::__cxx11::basic_string<char>::_M_get_allocator ((const struct basic_string *) __str) >>>>) >>>>>;
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str) + (sizetype) std::__cxx11::basic_string<char>::length ((const struct basic_string *) __str)) >>>>>;
    }
  catch
    {
      std::__cxx11::basic_string<char>::_Alloc_hider::~_Alloc_hider (&((struct basic_string *) this)->_M_dataplus);
    }
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  const size_type __n;

    const size_type __n;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__n = std::char_traits<char>::length (__s)) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_check_length ((struct basic_string *) this, 0, (size_type) __n, (const char *) "basic_string::append") >>>>>;
  <<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_append ((struct basic_string *) this, __s, (size_type) __n)>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::capacity() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_is_local ((const struct basic_string *) this) ? 15 : (size_type) ((const struct basic_string *) this)->D.37009._M_allocated_capacity>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::replace ((struct basic_string *) this, __pos1, 0, (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::size ((const struct basic_string *) __str))>>;


;; Function constexpr typename std::remove_reference<_Tp>::type&& std::move(_Tp&&) [with _Tp = std::__cxx11::basic_string<char>&; typename std::remove_reference<_Tp>::type = std::__cxx11::basic_string<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (struct type &) __t
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_append ((struct basic_string *) this, (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) __str), std::__cxx11::basic_string<char>::size ((const struct basic_string *) __str))>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::replace ((struct basic_string *) this, __pos, 0, __s, std::char_traits<char>::length (__s))>>;


;; Function void std::basic_ios<_CharT, _Traits>::setstate(std::ios_base::iostate) [with _CharT = char; _Traits = std::char_traits<char>; std::ios_base::iostate = std::ios_base::iostate] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::basic_ios<char>::clear ((struct basic_ios *) this, std::operator| (std::basic_ios<char>::rdstate ((struct basic_ios *) this), __state)) >>>>>;


;; Function std::basic_ios<_CharT, _Traits>::char_type std::basic_ios<_CharT, _Traits>::widen(char) const [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ios<_CharT, _Traits>::char_type = char] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::ctype<char>::widen ((const struct ctype *) std::__check_facet<std::ctype<char> > ((const struct __ctype_type *) ((const struct basic_ios *) this)->_M_ctype), (int) __c)>>;


;; Function std::basic_ostream<_CharT, _Traits>& std::flush(std::basic_ostream<_CharT, _Traits>&) [with _CharT = char; _Traits = std::char_traits<char>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::basic_ostream<char>::flush ((struct basic_ostream *) __os)>>;


;; Function constexpr _Iterator std::__niter_base(_Iterator) [with _Iterator = const char*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __it
   >>>;


;; Function constexpr _Iterator std::__niter_base(_Iterator) [with _Iterator = char*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __it
   >>>;


;; Function constexpr _BI2 std::__copy_move_backward_a1(_BI1, _BI1, _BI2) [with bool _IsMove = false; _BI1 = const char*; _BI2 = char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_backward_a2<false, const char*, char*> (__first, __last, __result)>>;


;; Function constexpr _Iterator std::__niter_wrap(const _Iterator&, _Iterator) [with _Iterator = char*] (null)
;; enabled by -tree-original


return <retval> = __res;


;; Function constexpr _OI std::__copy_move_a1(_II, _II, _OI) [with bool _IsMove = false; _II = const char*; _OI = char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_a2<false, const char*, char*> (__first, __last, __result)>>;


;; Function constexpr void std::__fill_a(_FIte, _FIte, const _Tp&) [with _FIte = char*; _Tp = char] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__fill_a1<char> (__first, __last, __value) >>>>>;


;; Function constexpr _Iterator std::__niter_base(_Iterator) [with _Iterator = const wchar_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __it
   >>>;


;; Function constexpr _Iterator std::__niter_base(_Iterator) [with _Iterator = wchar_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __it
   >>>;


;; Function constexpr _BI2 std::__copy_move_backward_a1(_BI1, _BI1, _BI2) [with bool _IsMove = false; _BI1 = const wchar_t*; _BI2 = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_backward_a2<false, const wchar_t*, wchar_t*> (__first, __last, __result)>>;


;; Function constexpr _Iterator std::__niter_wrap(const _Iterator&, _Iterator) [with _Iterator = wchar_t*] (null)
;; enabled by -tree-original


return <retval> = __res;


;; Function constexpr _OI std::__copy_move_a1(_II, _II, _OI) [with bool _IsMove = false; _II = const wchar_t*; _OI = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_a2<false, const wchar_t*, wchar_t*> (__first, __last, __result)>>;


;; Function constexpr void std::__fill_a(_FIte, _FIte, const _Tp&) [with _FIte = wchar_t*; _Tp = wchar_t] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__fill_a1<wchar_t*, wchar_t> (__first, __last, __value) >>>>>;


;; Function constexpr _Iterator std::__niter_base(_Iterator) [with _Iterator = const char8_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __it
   >>>;


;; Function constexpr _Iterator std::__niter_base(_Iterator) [with _Iterator = char8_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __it
   >>>;


;; Function constexpr _BI2 std::__copy_move_backward_a1(_BI1, _BI1, _BI2) [with bool _IsMove = false; _BI1 = const char8_t*; _BI2 = char8_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_backward_a2<false, const char8_t*, char8_t*> (__first, __last, __result)>>;


;; Function constexpr _Iterator std::__niter_wrap(const _Iterator&, _Iterator) [with _Iterator = char8_t*] (null)
;; enabled by -tree-original


return <retval> = __res;


;; Function constexpr _OI std::__copy_move_a1(_II, _II, _OI) [with bool _IsMove = false; _II = const char8_t*; _OI = char8_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_a2<false, const char8_t*, char8_t*> (__first, __last, __result)>>;


;; Function constexpr void std::__fill_a(_FIte, _FIte, const _Tp&) [with _FIte = char8_t*; _Tp = char8_t] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__fill_a1<char8_t> (__first, __last, __value) >>>>>;


;; Function constexpr _Iterator std::__niter_base(_Iterator) [with _Iterator = const char16_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __it
   >>>;


;; Function constexpr _Iterator std::__niter_base(_Iterator) [with _Iterator = char16_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __it
   >>>;


;; Function constexpr _BI2 std::__copy_move_backward_a1(_BI1, _BI1, _BI2) [with bool _IsMove = false; _BI1 = const char16_t*; _BI2 = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_backward_a2<false, const char16_t*, char16_t*> (__first, __last, __result)>>;


;; Function constexpr _Iterator std::__niter_wrap(const _Iterator&, _Iterator) [with _Iterator = char16_t*] (null)
;; enabled by -tree-original


return <retval> = __res;


;; Function constexpr _OI std::__copy_move_a1(_II, _II, _OI) [with bool _IsMove = false; _II = const char16_t*; _OI = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_a2<false, const char16_t*, char16_t*> (__first, __last, __result)>>;


;; Function constexpr _Iterator std::__niter_base(_Iterator) [with _Iterator = const char32_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __it
   >>>;


;; Function constexpr _Iterator std::__niter_base(_Iterator) [with _Iterator = char32_t*] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = __it
   >>>;


;; Function constexpr _BI2 std::__copy_move_backward_a1(_BI1, _BI1, _BI2) [with bool _IsMove = false; _BI1 = const char32_t*; _BI2 = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_backward_a2<false, const char32_t*, char32_t*> (__first, __last, __result)>>;


;; Function constexpr _Iterator std::__niter_wrap(const _Iterator&, _Iterator) [with _Iterator = char32_t*] (null)
;; enabled by -tree-original


return <retval> = __res;


;; Function constexpr _OI std::__copy_move_a1(_II, _II, _OI) [with bool _IsMove = false; _II = const char32_t*; _OI = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__copy_move_a2<false, const char32_t*, char32_t*> (__first, __last, __result)>>;


;; Function static constexpr _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = char; std::pointer_traits<_Tp*>::pointer = char*; std::__make_not_void<_Tp> = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char *) std::addressof<char> ((char &) __r)>>
   >>>;


;; Function constexpr std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<char>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (char *) std::allocator_traits<std::allocator<char> >::allocate ((struct allocator_type &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_assign(_CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) &__c) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char>::assign (__d, __n, (int) __c) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char *) std::pointer_traits<const char*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.37009._M_local_buf)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct_aux<char*> ((struct basic_string *) this, __beg, __end, <<< Unknown tree: empty_class_expr >>>) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator) [with _InIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Integral _Integral;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct_aux<wchar_t*> ((struct basic_string *) this, __beg, __end, <<< Unknown tree: empty_class_expr >>>) >>>>>;
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const wchar_t *) std::__cxx11::basic_string<wchar_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<wchar_t>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<wchar_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<wchar_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<const char*> ((struct basic_string *) this, __beg, __end, *(struct forward_iterator_tag &) &TARGET_EXPR <D.65214, {.D.14122={.D.14118={.D.14114={}}}}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function static constexpr _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = wchar_t; std::pointer_traits<_Tp*>::pointer = wchar_t*; std::__make_not_void<_Tp> = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (wchar_t *) std::addressof<wchar_t> ((wchar_t &) __r)>>
   >>>;


;; Function constexpr std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<const wchar_t*> ((struct basic_string *) this, __beg, __end, *(struct forward_iterator_tag &) &TARGET_EXPR <D.65337, {.D.14122={.D.14118={.D.14114={}}}}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function static constexpr _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = char8_t; std::pointer_traits<_Tp*>::pointer = char8_t*; std::__make_not_void<_Tp> = char8_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char8_t *) std::addressof<char8_t> ((char8_t &) __r)>>
   >>>;


;; Function constexpr std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char8_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char8_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char8_t*; _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char8_t>::_M_construct<const char8_t*> ((struct basic_string *) this, __beg, __end, *(struct forward_iterator_tag &) &TARGET_EXPR <D.65460, {.D.14122={.D.14118={.D.14114={}}}}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char8_t *) std::__cxx11::basic_string<char8_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char8_t>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char8_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char8_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char8_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function static constexpr _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = char16_t; std::pointer_traits<_Tp*>::pointer = char16_t*; std::__make_not_void<_Tp> = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char16_t *) std::addressof<char16_t> ((char16_t &) __r)>>
   >>>;


;; Function constexpr std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_construct<const char16_t*> ((struct basic_string *) this, __beg, __end, *(struct forward_iterator_tag &) &TARGET_EXPR <D.65586, {.D.14122={.D.14118={.D.14114={}}}}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char16_t *) std::__cxx11::basic_string<char16_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char16_t>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char16_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function static constexpr _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = char32_t; std::pointer_traits<_Tp*>::pointer = char32_t*; std::__make_not_void<_Tp> = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (char32_t *) std::addressof<char32_t> ((char32_t &) __r)>>
   >>>;


;; Function constexpr std::allocator< <template-parameter-1-1> >::allocator(const std::allocator< <template-parameter-1-1> >&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::new_allocator ((struct new_allocator *) this, (const struct new_allocator &) __a) >>>>>;
  }
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_construct<const char32_t*> ((struct basic_string *) this, __beg, __end, *(struct forward_iterator_tag &) &TARGET_EXPR <D.65712, {.D.14122={.D.14118={.D.14114={}}}}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_is_local() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char32_t *) std::__cxx11::basic_string<char32_t>::_M_data ((const struct basic_string *) this) == std::__cxx11::basic_string<char32_t>::_M_local_data ((const struct basic_string *) this)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_destroy(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator_traits<std::allocator<char32_t> >::deallocate ((struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) this), std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this), __size + 1) >>>>>
   >>>;


;; Function static constexpr _Alloc __gnu_cxx::__alloc_traits<_Alloc, <template-parameter-1-2> >::_S_select_on_copy(const _Alloc&) [with _Alloc = std::allocator<char>; <template-parameter-1-2> = char] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.65729, <<< Unknown tree: aggr_init_expr
  4
  select_on_container_copy_construction
  D.65729
  (const struct allocator_type &) __a >>>>>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::__cxx11::basic_string<char>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_check_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const char*) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__cxx11::basic_string<char>::max_size ((const struct basic_string *) this) + (__n1 - std::__cxx11::basic_string<char>::size ((const struct basic_string *) this)) < __n2>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error (__s) >>>>>;
  }


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_append(const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


{
  const size_type __len;

    const size_type __len;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__len = std::__cxx11::basic_string<char>::size ((struct basic_string *) this) + __n) >>>>>;
  if (<<cleanup_point std::__cxx11::basic_string<char>::capacity ((struct basic_string *) this) >= (long long unsigned int) __len>>)
    {
      if (__n != 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + (sizetype) std::__cxx11::basic_string<char>::size ((struct basic_string *) this), __s, __n) >>>>>;
        }
    }
  else
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_mutate ((struct basic_string *) this, std::__cxx11::basic_string<char>::size ((struct basic_string *) this), 0, __s, __n) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, (size_type) __len) >>>>>;
  return <retval> = (struct basic_string &) this;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__cxx11::basic_string<char>::_M_replace ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_check ((struct basic_string *) this, __pos, (const char *) "basic_string::replace"), std::__cxx11::basic_string<char>::_M_limit ((struct basic_string *) this, __pos, __n1), __s, __n2)>>;


;; Function std::ios_base::iostate std::basic_ios<_CharT, _Traits>::rdstate() const [with _CharT = char; _Traits = std::char_traits<char>; std::ios_base::iostate = std::ios_base::iostate] (null)
;; enabled by -tree-original


return <retval> = (iostate) ((const struct basic_ios *) this)->D.54763._M_streambuf_state;


;; Function const _Facet& std::__check_facet(const _Facet*) [with _Facet = std::ctype<char>] (null)
;; enabled by -tree-original


if (__f == 0B)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_cast () >>>>>;
  }
return <retval> = (const struct ctype &) NON_LVALUE_EXPR <__f>;


;; Function constexpr _BI2 std::__copy_move_backward_a2(_BI1, _BI1, _BI2) [with bool _IsMove = false; _BI1 = const char*; _BI2 = char*] (null)
;; enabled by -tree-original


{
  typedef struct _Category _Category;

  if (<<cleanup_point std::is_constant_evaluated ()>>)
    {
      <<cleanup_point return <retval> = std::__copy_move_backward<false, false, std::random_access_iterator_tag>::__copy_move_b<const char*, char*> (__first, __last, __result)>>;
    }
  <<cleanup_point return <retval> = std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<char> (__first, __last, __result)>>;
}


;; Function constexpr _OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = const char*; _OI = char*] (null)
;; enabled by -tree-original


{
  typedef struct _Category _Category;

  if (<<cleanup_point std::is_constant_evaluated ()>>)
    {
      <<cleanup_point return <retval> = std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m<const char*, char*> (__first, __last, __result)>>;
    }
  <<cleanup_point return <retval> = std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<char> (__first, __last, __result)>>;
}


;; Function constexpr typename __gnu_cxx::__enable_if<std::__is_byte<_Tp>::__value, void>::__type std::__fill_a1(_Tp*, _Tp*, const _Tp&) [with _Tp = char; typename __gnu_cxx::__enable_if<std::__is_byte<_Tp>::__value, void>::__type = void] (null)
;; enabled by -tree-original


{
  const char __tmp = (char) *__c;

    const char __tmp = (char) *__c;
  if (<<cleanup_point std::is_constant_evaluated ()>>)
    {
      goto <D.65832>;
      <D.65831>:;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__first = (char) __tmp) >>>>>;
      <<cleanup_point (void)  ++__first>>;
      <D.65832>:;
      if (__first != __last) goto <D.65831>; else goto <D.65829>;
      <D.65829>:;
      return;
    }
  {
    const size_t __len = (size_t) (__last - __first);

        const size_t __len = (size_t) (__last - __first);
    if (__len != 0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memset ((void *) __first, (int) (unsigned char) __tmp, (size_t) __len) >>>>>;
      }
  }
}


;; Function constexpr _BI2 std::__copy_move_backward_a2(_BI1, _BI1, _BI2) [with bool _IsMove = false; _BI1 = const wchar_t*; _BI2 = wchar_t*] (null)
;; enabled by -tree-original


{
  typedef struct _Category _Category;

  if (<<cleanup_point std::is_constant_evaluated ()>>)
    {
      <<cleanup_point return <retval> = std::__copy_move_backward<false, false, std::random_access_iterator_tag>::__copy_move_b<const wchar_t*, wchar_t*> (__first, __last, __result)>>;
    }
  <<cleanup_point return <retval> = std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<wchar_t> (__first, __last, __result)>>;
}


;; Function constexpr _OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = const wchar_t*; _OI = wchar_t*] (null)
;; enabled by -tree-original


{
  typedef struct _Category _Category;

  if (<<cleanup_point std::is_constant_evaluated ()>>)
    {
      <<cleanup_point return <retval> = std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m<const wchar_t*, wchar_t*> (__first, __last, __result)>>;
    }
  <<cleanup_point return <retval> = std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<wchar_t> (__first, __last, __result)>>;
}


;; Function constexpr typename __gnu_cxx::__enable_if<std::__is_scalar<_Tp>::__value, void>::__type std::__fill_a1(_ForwardIterator, _ForwardIterator, const _Tp&) [with _ForwardIterator = wchar_t*; _Tp = wchar_t; typename __gnu_cxx::__enable_if<std::__is_scalar<_Tp>::__value, void>::__type = void] (null)
;; enabled by -tree-original


{
  const wchar_t __tmp = (wchar_t) *__value;

    const wchar_t __tmp = (wchar_t) *__value;
  goto <D.65893>;
  <D.65892>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__first = (wchar_t) __tmp) >>>>>;
  <<cleanup_point (void)  ++__first>>;
  <D.65893>:;
  if (__first != __last) goto <D.65892>; else goto <D.65890>;
  <D.65890>:;
}


;; Function constexpr _BI2 std::__copy_move_backward_a2(_BI1, _BI1, _BI2) [with bool _IsMove = false; _BI1 = const char8_t*; _BI2 = char8_t*] (null)
;; enabled by -tree-original


{
  typedef struct _Category _Category;

  if (<<cleanup_point std::is_constant_evaluated ()>>)
    {
      <<cleanup_point return <retval> = std::__copy_move_backward<false, false, std::random_access_iterator_tag>::__copy_move_b<const char8_t*, char8_t*> (__first, __last, __result)>>;
    }
  <<cleanup_point return <retval> = std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<char8_t> (__first, __last, __result)>>;
}


;; Function constexpr _OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = const char8_t*; _OI = char8_t*] (null)
;; enabled by -tree-original


{
  typedef struct _Category _Category;

  if (<<cleanup_point std::is_constant_evaluated ()>>)
    {
      <<cleanup_point return <retval> = std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m<const char8_t*, char8_t*> (__first, __last, __result)>>;
    }
  <<cleanup_point return <retval> = std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<char8_t> (__first, __last, __result)>>;
}


;; Function constexpr typename __gnu_cxx::__enable_if<std::__is_byte<_Tp>::__value, void>::__type std::__fill_a1(_Tp*, _Tp*, const _Tp&) [with _Tp = char8_t; typename __gnu_cxx::__enable_if<std::__is_byte<_Tp>::__value, void>::__type = void] (null)
;; enabled by -tree-original


{
  const char8_t __tmp = (char8_t) *__c;

    const char8_t __tmp = (char8_t) *__c;
  if (<<cleanup_point std::is_constant_evaluated ()>>)
    {
      goto <D.65956>;
      <D.65955>:;
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__first = (char8_t) __tmp) >>>>>;
      <<cleanup_point (void)  ++__first>>;
      <D.65956>:;
      if (__first != __last) goto <D.65955>; else goto <D.65953>;
      <D.65953>:;
      return;
    }
  {
    const size_t __len = (size_t) (__last - __first);

        const size_t __len = (size_t) (__last - __first);
    if (__len != 0)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memset ((void *) __first, (int) __tmp, (size_t) __len) >>>>>;
      }
  }
}


;; Function constexpr _BI2 std::__copy_move_backward_a2(_BI1, _BI1, _BI2) [with bool _IsMove = false; _BI1 = const char16_t*; _BI2 = char16_t*] (null)
;; enabled by -tree-original


{
  typedef struct _Category _Category;

  if (<<cleanup_point std::is_constant_evaluated ()>>)
    {
      <<cleanup_point return <retval> = std::__copy_move_backward<false, false, std::random_access_iterator_tag>::__copy_move_b<const char16_t*, char16_t*> (__first, __last, __result)>>;
    }
  <<cleanup_point return <retval> = std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<char16_t> (__first, __last, __result)>>;
}


;; Function constexpr _OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = const char16_t*; _OI = char16_t*] (null)
;; enabled by -tree-original


{
  typedef struct _Category _Category;

  if (<<cleanup_point std::is_constant_evaluated ()>>)
    {
      <<cleanup_point return <retval> = std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m<const char16_t*, char16_t*> (__first, __last, __result)>>;
    }
  <<cleanup_point return <retval> = std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<char16_t> (__first, __last, __result)>>;
}


;; Function constexpr _BI2 std::__copy_move_backward_a2(_BI1, _BI1, _BI2) [with bool _IsMove = false; _BI1 = const char32_t*; _BI2 = char32_t*] (null)
;; enabled by -tree-original


{
  typedef struct _Category _Category;

  if (<<cleanup_point std::is_constant_evaluated ()>>)
    {
      <<cleanup_point return <retval> = std::__copy_move_backward<false, false, std::random_access_iterator_tag>::__copy_move_b<const char32_t*, char32_t*> (__first, __last, __result)>>;
    }
  <<cleanup_point return <retval> = std::__copy_move_backward<false, true, std::random_access_iterator_tag>::__copy_move_b<char32_t> (__first, __last, __result)>>;
}


;; Function constexpr _OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = const char32_t*; _OI = char32_t*] (null)
;; enabled by -tree-original


{
  typedef struct _Category _Category;

  if (<<cleanup_point std::is_constant_evaluated ()>>)
    {
      <<cleanup_point return <retval> = std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m<const char32_t*, char32_t*> (__first, __last, __result)>>;
    }
  <<cleanup_point return <retval> = std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<char32_t> (__first, __last, __result)>>;
}


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char> (__r)>>
   >>>;


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;


;; Function static constexpr _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::pointer = char*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char *) std::allocator<char>::allocate ((struct allocator_type *) __a, __n)>>;


;; Function static constexpr void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>; std::allocator_traits<std::allocator<_CharT> >::pointer = char*; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char>::deallocate ((struct allocator_type *) __a, __p, __n) >>>>>;


;; Function static constexpr _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const char; std::pointer_traits<_Tp*>::pointer = const char*; std::__make_not_void<_Tp> = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char *) std::addressof<const char> ((const char &) __r)>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_construct<char*> ((struct basic_string *) this, __beg, __end, *(struct forward_iterator_tag &) &TARGET_EXPR <D.66090, {.D.14122={.D.14118={.D.14114={}}}}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct_aux(_InIterator, _InIterator, std::__false_type) [with _InIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  typedef struct _Tag _Tag;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_construct<wchar_t*> ((struct basic_string *) this, __beg, __end, *(struct forward_iterator_tag &) &TARGET_EXPR <D.66107, {.D.14122={.D.14118={.D.14114={}}}}>;, <<< Unknown tree: empty_class_expr >>>;) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const wchar_t *) std::pointer_traits<const wchar_t*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.38940._M_local_buf)>>;


;; Function static constexpr void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = wchar_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<wchar_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = wchar_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<wchar_t>::deallocate ((struct allocator_type *) __a, __p, __n) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::__cxx11::basic_string<wchar_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char*> (__first, __last, std::__iterator_category<const char*> ((const char * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<wchar_t> (__r)>>
   >>>;


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const wchar_t*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const wchar_t*> (__first, __last, std::__iterator_category<const wchar_t*> ((const wchar_t * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const wchar_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const wchar_t*> (__beg, __end)) >>>>>;
  if (__dnew > 7)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy_chars (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = char8_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char8_t> (__r)>>
   >>>;


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char8_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char8_t*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char8_t*> (__first, __last, std::__iterator_category<const char8_t*> ((const char8_t * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char8_t*; _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char8_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char8_t*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char8_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char8_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char8_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char8_t>::_S_copy_chars (std::__cxx11::basic_string<char8_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char8_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char8_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char8_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char8_t *) std::pointer_traits<const char8_t*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.40502._M_local_buf)>>;


;; Function static constexpr void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char8_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char8_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = char8_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char8_t>::deallocate ((struct allocator_type *) __a, __p, __n) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::__cxx11::basic_string<char8_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char16_t> (__r)>>
   >>>;


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char16_t*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char16_t*> (__first, __last, std::__iterator_category<const char16_t*> ((const char16_t * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char16_t*; _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char16_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char16_t*> (__beg, __end)) >>>>>;
  if (__dnew > 7)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char16_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_S_copy_chars (std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char16_t *) std::pointer_traits<const char16_t*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.41898._M_local_buf)>>;


;; Function static constexpr void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = char16_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char16_t>::deallocate ((struct allocator_type *) __a, __p, __n) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::__cxx11::basic_string<char16_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<char32_t> (__r)>>
   >>>;


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::new_allocator(const __gnu_cxx::new_allocator<_Tp>&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    
  }
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = const char32_t*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<const char32_t*> (__first, __last, std::__iterator_category<const char32_t*> ((const char32_t * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = const char32_t*; _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<const char32_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<const char32_t*> (__beg, __end)) >>>>>;
  if (__dnew > 3)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char32_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_S_copy_chars (std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_local_data() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_pointer = const char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (const char32_t *) std::pointer_traits<const char32_t*>::pointer_to ((const __make_not_void &) &((const struct basic_string *) this)->D.43294._M_local_buf)>>;


;; Function static constexpr void std::allocator_traits<std::allocator<_CharT> >::deallocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::pointer, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>; std::allocator_traits<std::allocator<_CharT> >::pointer = char32_t*; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::allocator<char32_t>::deallocate ((struct allocator_type *) __a, __p, __n) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::__cxx11::basic_string<char32_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (struct allocator_type &) &((struct basic_string *) this)->_M_dataplus;


;; Function static constexpr std::allocator_traits<std::allocator<_CharT> >::allocator_type std::allocator_traits<std::allocator<_CharT> >::select_on_container_copy_construction(const allocator_type&) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


<<cleanup_point return *<retval> = TARGET_EXPR <D.67490, <<< Unknown tree: aggr_init_expr
  5
  __ct_comp 
  D.67490
  (struct allocator *) <<< Unknown tree: void_cst >>>
  (const struct allocator &) __rhs >>>>>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char>::copy (__d, __s, __n) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_mutate(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


{
  const size_type __how_much;
  size_type __new_capacity;
  char * __r;

    const size_type __how_much;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__how_much = (std::__cxx11::basic_string<char>::length ((struct basic_string *) this) - __pos) - __len1) >>>>>;
    size_type __new_capacity;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__new_capacity = (std::__cxx11::basic_string<char>::length ((struct basic_string *) this) + __len2) - __len1) >>>>>;
    char * __r;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__r = std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__new_capacity, std::__cxx11::basic_string<char>::capacity ((struct basic_string *) this))) >>>>>;
  if (__pos != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__r, (const char *) std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __pos) >>>>>;
    }
  if (__s != 0B && __len2 != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__r + (sizetype) NON_LVALUE_EXPR <__pos>, __s, __len2) >>>>>;
    }
  if (__how_much != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__r + ((sizetype) NON_LVALUE_EXPR <__pos> + (sizetype) NON_LVALUE_EXPR <__len2>), (const char *) (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + ((sizetype) NON_LVALUE_EXPR <__pos> + (sizetype) NON_LVALUE_EXPR <__len1>)), (size_type) __how_much) >>>>>;
    }
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, __r) >>>>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __new_capacity) >>>>>;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Allocator>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


{
  const size_type __old_size;
  const size_type __new_size = ((long long unsigned int) __old_size + (long long unsigned int) __len2) - __len1;

  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_check_length ((struct basic_string *) this, __len1, (size_type) __len2, (const char *) "basic_string::_M_replace") >>>>>;
    const size_type __old_size;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__old_size = std::__cxx11::basic_string<char>::size ((struct basic_string *) this)) >>>>>;
    const size_type __new_size = ((long long unsigned int) __old_size + (long long unsigned int) __len2) - __len1;
  {
    if (<<cleanup_point std::__cxx11::basic_string<char>::capacity ((struct basic_string *) this) >= (long long unsigned int) __new_size>>)
      {
        {
          char * __p;
          const size_type __how_much = ((long long unsigned int) __old_size - __pos) - __len1;

                    char * __p;
          <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__p = std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this) + (sizetype) NON_LVALUE_EXPR <__pos>) >>>>>;
                    const size_type __how_much = ((long long unsigned int) __old_size - __pos) - __len1;
          {
            if (<<cleanup_point std::__cxx11::basic_string<char>::_M_disjunct ((struct basic_string *) this, __s)>>)
              {
                if (__how_much != 0 && __len1 != (long long unsigned int) __len2)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_move (__p + (sizetype) __len2, (const char *) (__p + (sizetype) NON_LVALUE_EXPR <__len1>), (size_type) __how_much) >>>>>;
                  }
                if (__len2 != 0)
                  {
                    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, __s, (size_type) __len2) >>>>>;
                  }
              }
            else
              {
                {
                  if (__len2 != 0 && (long long unsigned int) __len2 <= __len1)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_move (__p, __s, (size_type) __len2) >>>>>;
                    }
                  if (__how_much != 0 && __len1 != (long long unsigned int) __len2)
                    {
                      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_move (__p + (sizetype) __len2, (const char *) (__p + (sizetype) NON_LVALUE_EXPR <__len1>), (size_type) __how_much) >>>>>;
                    }
                  {
                    if ((long long unsigned int) __len2 > __len1)
                      {
                        {
                          {
                            if (__s + (sizetype) __len2 <= (const char *) (__p + (sizetype) NON_LVALUE_EXPR <__len1>))
                              {
                                <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_move (__p, __s, (size_type) __len2) >>>>>;
                              }
                            else
                              {
                                {
                                  {
                                    if ((const char *) (__p + (sizetype) NON_LVALUE_EXPR <__len1>) <= __s)
                                      {
                                        {
                                          const size_type __poff = (long long unsigned int) (__s - __p) + ((long long unsigned int) __len2 - __len1);

                                                                                    const size_type __poff = (long long unsigned int) (__s - __p) + ((long long unsigned int) __len2 - __len1);
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, (const char *) (__p + (sizetype) __poff), (size_type) __len2) >>>>>;
                                        }
                                      }
                                    else
                                      {
                                        {
                                          const size_type __nleft = (size_type) ((__p + (sizetype) NON_LVALUE_EXPR <__len1>) - __s);

                                                                                    const size_type __nleft = (size_type) ((__p + (sizetype) NON_LVALUE_EXPR <__len1>) - __s);
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_move (__p, __s, (size_type) __nleft) >>>>>;
                                          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p + (sizetype) __nleft, (const char *) (__p + (sizetype) __len2), (long long unsigned int) __len2 - (long long unsigned int) __nleft) >>>>>;
                                        }
                                      }
                                  }
                                }
                              }
                          }
                        }
                      }
                  }
                }
              }
          }
        }
      }
    else
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_mutate ((struct basic_string *) this, __pos, __len1, __s, (size_type) __len2) >>>>>;
      }
  }
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, (size_type) __new_size) >>>>>;
  return <retval> = (struct basic_string &) this;
}


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_check(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const char*) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) < __pos>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_out_of_range_fmt ((const char *) "%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, std::__cxx11::basic_string<char>::size ((const struct basic_string *) this)) >>>>>;
  }
return <retval> = __pos;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_limit(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  {
    const bool __testoff;

        const bool __testoff;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__testoff = std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) - __pos > __off) >>>>>;
    <<cleanup_point return <retval> = (bool) __testoff ? __off : std::__cxx11::basic_string<char>::size ((const struct basic_string *) this) - __pos>>;
  }
   >>>;


;; Function static constexpr _BI2 std::__copy_move_backward<false, false, std::random_access_iterator_tag>::__copy_move_b(_BI1, _BI1, _BI2) [with _BI1 = const char*; _BI2 = char*] (null)
;; enabled by -tree-original


{
  difference_type __n = __last - __first;

    difference_type __n = __last - __first;
  goto <D.67537>;
  <D.67536>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (* --__result = (char) * --__last) >>>>>;
  <<cleanup_point (void)  --__n>>;
  <D.67537>:;
  if (__n > 0) goto <D.67536>; else goto <D.67534>;
  <D.67534>:;
  return <retval> = __result;
}


;; Function static constexpr _Tp* std::__copy_move_backward<_IsMove, true, std::random_access_iterator_tag>::__copy_move_b(const _Tp*, const _Tp*, _Tp*) [with _Tp = char; bool _IsMove = false] (null)
;; enabled by -tree-original


{
  typedef struct __assignable __assignable;
  const ptrdiff_t _Num = __last - __first;

    const ptrdiff_t _Num = __last - __first;
  if (_Num != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memmove ((void *) (__result + -(sizetype) _Num), (const void *) __first, (long long unsigned int) _Num) >>>>>;
    }
  return <retval> = __result + -(sizetype) _Num;
}


;; Function static constexpr _OI std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m(_II, _II, _OI) [with _II = const char*; _OI = char*] (null)
;; enabled by -tree-original


{
  typedef _Distance _Distance;

  {
    _Distance __n = __last - __first;

        _Distance __n = __last - __first;
    goto <D.67589>;
    <D.67588>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__result = (char) *__first) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__first >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__result >>>>>;
    <<cleanup_point (void)  --__n>>;
    <D.67589>:;
    if (__n > 0) goto <D.67588>; else goto <D.67586>;
    <D.67586>:;
  }
  return <retval> = __result;
}


;; Function static constexpr _Tp* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(const _Tp*, const _Tp*, _Tp*) [with _Tp = char; bool _IsMove = false] (null)
;; enabled by -tree-original


{
  typedef struct __assignable __assignable;
  const ptrdiff_t _Num = __last - __first;

    const ptrdiff_t _Num = __last - __first;
  if (_Num != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memmove ((void *) __result, (const void *) __first, (long long unsigned int) _Num) >>>>>;
    }
  return <retval> = __result + (sizetype) _Num;
}


;; Function static constexpr _BI2 std::__copy_move_backward<false, false, std::random_access_iterator_tag>::__copy_move_b(_BI1, _BI1, _BI2) [with _BI1 = const wchar_t*; _BI2 = wchar_t*] (null)
;; enabled by -tree-original


{
  difference_type __n = (__last - __first) /[ex] 2;

    difference_type __n = (__last - __first) /[ex] 2;
  goto <D.67615>;
  <D.67614>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (* --__result = (wchar_t) * --__last) >>>>>;
  <<cleanup_point (void)  --__n>>;
  <D.67615>:;
  if (__n > 0) goto <D.67614>; else goto <D.67612>;
  <D.67612>:;
  return <retval> = __result;
}


;; Function static constexpr _Tp* std::__copy_move_backward<_IsMove, true, std::random_access_iterator_tag>::__copy_move_b(const _Tp*, const _Tp*, _Tp*) [with _Tp = wchar_t; bool _IsMove = false] (null)
;; enabled by -tree-original


{
  typedef struct __assignable __assignable;
  const ptrdiff_t _Num = (__last - __first) /[ex] 2;

    const ptrdiff_t _Num = (__last - __first) /[ex] 2;
  if (_Num != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memmove ((void *) (__result + -(sizetype) ((long long unsigned int) _Num * 2)), (const void *) __first, (long long unsigned int) _Num * 2) >>>>>;
    }
  return <retval> = __result + -(sizetype) ((long long unsigned int) _Num * 2);
}


;; Function static constexpr _OI std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m(_II, _II, _OI) [with _II = const wchar_t*; _OI = wchar_t*] (null)
;; enabled by -tree-original


{
  typedef _Distance _Distance;

  {
    _Distance __n = (__last - __first) /[ex] 2;

        _Distance __n = (__last - __first) /[ex] 2;
    goto <D.67667>;
    <D.67666>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__result = (wchar_t) *__first) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__first >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__result >>>>>;
    <<cleanup_point (void)  --__n>>;
    <D.67667>:;
    if (__n > 0) goto <D.67666>; else goto <D.67664>;
    <D.67664>:;
  }
  return <retval> = __result;
}


;; Function static constexpr _Tp* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(const _Tp*, const _Tp*, _Tp*) [with _Tp = wchar_t; bool _IsMove = false] (null)
;; enabled by -tree-original


{
  typedef struct __assignable __assignable;
  const ptrdiff_t _Num = (__last - __first) /[ex] 2;

    const ptrdiff_t _Num = (__last - __first) /[ex] 2;
  if (_Num != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memmove ((void *) __result, (const void *) __first, (long long unsigned int) _Num * 2) >>>>>;
    }
  return <retval> = __result + (sizetype) ((long long unsigned int) _Num * 2);
}


;; Function static constexpr _BI2 std::__copy_move_backward<false, false, std::random_access_iterator_tag>::__copy_move_b(_BI1, _BI1, _BI2) [with _BI1 = const char8_t*; _BI2 = char8_t*] (null)
;; enabled by -tree-original


{
  difference_type __n = __last - __first;

    difference_type __n = __last - __first;
  goto <D.67693>;
  <D.67692>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (* --__result = (char8_t) * --__last) >>>>>;
  <<cleanup_point (void)  --__n>>;
  <D.67693>:;
  if (__n > 0) goto <D.67692>; else goto <D.67690>;
  <D.67690>:;
  return <retval> = __result;
}


;; Function static constexpr _Tp* std::__copy_move_backward<_IsMove, true, std::random_access_iterator_tag>::__copy_move_b(const _Tp*, const _Tp*, _Tp*) [with _Tp = char8_t; bool _IsMove = false] (null)
;; enabled by -tree-original


{
  typedef struct __assignable __assignable;
  const ptrdiff_t _Num = __last - __first;

    const ptrdiff_t _Num = __last - __first;
  if (_Num != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memmove ((void *) (__result + -(sizetype) _Num), (const void *) __first, (long long unsigned int) _Num) >>>>>;
    }
  return <retval> = __result + -(sizetype) _Num;
}


;; Function static constexpr _OI std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m(_II, _II, _OI) [with _II = const char8_t*; _OI = char8_t*] (null)
;; enabled by -tree-original


{
  typedef _Distance _Distance;

  {
    _Distance __n = __last - __first;

        _Distance __n = __last - __first;
    goto <D.67745>;
    <D.67744>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__result = (char8_t) *__first) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__first >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__result >>>>>;
    <<cleanup_point (void)  --__n>>;
    <D.67745>:;
    if (__n > 0) goto <D.67744>; else goto <D.67742>;
    <D.67742>:;
  }
  return <retval> = __result;
}


;; Function static constexpr _Tp* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(const _Tp*, const _Tp*, _Tp*) [with _Tp = char8_t; bool _IsMove = false] (null)
;; enabled by -tree-original


{
  typedef struct __assignable __assignable;
  const ptrdiff_t _Num = __last - __first;

    const ptrdiff_t _Num = __last - __first;
  if (_Num != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memmove ((void *) __result, (const void *) __first, (long long unsigned int) _Num) >>>>>;
    }
  return <retval> = __result + (sizetype) _Num;
}


;; Function static constexpr _BI2 std::__copy_move_backward<false, false, std::random_access_iterator_tag>::__copy_move_b(_BI1, _BI1, _BI2) [with _BI1 = const char16_t*; _BI2 = char16_t*] (null)
;; enabled by -tree-original


{
  difference_type __n = (__last - __first) /[ex] 2;

    difference_type __n = (__last - __first) /[ex] 2;
  goto <D.67771>;
  <D.67770>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (* --__result = (char16_t) * --__last) >>>>>;
  <<cleanup_point (void)  --__n>>;
  <D.67771>:;
  if (__n > 0) goto <D.67770>; else goto <D.67768>;
  <D.67768>:;
  return <retval> = __result;
}


;; Function static constexpr _Tp* std::__copy_move_backward<_IsMove, true, std::random_access_iterator_tag>::__copy_move_b(const _Tp*, const _Tp*, _Tp*) [with _Tp = char16_t; bool _IsMove = false] (null)
;; enabled by -tree-original


{
  typedef struct __assignable __assignable;
  const ptrdiff_t _Num = (__last - __first) /[ex] 2;

    const ptrdiff_t _Num = (__last - __first) /[ex] 2;
  if (_Num != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memmove ((void *) (__result + -(sizetype) ((long long unsigned int) _Num * 2)), (const void *) __first, (long long unsigned int) _Num * 2) >>>>>;
    }
  return <retval> = __result + -(sizetype) ((long long unsigned int) _Num * 2);
}


;; Function static constexpr _OI std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m(_II, _II, _OI) [with _II = const char16_t*; _OI = char16_t*] (null)
;; enabled by -tree-original


{
  typedef _Distance _Distance;

  {
    _Distance __n = (__last - __first) /[ex] 2;

        _Distance __n = (__last - __first) /[ex] 2;
    goto <D.67823>;
    <D.67822>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__result = (char16_t) *__first) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__first >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__result >>>>>;
    <<cleanup_point (void)  --__n>>;
    <D.67823>:;
    if (__n > 0) goto <D.67822>; else goto <D.67820>;
    <D.67820>:;
  }
  return <retval> = __result;
}


;; Function static constexpr _Tp* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(const _Tp*, const _Tp*, _Tp*) [with _Tp = char16_t; bool _IsMove = false] (null)
;; enabled by -tree-original


{
  typedef struct __assignable __assignable;
  const ptrdiff_t _Num = (__last - __first) /[ex] 2;

    const ptrdiff_t _Num = (__last - __first) /[ex] 2;
  if (_Num != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memmove ((void *) __result, (const void *) __first, (long long unsigned int) _Num * 2) >>>>>;
    }
  return <retval> = __result + (sizetype) ((long long unsigned int) _Num * 2);
}


;; Function static constexpr _BI2 std::__copy_move_backward<false, false, std::random_access_iterator_tag>::__copy_move_b(_BI1, _BI1, _BI2) [with _BI1 = const char32_t*; _BI2 = char32_t*] (null)
;; enabled by -tree-original


{
  difference_type __n = (__last - __first) /[ex] 4;

    difference_type __n = (__last - __first) /[ex] 4;
  goto <D.67849>;
  <D.67848>:;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (* --__result = (char32_t) * --__last) >>>>>;
  <<cleanup_point (void)  --__n>>;
  <D.67849>:;
  if (__n > 0) goto <D.67848>; else goto <D.67846>;
  <D.67846>:;
  return <retval> = __result;
}


;; Function static constexpr _Tp* std::__copy_move_backward<_IsMove, true, std::random_access_iterator_tag>::__copy_move_b(const _Tp*, const _Tp*, _Tp*) [with _Tp = char32_t; bool _IsMove = false] (null)
;; enabled by -tree-original


{
  typedef struct __assignable __assignable;
  const ptrdiff_t _Num = (__last - __first) /[ex] 4;

    const ptrdiff_t _Num = (__last - __first) /[ex] 4;
  if (_Num != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memmove ((void *) (__result + -(sizetype) ((long long unsigned int) _Num * 4)), (const void *) __first, (long long unsigned int) _Num * 4) >>>>>;
    }
  return <retval> = __result + -(sizetype) ((long long unsigned int) _Num * 4);
}


;; Function static constexpr _OI std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m(_II, _II, _OI) [with _II = const char32_t*; _OI = char32_t*] (null)
;; enabled by -tree-original


{
  typedef _Distance _Distance;

  {
    _Distance __n = (__last - __first) /[ex] 4;

        _Distance __n = (__last - __first) /[ex] 4;
    goto <D.67901>;
    <D.67900>:;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__result = (char32_t) *__first) >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__first >>>>>;
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void)  ++__result >>>>>;
    <<cleanup_point (void)  --__n>>;
    <D.67901>:;
    if (__n > 0) goto <D.67900>; else goto <D.67898>;
    <D.67898>:;
  }
  return <retval> = __result;
}


;; Function static constexpr _Tp* std::__copy_move<_IsMove, true, std::random_access_iterator_tag>::__copy_m(const _Tp*, const _Tp*, _Tp*) [with _Tp = char32_t; bool _IsMove = false] (null)
;; enabled by -tree-original


{
  typedef struct __assignable __assignable;
  const ptrdiff_t _Num = (__last - __first) /[ex] 4;

    const ptrdiff_t _Num = (__last - __first) /[ex] 4;
  if (_Num != 0)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __builtin_memmove ((void *) __result, (const void *) __first, (long long unsigned int) _Num * 4) >>>>>;
    }
  return <retval> = __result + (sizetype) ((long long unsigned int) _Num * 4);
}


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char *) __r
   >>>;


;; Function static constexpr std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 18446744073709551615
   >>>;


;; Function constexpr _Tp* std::allocator< <template-parameter-1-1> >::allocate(std::size_t) [with _Tp = char; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char *) operator new (NON_LVALUE_EXPR <__n>)>>;
  }
<<cleanup_point return <retval> = __gnu_cxx::new_allocator<char>::allocate ((struct new_allocator *) this, __n, 0B)>>;


;; Function constexpr void std::allocator< <template-parameter-1-1> >::deallocate(_Tp*, std::size_t) [with _Tp = char; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char>::deallocate ((struct new_allocator *) this, __p, __n) >>>>>;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char> (__r)>>
   >>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = char*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<char*> (__first, __last, std::__iterator_category<char*> ((char * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = char*; _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<char> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<char*> (__beg, __end)) >>>>>;
  if (__dnew > 15)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<char>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy_chars (std::__cxx11::basic_string<char>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::distance(_InputIterator, _InputIterator) [with _InputIterator = wchar_t*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = std::__distance<wchar_t*> (__first, __last, std::__iterator_category<wchar_t*> ((wchar_t * const &) &__first);, <<< Unknown tree: empty_class_expr >>>;)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_construct(_InIterator, _InIterator, std::forward_iterator_tag) [with _FwdIterator = wchar_t*; _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


{
  size_type __dnew;

  if (<<cleanup_point __gnu_cxx::__is_null_pointer<wchar_t> (__beg) && __beg != __end>>)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_logic_error ((const char *) "basic_string::_M_construct null not valid") >>>>>;
    }
    size_type __dnew;
  <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (__dnew = (size_type) std::distance<wchar_t*> (__beg, __end)) >>>>>;
  if (__dnew > 7)
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this, std::__cxx11::basic_string<wchar_t>::_M_create ((struct basic_string *) this, (size_type &) &__dnew, 0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_capacity ((struct basic_string *) this, __dnew) >>>>>;
    }
  <<< Unknown tree: try_block
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy_chars (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this), __beg, __end) >>>>>
  <<< Unknown tree: handler
  
  try
    {
      <<cleanup_point <<< Unknown tree: expr_stmt
  (void) __cxa_begin_catch (__builtin_eh_pointer (0)) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_dispose ((struct basic_string *) this) >>>>>;
      <<cleanup_point <<< Unknown tree: expr_stmt
  <<< Unknown tree: throw_expr
  __cxa_rethrow () >>> >>>>>;
    }
  finally
    {
      __cxa_end_catch ();
    } >>> >>>;
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_set_length ((struct basic_string *) this, __dnew) >>>>>;
}


;; Function static constexpr _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const wchar_t; std::pointer_traits<_Tp*>::pointer = const wchar_t*; std::__make_not_void<_Tp> = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const wchar_t *) std::addressof<const wchar_t> ((const wchar_t &) __r)>>
   >>>;


;; Function constexpr void std::allocator< <template-parameter-1-1> >::deallocate(_Tp*, std::size_t) [with _Tp = wchar_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<wchar_t>::deallocate ((struct new_allocator *) this, __p, __n) >>>>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char*; typename std::iterator_traits< <template-parameter-1-1> >::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.68011, {.D.14122={.D.14118={.D.14114={}}}}>>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


return <retval> = __last - __first;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, __k1, (size_type) (__k2 - __k1)) >>>>>
   >>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (wchar_t *) __r
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const wchar_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const wchar_t*; typename std::iterator_traits< <template-parameter-1-1> >::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.68035, {.D.14122={.D.14118={.D.14114={}}}}>>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const wchar_t*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 2;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<wchar_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<wchar_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<wchar_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (wchar_t *) std::allocator_traits<std::allocator<wchar_t> >::allocate ((struct allocator_type &) std::__cxx11::basic_string<wchar_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = wchar_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.38940._M_allocated_capacity = __capacity) >>>>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 2)) >>>>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) (std::__cxx11::basic_string<wchar_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 2)), (const char_type &) &TARGET_EXPR <D.68060, 0>) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char8_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char8_t *) __r
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char8_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char8_t*; typename std::iterator_traits< <template-parameter-1-1> >::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.68069, {.D.14122={.D.14118={.D.14114={}}}}>>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char8_t*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


return <retval> = __last - __first;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char8_t*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char8_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char8_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<char8_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (char8_t *) std::allocator_traits<std::allocator<char8_t> >::allocate ((struct allocator_type &) std::__cxx11::basic_string<char8_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char8_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.40502._M_allocated_capacity = __capacity) >>>>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char8_t>::_S_copy (__p, __k1, (size_type) (__k2 - __k1)) >>>>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char8_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char8_t>::assign ((char_type &) (std::__cxx11::basic_string<char8_t>::_M_data ((struct basic_string *) this) + (sizetype) NON_LVALUE_EXPR <__n>), (const char_type &) &TARGET_EXPR <D.68094, 0>) >>>>>;


;; Function static constexpr _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const char8_t; std::pointer_traits<_Tp*>::pointer = const char8_t*; std::__make_not_void<_Tp> = const char8_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char8_t *) std::addressof<const char8_t> ((const char8_t &) __r)>>
   >>>;


;; Function constexpr void std::allocator< <template-parameter-1-1> >::deallocate(_Tp*, std::size_t) [with _Tp = char8_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char8_t>::deallocate ((struct new_allocator *) this, __p, __n) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char16_t *) __r
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char16_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char16_t*; typename std::iterator_traits< <template-parameter-1-1> >::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.68116, {.D.14122={.D.14118={.D.14114={}}}}>>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char16_t*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 2;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<char16_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (char16_t *) std::allocator_traits<std::allocator<char16_t> >::allocate ((struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char16_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.41898._M_allocated_capacity = __capacity) >>>>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 2)) >>>>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char16_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) (std::__cxx11::basic_string<char16_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 2)), (const char_type &) &TARGET_EXPR <D.68141, 0>) >>>>>;


;; Function static constexpr _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const char16_t; std::pointer_traits<_Tp*>::pointer = const char16_t*; std::__make_not_void<_Tp> = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char16_t *) std::addressof<const char16_t> ((const char16_t &) __r)>>
   >>>;


;; Function constexpr void std::allocator< <template-parameter-1-1> >::deallocate(_Tp*, std::size_t) [with _Tp = char16_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char16_t>::deallocate ((struct new_allocator *) this, __p, __n) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (char32_t *) __r
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = const char32_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::iterator_category std::__iterator_category(const _Iter&) [with _Iter = const char32_t*; typename std::iterator_traits< <template-parameter-1-1> >::iterator_category = std::random_access_iterator_tag] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = TARGET_EXPR <D.68163, {.D.14122={.D.14118={.D.14114={}}}}>>>;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = const char32_t*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 4;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_create(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_length_error ((const char *) "basic_string::_M_create") >>>>>;
  }
if (*__capacity > __old_capacity && *__capacity < __old_capacity * 2)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = __old_capacity * 2) >>>>>;
    if (<<cleanup_point *__capacity > std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)>>)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) (*__capacity = std::__cxx11::basic_string<char32_t>::max_size ((struct basic_string *) this)) >>>>>;
      }
  }
<<cleanup_point return <retval> = (char32_t *) std::allocator_traits<std::allocator<char32_t> >::allocate ((struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((struct basic_string *) this), *__capacity + 1)>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_data(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::pointer = char32_t*] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_dataplus._M_p = __p) >>>>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_capacity(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->D.43294._M_allocated_capacity = __capacity) >>>>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, const _CharT*, const _CharT*) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_S_copy (__p, __k1, (size_type) ((__k2 - __k1) /[ex] 4)) >>>>>
   >>>;


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_set_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char32_t>::_M_length ((struct basic_string *) this, __n) >>>>>;
<<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) (std::__cxx11::basic_string<char32_t>::_M_data ((struct basic_string *) this) + (sizetype) (__n * 4)), (const char_type &) &TARGET_EXPR <D.68188, 0>) >>>>>;


;; Function static constexpr _Tp* std::pointer_traits<_Tp*>::pointer_to(std::__make_not_void<_Tp>&) [with _Tp = const char32_t; std::pointer_traits<_Tp*>::pointer = const char32_t*; std::__make_not_void<_Tp> = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (const char32_t *) std::addressof<const char32_t> ((const char32_t &) __r)>>
   >>>;


;; Function constexpr void std::allocator< <template-parameter-1-1> >::deallocate(_Tp*, std::size_t) [with _Tp = char32_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  __gnu_cxx::new_allocator<char32_t>::deallocate ((struct new_allocator *) this, __p, __n) >>>>>;


;; Function bool std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_disjunct(const _CharT*) const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::less<const char*>::operator() (&TARGET_EXPR <D.68277, {.D.68217={}}>, __s, (const char *) std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this)) || std::less<const char*>::operator() (&TARGET_EXPR <D.68287, {.D.68217={}}>, (const char *) (std::__cxx11::basic_string<char>::_M_data ((const struct basic_string *) this) + (sizetype) std::__cxx11::basic_string<char>::size ((const struct basic_string *) this)), __s)>>
   >>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_move(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char>::move (__d, __s, __n) >>>>>;
  }


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::_M_max_size() const [with _Tp = char; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 9223372036854775807
   >>>;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __builtin_expect (__gnu_cxx::new_allocator<char>::_M_max_size ((struct new_allocator *) this) < __n, 0) != 0>>)
    {
      if (0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_array_new_length () >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 1;

          <<cleanup_point           align_val_t __al = 1;>>;
          <<cleanup_point return <retval> = (char *) operator new (NON_LVALUE_EXPR <__n>, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (char *) operator new (NON_LVALUE_EXPR <__n>)>>;
}


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(_Tp*, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, NON_LVALUE_EXPR <__t>, 1) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, NON_LVALUE_EXPR <__t>) >>>>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char *) __r
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = char] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = char*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


return <retval> = __last - __first;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _CharT*, _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<char>::_S_copy (__p, (const char *) __k1, (size_type) (__k2 - __k1)) >>>>>
   >>>;


;; Function bool __gnu_cxx::__is_null_pointer(_Type*) [with _Type = wchar_t] (null)
;; enabled by -tree-original


return <retval> = __ptr == 0B;


;; Function constexpr typename std::iterator_traits< <template-parameter-1-1> >::difference_type std::__distance(_RandomAccessIterator, _RandomAccessIterator, std::random_access_iterator_tag) [with _RandomAccessIterator = wchar_t*; typename std::iterator_traits< <template-parameter-1-1> >::difference_type = long long int] (null)
;; enabled by -tree-original


return <retval> = (__last - __first) /[ex] 2;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy_chars(_CharT*, _CharT*, _CharT*) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point <<< Unknown tree: expr_stmt
  std::__cxx11::basic_string<wchar_t>::_S_copy (__p, (const wchar_t *) __k1, (size_type) ((__k2 - __k1) /[ex] 2)) >>>>>
   >>>;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const wchar_t> (__r)>>
   >>>;


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(_Tp*, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = wchar_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, __t * 2, 2) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, __t * 2) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<wchar_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<wchar_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;


;; Function static constexpr _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = wchar_t; std::allocator_traits<std::allocator<_CharT> >::pointer = wchar_t*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<wchar_t>; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (wchar_t *) std::allocator<wchar_t>::allocate ((struct allocator_type *) __a, __n)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<wchar_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<wchar_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char8_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char8_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;


;; Function static constexpr _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char8_t; std::allocator_traits<std::allocator<_CharT> >::pointer = char8_t*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char8_t>; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char8_t *) std::allocator<char8_t>::allocate ((struct allocator_type *) __a, __n)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char8_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char8_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const char8_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char8_t> (__r)>>
   >>>;


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(_Tp*, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char8_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, NON_LVALUE_EXPR <__t>, 1) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, NON_LVALUE_EXPR <__t>) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char16_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char16_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;


;; Function static constexpr _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::pointer = char16_t*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char16_t *) std::allocator<char16_t>::allocate ((struct allocator_type *) __a, __n)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char16_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char16_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char16_t> (__r)>>
   >>>;


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(_Tp*, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, __t * 2, 2) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, __t * 2) >>>>>;


;; Function std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::max_size() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = (std::allocator_traits<std::allocator<char32_t> >::max_size ((const struct allocator_type &) std::__cxx11::basic_string<char32_t>::_M_get_allocator ((const struct basic_string *) this)) + 18446744073709551615) / 2>>
   >>>;


;; Function static constexpr _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(std::allocator_traits<std::allocator<_CharT> >::allocator_type&, std::allocator_traits<std::allocator<_CharT> >::size_type) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::pointer = char32_t*; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point return <retval> = (char32_t *) std::allocator<char32_t>::allocate ((struct allocator_type *) __a, __n)>>;


;; Function static void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_S_copy(_CharT*, const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (__n == 1)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  std::char_traits<char32_t>::assign ((char_type &) NON_LVALUE_EXPR <__d>, (const char_type &) NON_LVALUE_EXPR <__s>) >>>>>;
  }
else
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  (void) std::char_traits<char32_t>::copy (__d, __s, __n) >>>>>;
  }


;; Function void std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_length(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type) [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  (void) (((struct basic_string *) this)->_M_string_length = __length) >>>>>;


;; Function constexpr _Tp* std::addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  <<cleanup_point return <retval> = std::__addressof<const char32_t> (__r)>>
   >>>;


;; Function void __gnu_cxx::new_allocator<_Tp>::deallocate(_Tp*, __gnu_cxx::new_allocator<_Tp>::size_type) [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


if (0)
  {
    <<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, __t * 4, 4) >>>>>;
    return;
  }
<<cleanup_point <<< Unknown tree: expr_stmt
  operator delete ((void *) __p, __t * 4) >>>>>;


;; Function constexpr bool std::less<_Tp*>::operator()(_Tp*, _Tp*) const [with _Tp = const char] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  if (__builtin_is_constant_evaluated ())
    {
      return <retval> = __x < __y;
    }
  return <retval> = (long long unsigned int) __x < (long long unsigned int) __y;
   >>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const wchar_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const wchar_t *) __r
   >>>;


;; Function static constexpr std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = wchar_t; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<wchar_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 9223372036854775807
   >>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = wchar_t; _Traits = std::char_traits<wchar_t>; _Alloc = std::allocator<wchar_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::__cxx11::basic_string<wchar_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function constexpr _Tp* std::allocator< <template-parameter-1-1> >::allocate(std::size_t) [with _Tp = wchar_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (wchar_t *) operator new (__n * 2)>>;
  }
<<cleanup_point return <retval> = __gnu_cxx::new_allocator<wchar_t>::allocate ((struct new_allocator *) this, __n, 0B)>>;


;; Function static constexpr std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char8_t; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char8_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 18446744073709551615
   >>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char8_t; _Traits = std::char_traits<char8_t>; _Alloc = std::allocator<char8_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::__cxx11::basic_string<char8_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function constexpr _Tp* std::allocator< <template-parameter-1-1> >::allocate(std::size_t) [with _Tp = char8_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char8_t *) operator new (NON_LVALUE_EXPR <__n>)>>;
  }
<<cleanup_point return <retval> = __gnu_cxx::new_allocator<char8_t>::allocate ((struct new_allocator *) this, __n, 0B)>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char8_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char8_t *) __r
   >>>;


;; Function static constexpr std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char16_t; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char16_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 9223372036854775807
   >>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char16_t; _Traits = std::char_traits<char16_t>; _Alloc = std::allocator<char16_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::__cxx11::basic_string<char16_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function constexpr _Tp* std::allocator< <template-parameter-1-1> >::allocate(std::size_t) [with _Tp = char16_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char16_t *) operator new (__n * 2)>>;
  }
<<cleanup_point return <retval> = __gnu_cxx::new_allocator<char16_t>::allocate ((struct new_allocator *) this, __n, 0B)>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char16_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char16_t *) __r
   >>>;


;; Function static constexpr std::allocator_traits<std::allocator<_CharT> >::size_type std::allocator_traits<std::allocator<_CharT> >::max_size(const allocator_type&) [with _Tp = char32_t; std::allocator_traits<std::allocator<_CharT> >::size_type = long long unsigned int; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<char32_t>] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4611686018427387903
   >>>;


;; Function const allocator_type& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_M_get_allocator() const [with _CharT = char32_t; _Traits = std::char_traits<char32_t>; _Alloc = std::allocator<char32_t>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::allocator_type = std::__cxx11::basic_string<char32_t>::allocator_type] (null)
;; enabled by -tree-original


return <retval> = (const struct allocator_type &) &((const struct basic_string *) this)->_M_dataplus;


;; Function constexpr _Tp* std::allocator< <template-parameter-1-1> >::allocate(std::size_t) [with _Tp = char32_t; std::size_t = long long unsigned int] (null)
;; enabled by -tree-original


if (<<cleanup_point std::is_constant_evaluated ()>>)
  {
    <<cleanup_point return <retval> = (char32_t *) operator new (__n * 4)>>;
  }
<<cleanup_point return <retval> = __gnu_cxx::new_allocator<char32_t>::allocate ((struct new_allocator *) this, __n, 0B)>>;


;; Function constexpr _Tp* std::__addressof(_Tp&) [with _Tp = const char32_t] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = (const char32_t *) __r
   >>>;


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::_M_max_size() const [with _Tp = wchar_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4611686018427387903
   >>>;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = wchar_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __builtin_expect (__gnu_cxx::new_allocator<wchar_t>::_M_max_size ((struct new_allocator *) this) < __n, 0) != 0>>)
    {
      if ((signed long long) __n < 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_array_new_length () >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 2;

          <<cleanup_point           align_val_t __al = 2;>>;
          <<cleanup_point return <retval> = (wchar_t *) operator new (__n * 2, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (wchar_t *) operator new (__n * 2)>>;
}


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::_M_max_size() const [with _Tp = char8_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 9223372036854775807
   >>>;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char8_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __builtin_expect (__gnu_cxx::new_allocator<char8_t>::_M_max_size ((struct new_allocator *) this) < __n, 0) != 0>>)
    {
      if (0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_array_new_length () >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 1;

          <<cleanup_point           align_val_t __al = 1;>>;
          <<cleanup_point return <retval> = (char8_t *) operator new (NON_LVALUE_EXPR <__n>, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (char8_t *) operator new (NON_LVALUE_EXPR <__n>)>>;
}


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::_M_max_size() const [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 4611686018427387903
   >>>;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char16_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __builtin_expect (__gnu_cxx::new_allocator<char16_t>::_M_max_size ((struct new_allocator *) this) < __n, 0) != 0>>)
    {
      if ((signed long long) __n < 0)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_array_new_length () >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 2;

          <<cleanup_point           align_val_t __al = 2;>>;
          <<cleanup_point return <retval> = (char16_t *) operator new (__n * 2, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (char16_t *) operator new (__n * 2)>>;
}


;; Function constexpr __gnu_cxx::new_allocator<_Tp>::size_type __gnu_cxx::new_allocator<_Tp>::_M_max_size() const [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


<<< Unknown tree: must_not_throw_expr
  return <retval> = 2305843009213693951
   >>>;


;; Function _Tp* __gnu_cxx::new_allocator<_Tp>::allocate(__gnu_cxx::new_allocator<_Tp>::size_type, const void*) [with _Tp = char32_t; __gnu_cxx::new_allocator<_Tp>::size_type = long long unsigned int] (null)
;; enabled by -tree-original


{
  if (<<cleanup_point __builtin_expect (__gnu_cxx::new_allocator<char32_t>::_M_max_size ((struct new_allocator *) this) < __n, 0) != 0>>)
    {
      if (__n > 4611686018427387903)
        {
          <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_array_new_length () >>>>>;
        }
      <<cleanup_point <<< Unknown tree: expr_stmt
  std::__throw_bad_alloc () >>>>>;
    }
  {
    if (0)
      {
        {
          align_val_t __al = 4;

          <<cleanup_point           align_val_t __al = 4;>>;
          <<cleanup_point return <retval> = (char32_t *) operator new (__n * 4, __al)>>;
        }
      }
  }
  <<cleanup_point return <retval> = (char32_t *) operator new (__n * 4)>>;
}


;; Function void __tcf_0() (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::Init::~Init (&__ioinit) >>>>>;


;; Function void __static_initialization_and_destruction_0(int, int) (null)
;; enabled by -tree-original


if (__initialize_p == 1)
  {
    if (__priority == 65535)
      {
        <<cleanup_point <<< Unknown tree: expr_stmt
  std::ios_base::Init::Init (&__ioinit) >>>>>;
        <<cleanup_point <<< Unknown tree: expr_stmt
  (void) atexit (__tcf_0) >>>>>;
      }
  }


;; Function (static initializers for main.cpp) (null)
;; enabled by -tree-original


<<cleanup_point <<< Unknown tree: expr_stmt
  __static_initialization_and_destruction_0 (1, 65535) >>>>>;

